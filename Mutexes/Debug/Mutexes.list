
Mutexes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006384  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006524  08006524  00016524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065d0  080065d0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065d8  080065d8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065d8  080065d8  000165d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065dc  080065dc  000165dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080065e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  2000006c  0800664c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c60  0800664c  00024c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017fc2  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003442  00000000  00000000  000380a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  0003b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fec  00000000  00000000  0003c970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044b1  00000000  00000000  0003d95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016551  00000000  00000000  00041e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a6d4  00000000  00000000  0005835e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cc8  00000000  00000000  000f2a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f86fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800650c 	.word	0x0800650c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800650c 	.word	0x0800650c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_write>:
void StartTask1(void *argument);
void StartTask2(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e00a      	b.n	8000504 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	1c4b      	adds	r3, r1, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	2201      	movs	r2, #1
 80004f8:	4807      	ldr	r0, [pc, #28]	; (8000518 <_write+0x3c>)
 80004fa:	f001 fd4f 	bl	8001f9c <HAL_UART_Transmit>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf0      	blt.n	80004ee <_write+0x12>
	}
	return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000088 	.word	0x20000088

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fb22 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f830 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8b6 	bl	8000698 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f88a 	bl	8000644 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f002 f934 	bl	800279c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <main+0x4c>)
 8000536:	f002 fa28 	bl	800298a <osMutexNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <main+0x50>)
 800053e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x54>)
 8000542:	2100      	movs	r1, #0
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0x58>)
 8000546:	f002 f973 	bl	8002830 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <main+0x5c>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <main+0x60>)
 8000552:	2100      	movs	r1, #0
 8000554:	480a      	ldr	r0, [pc, #40]	; (8000580 <main+0x64>)
 8000556:	f002 f96b 	bl	8002830 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a09      	ldr	r2, [pc, #36]	; (8000584 <main+0x68>)
 800055e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000560:	f002 f940 	bl	80027e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	e7fe      	b.n	8000564 <main+0x48>
 8000566:	bf00      	nop
 8000568:	080065a8 	.word	0x080065a8
 800056c:	200000d8 	.word	0x200000d8
 8000570:	08006560 	.word	0x08006560
 8000574:	08000725 	.word	0x08000725
 8000578:	200000d0 	.word	0x200000d0
 800057c:	08006584 	.word	0x08006584
 8000580:	0800075d 	.word	0x0800075d
 8000584:	200000d4 	.word	0x200000d4

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fc9e 	bl	8005ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xb4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xb4>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xb4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <SystemClock_Config+0xb8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <SystemClock_Config+0xb8>)
 80005d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <SystemClock_Config+0xb8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fd81 	bl	8001100 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000604:	f000 f8d8 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 ffe4 	bl	80015f0 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800062e:	f000 f8c3 	bl	80007b8 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_USART2_UART_Init+0x50>)
 800064c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800067c:	f001 fc3e 	bl	8001efc <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000686:	f000 f897 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000088 	.word	0x20000088
 8000694:	40004400 	.word	0x40004400

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_GPIO_Init+0x84>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a19      	ldr	r2, [pc, #100]	; (800071c <MX_GPIO_Init+0x84>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_GPIO_Init+0x84>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_GPIO_Init+0x84>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_GPIO_Init+0x84>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_GPIO_Init+0x84>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	4808      	ldr	r0, [pc, #32]	; (8000720 <MX_GPIO_Init+0x88>)
 80006fe:	f000 fb57 	bl	8000db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2105      	movs	r1, #5
 8000706:	2028      	movs	r0, #40	; 0x28
 8000708:	f000 fb28 	bl	8000d5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800070c:	2028      	movs	r0, #40	; 0x28
 800070e:	f000 fb41 	bl	8000d94 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000712:	bf00      	nop
 8000714:	3720      	adds	r7, #32
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40020800 	.word	0x40020800

08000724 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 800072c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000730:	f002 f910 	bl	8002954 <osDelay>
    osMutexAcquire(myMutex01Handle, 1000);
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <StartTask1+0x30>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800073c:	4618      	mov	r0, r3
 800073e:	f002 f9aa 	bl	8002a96 <osMutexAcquire>
    printf("1\r\n");
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <StartTask1+0x34>)
 8000744:	f005 fae8 	bl	8005d18 <puts>
    osMutexRelease(myMutex01Handle);
 8000748:	4b02      	ldr	r3, [pc, #8]	; (8000754 <StartTask1+0x30>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f002 f9ed 	bl	8002b2c <osMutexRelease>
    osDelay(2000);
 8000752:	e7eb      	b.n	800072c <StartTask1+0x8>
 8000754:	200000d8 	.word	0x200000d8
 8000758:	08006540 	.word	0x08006540

0800075c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(2000);
 8000764:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000768:	f002 f8f4 	bl	8002954 <osDelay>
	  osMutexAcquire(myMutex01Handle, 1000);
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <StartTask2+0x30>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f98e 	bl	8002a96 <osMutexAcquire>
	  printf("2\r\n");
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <StartTask2+0x34>)
 800077c:	f005 facc 	bl	8005d18 <puts>
	  osMutexRelease(myMutex01Handle);
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <StartTask2+0x30>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f002 f9d1 	bl	8002b2c <osMutexRelease>
	  osDelay(2000);
 800078a:	e7eb      	b.n	8000764 <StartTask2+0x8>
 800078c:	200000d8 	.word	0x200000d8
 8000790:	08006544 	.word	0x08006544

08000794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d101      	bne.n	80007aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a6:	f000 fa01 	bl	8000bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40014400 	.word	0x40014400

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_MspInit+0x54>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <HAL_MspInit+0x54>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <HAL_MspInit+0x54>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_MspInit+0x54>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <HAL_MspInit+0x54>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_MspInit+0x54>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	210f      	movs	r1, #15
 8000806:	f06f 0001 	mvn.w	r0, #1
 800080a:	f000 faa7 	bl	8000d5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <HAL_UART_MspInit+0x84>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d12b      	bne.n	8000896 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_UART_MspInit+0x88>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <HAL_UART_MspInit+0x88>)
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_UART_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_UART_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <HAL_UART_MspInit+0x88>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_UART_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000876:	230c      	movs	r3, #12
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000886:	2307      	movs	r3, #7
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <HAL_UART_MspInit+0x8c>)
 8000892:	f000 fa8d 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000

080008ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <HAL_InitTick+0xd0>)
 80008c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c4:	4a2d      	ldr	r2, [pc, #180]	; (800097c <HAL_InitTick+0xd0>)
 80008c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ca:	6453      	str	r3, [r2, #68]	; 0x44
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <HAL_InitTick+0xd0>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d8:	f107 020c 	add.w	r2, r7, #12
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 f864 	bl	80019b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008e8:	f001 f84e 	bl	8001988 <HAL_RCC_GetPCLK2Freq>
 80008ec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f0:	4a23      	ldr	r2, [pc, #140]	; (8000980 <HAL_InitTick+0xd4>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	0c9b      	lsrs	r3, r3, #18
 80008f8:	3b01      	subs	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <HAL_InitTick+0xd8>)
 80008fe:	4a22      	ldr	r2, [pc, #136]	; (8000988 <HAL_InitTick+0xdc>)
 8000900:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <HAL_InitTick+0xd8>)
 8000904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000908:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800090a:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <HAL_InitTick+0xd8>)
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <HAL_InitTick+0xd8>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_InitTick+0xd8>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_InitTick+0xd8>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000922:	4818      	ldr	r0, [pc, #96]	; (8000984 <HAL_InitTick+0xd8>)
 8000924:	f001 f876 	bl	8001a14 <HAL_TIM_Base_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800092e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000932:	2b00      	cmp	r3, #0
 8000934:	d11b      	bne.n	800096e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000936:	4813      	ldr	r0, [pc, #76]	; (8000984 <HAL_InitTick+0xd8>)
 8000938:	f001 f8c6 	bl	8001ac8 <HAL_TIM_Base_Start_IT>
 800093c:	4603      	mov	r3, r0
 800093e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000946:	2b00      	cmp	r3, #0
 8000948:	d111      	bne.n	800096e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800094a:	2019      	movs	r0, #25
 800094c:	f000 fa22 	bl	8000d94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b0f      	cmp	r3, #15
 8000954:	d808      	bhi.n	8000968 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000956:	2200      	movs	r2, #0
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	2019      	movs	r0, #25
 800095c:	f000 f9fe 	bl	8000d5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000960:	4a0a      	ldr	r2, [pc, #40]	; (800098c <HAL_InitTick+0xe0>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	e002      	b.n	800096e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800096e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000972:	4618      	mov	r0, r3
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	431bde83 	.word	0x431bde83
 8000984:	200000dc 	.word	0x200000dc
 8000988:	40014400 	.word	0x40014400
 800098c:	20000004 	.word	0x20000004

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009c2:	f001 f8e3 	bl	8001b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000dc 	.word	0x200000dc

080009d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80009d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009d8:	f000 fb6e 	bl	80010b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e00a      	b.n	8000a08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f2:	f3af 8000 	nop.w
 80009f6:	4601      	mov	r1, r0
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	60ba      	str	r2, [r7, #8]
 80009fe:	b2ca      	uxtb	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbf0      	blt.n	80009f2 <_read+0x12>
  }

  return len;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a42:	605a      	str	r2, [r3, #4]
  return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <_isatty>:

int _isatty(int file)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f005 fab4 	bl	8006020 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	20000124 	.word	0x20000124
 8000aec:	20004c60 	.word	0x20004c60

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	; (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f005 fa73 	bl	800602c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fce9 	bl	800051c <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b58:	080065e0 	.word	0x080065e0
  ldr r2, =_sbss
 8000b5c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b60:	20004c60 	.word	0x20004c60

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f8d8 	bl	8000d46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f7ff fe88 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe12 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000128 	.word	0x20000128

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000128 	.word	0x20000128

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff4c 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6e:	f7ff ff61 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	6978      	ldr	r0, [r7, #20]
 8000d7a:	f7ff ffb1 	bl	8000ce0 <NVIC_EncodePriority>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff80 	bl	8000c8c <__NVIC_SetPriority>
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff54 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e159      	b.n	8001080 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 8148 	bne.w	800107a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d005      	beq.n	8000e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d130      	bne.n	8000e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d017      	beq.n	8000ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d123      	bne.n	8000ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0203 	and.w	r2, r3, #3
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80a2 	beq.w	800107a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b57      	ldr	r3, [pc, #348]	; (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a56      	ldr	r2, [pc, #344]	; (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b54      	ldr	r3, [pc, #336]	; (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f52:	4a52      	ldr	r2, [pc, #328]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a49      	ldr	r2, [pc, #292]	; (80010a0 <HAL_GPIO_Init+0x2f0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x202>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a48      	ldr	r2, [pc, #288]	; (80010a4 <HAL_GPIO_Init+0x2f4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x1fe>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a47      	ldr	r2, [pc, #284]	; (80010a8 <HAL_GPIO_Init+0x2f8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x1fa>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a46      	ldr	r2, [pc, #280]	; (80010ac <HAL_GPIO_Init+0x2fc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x1f6>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a45      	ldr	r2, [pc, #276]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x1f2>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a2f      	ldr	r2, [pc, #188]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104a:	4a1a      	ldr	r2, [pc, #104]	; (80010b4 <HAL_GPIO_Init+0x304>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001074:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f67f aea2 	bls.w	8000dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f806 	bl	80010e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40013c00 	.word	0x40013c00

080010e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e267      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d075      	beq.n	800120a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800111e:	4b88      	ldr	r3, [pc, #544]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b04      	cmp	r3, #4
 8001128:	d00c      	beq.n	8001144 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112a:	4b85      	ldr	r3, [pc, #532]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001132:	2b08      	cmp	r3, #8
 8001134:	d112      	bne.n	800115c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001136:	4b82      	ldr	r3, [pc, #520]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001142:	d10b      	bne.n	800115c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	4b7e      	ldr	r3, [pc, #504]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d05b      	beq.n	8001208 <HAL_RCC_OscConfig+0x108>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d157      	bne.n	8001208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e242      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001164:	d106      	bne.n	8001174 <HAL_RCC_OscConfig+0x74>
 8001166:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a75      	ldr	r2, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800116c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e01d      	b.n	80011b0 <HAL_RCC_OscConfig+0xb0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x98>
 800117e:	4b70      	ldr	r3, [pc, #448]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6f      	ldr	r2, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b6d      	ldr	r3, [pc, #436]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6c      	ldr	r2, [pc, #432]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xb0>
 8001198:	4b69      	ldr	r3, [pc, #420]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a68      	ldr	r2, [pc, #416]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800119e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b66      	ldr	r3, [pc, #408]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a65      	ldr	r2, [pc, #404]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fd0c 	bl	8000bd4 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fd08 	bl	8000bd4 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e207      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0xc0>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fcf8 	bl	8000bd4 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fcf4 	bl	8000bd4 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1f3      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	4b51      	ldr	r3, [pc, #324]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0xe8>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d063      	beq.n	80012de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800122a:	2b08      	cmp	r3, #8
 800122c:	d11c      	bne.n	8001268 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x152>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e1c7      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4937      	ldr	r1, [pc, #220]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e03a      	b.n	80012de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d020      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b34      	ldr	r3, [pc, #208]	; (8001344 <HAL_RCC_OscConfig+0x244>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fcad 	bl	8000bd4 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fca9 	bl	8000bd4 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1a8      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4925      	ldr	r1, [pc, #148]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
 80012b0:	e015      	b.n	80012de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_RCC_OscConfig+0x244>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc8c 	bl	8000bd4 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc88 	bl	8000bd4 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e187      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d036      	beq.n	8001358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d016      	beq.n	8001320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_RCC_OscConfig+0x248>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff fc6c 	bl	8000bd4 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fc68 	bl	8000bd4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e167      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_OscConfig+0x240>)
 8001314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x200>
 800131e:	e01b      	b.n	8001358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_RCC_OscConfig+0x248>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fc55 	bl	8000bd4 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132c:	e00e      	b.n	800134c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff fc51 	bl	8000bd4 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d907      	bls.n	800134c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e150      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
 8001340:	40023800 	.word	0x40023800
 8001344:	42470000 	.word	0x42470000
 8001348:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800134e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ea      	bne.n	800132e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8097 	beq.w	8001494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136a:	4b81      	ldr	r3, [pc, #516]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a7c      	ldr	r2, [pc, #496]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b77      	ldr	r3, [pc, #476]	; (8001574 <HAL_RCC_OscConfig+0x474>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d118      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b74      	ldr	r3, [pc, #464]	; (8001574 <HAL_RCC_OscConfig+0x474>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a73      	ldr	r2, [pc, #460]	; (8001574 <HAL_RCC_OscConfig+0x474>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fc11 	bl	8000bd4 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff fc0d 	bl	8000bd4 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e10c      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x474>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x2ea>
 80013dc:	4b64      	ldr	r3, [pc, #400]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e0:	4a63      	ldr	r2, [pc, #396]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6713      	str	r3, [r2, #112]	; 0x70
 80013e8:	e01c      	b.n	8001424 <HAL_RCC_OscConfig+0x324>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x30c>
 80013f2:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a5e      	ldr	r2, [pc, #376]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001402:	4a5b      	ldr	r2, [pc, #364]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6713      	str	r3, [r2, #112]	; 0x70
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0x324>
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	4a57      	ldr	r2, [pc, #348]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6713      	str	r3, [r2, #112]	; 0x70
 8001418:	4b55      	ldr	r3, [pc, #340]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141c:	4a54      	ldr	r2, [pc, #336]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800141e:	f023 0304 	bic.w	r3, r3, #4
 8001422:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d015      	beq.n	8001458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fbd2 	bl	8000bd4 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	e00a      	b.n	800144a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001434:	f7ff fbce 	bl	8000bd4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001442:	4293      	cmp	r3, r2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e0cb      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144a:	4b49      	ldr	r3, [pc, #292]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0ee      	beq.n	8001434 <HAL_RCC_OscConfig+0x334>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff fbbc 	bl	8000bd4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145e:	e00a      	b.n	8001476 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001460:	f7ff fbb8 	bl	8000bd4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	; 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e0b5      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ee      	bne.n	8001460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a38      	ldr	r2, [pc, #224]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800148e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a1 	beq.w	80015e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d05c      	beq.n	8001564 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d141      	bne.n	8001536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_RCC_OscConfig+0x478>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fb8c 	bl	8000bd4 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fb88 	bl	8000bd4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e087      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	019b      	lsls	r3, r3, #6
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	3b01      	subs	r3, #1
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	491b      	ldr	r1, [pc, #108]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_RCC_OscConfig+0x478>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fb61 	bl	8000bd4 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff fb5d 	bl	8000bd4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e05c      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x416>
 8001534:	e054      	b.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_RCC_OscConfig+0x478>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fb4a 	bl	8000bd4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fb46 	bl	8000bd4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e045      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_RCC_OscConfig+0x470>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x444>
 8001562:	e03d      	b.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d107      	bne.n	800157c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e038      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000
 8001578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_RCC_OscConfig+0x4ec>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d028      	beq.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d121      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d11a      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ac:	4013      	ands	r3, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d111      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	3b01      	subs	r3, #1
 80015c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0cc      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d90c      	bls.n	800162c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b8      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a58      	ldr	r2, [pc, #352]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	494d      	ldr	r1, [pc, #308]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d044      	beq.n	8001710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d119      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d003      	beq.n	80016ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e067      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 0203 	bic.w	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4934      	ldr	r1, [pc, #208]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e0:	f7ff fa78 	bl	8000bd4 <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7ff fa74 	bl	8000bd4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e04f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 020c 	and.w	r2, r3, #12
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	429a      	cmp	r2, r3
 800170e:	d1eb      	bne.n	80016e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d20c      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e032      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4916      	ldr	r1, [pc, #88]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	490a      	ldr	r1, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f888 	bl	80008ac <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00
 80017ac:	40023800 	.word	0x40023800
 80017b0:	080065b8 	.word	0x080065b8
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c0:	b090      	sub	sp, #64	; 0x40
 80017c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d00d      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x40>
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	f200 80a1 	bhi.w	8001928 <HAL_RCC_GetSysClockFreq+0x16c>
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x34>
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ee:	e09b      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b53      	ldr	r3, [pc, #332]	; (8001940 <HAL_RCC_GetSysClockFreq+0x184>)
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017f4:	e09b      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f6:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_RCC_GetSysClockFreq+0x188>)
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017fa:	e098      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017fc:	4b4f      	ldr	r3, [pc, #316]	; (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001806:	4b4d      	ldr	r3, [pc, #308]	; (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d028      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001812:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	2200      	movs	r2, #0
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	627a      	str	r2, [r7, #36]	; 0x24
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001824:	2100      	movs	r1, #0
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_GetSysClockFreq+0x188>)
 8001828:	fb03 f201 	mul.w	r2, r3, r1
 800182c:	2300      	movs	r3, #0
 800182e:	fb00 f303 	mul.w	r3, r0, r3
 8001832:	4413      	add	r3, r2
 8001834:	4a43      	ldr	r2, [pc, #268]	; (8001944 <HAL_RCC_GetSysClockFreq+0x188>)
 8001836:	fba0 1202 	umull	r1, r2, r0, r2
 800183a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800183c:	460a      	mov	r2, r1
 800183e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001842:	4413      	add	r3, r2
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001848:	2200      	movs	r2, #0
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	61fa      	str	r2, [r7, #28]
 800184e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001852:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001856:	f7fe fcc3 	bl	80001e0 <__aeabi_uldivmod>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4613      	mov	r3, r2
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001862:	e053      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001864:	4b35      	ldr	r3, [pc, #212]	; (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	2200      	movs	r2, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	617a      	str	r2, [r7, #20]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001876:	f04f 0b00 	mov.w	fp, #0
 800187a:	4652      	mov	r2, sl
 800187c:	465b      	mov	r3, fp
 800187e:	f04f 0000 	mov.w	r0, #0
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	0159      	lsls	r1, r3, #5
 8001888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188c:	0150      	lsls	r0, r2, #5
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ebb2 080a 	subs.w	r8, r2, sl
 8001896:	eb63 090b 	sbc.w	r9, r3, fp
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018ae:	ebb2 0408 	subs.w	r4, r2, r8
 80018b2:	eb63 0509 	sbc.w	r5, r3, r9
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	00eb      	lsls	r3, r5, #3
 80018c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c4:	00e2      	lsls	r2, r4, #3
 80018c6:	4614      	mov	r4, r2
 80018c8:	461d      	mov	r5, r3
 80018ca:	eb14 030a 	adds.w	r3, r4, sl
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	eb45 030b 	adc.w	r3, r5, fp
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018e2:	4629      	mov	r1, r5
 80018e4:	028b      	lsls	r3, r1, #10
 80018e6:	4621      	mov	r1, r4
 80018e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018ec:	4621      	mov	r1, r4
 80018ee:	028a      	lsls	r2, r1, #10
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f6:	2200      	movs	r2, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	60fa      	str	r2, [r7, #12]
 80018fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001900:	f7fe fc6e 	bl	80001e0 <__aeabi_uldivmod>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4613      	mov	r3, r2
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_GetSysClockFreq+0x180>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	0c1b      	lsrs	r3, r3, #16
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	3301      	adds	r3, #1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800191c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800191e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001926:	e002      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_GetSysClockFreq+0x184>)
 800192a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800192c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001930:	4618      	mov	r0, r3
 8001932:	3740      	adds	r7, #64	; 0x40
 8001934:	46bd      	mov	sp, r7
 8001936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	00f42400 	.word	0x00f42400
 8001944:	017d7840 	.word	0x017d7840

08001948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_RCC_GetHCLKFreq+0x14>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000000 	.word	0x20000000

08001960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001964:	f7ff fff0 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 8001968:	4602      	mov	r2, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	0a9b      	lsrs	r3, r3, #10
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4903      	ldr	r1, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	080065c8 	.word	0x080065c8

08001988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800198c:	f7ff ffdc 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	0b5b      	lsrs	r3, r3, #13
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	4903      	ldr	r1, [pc, #12]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	080065c8 	.word	0x080065c8

080019b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	220f      	movs	r2, #15
 80019be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_RCC_GetClockConfig+0x60>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0207 	and.w	r2, r3, #7
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	601a      	str	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e041      	b.n	8001aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f839 	bl	8001ab2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f000 f9b2 	bl	8001dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d001      	beq.n	8001ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e044      	b.n	8001b6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_TIM_Base_Start_IT+0xb0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d018      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x6c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0a:	d013      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1a      	ldr	r2, [pc, #104]	; (8001b7c <HAL_TIM_Base_Start_IT+0xb4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00e      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x6c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d009      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x6c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d004      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x6c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d111      	bne.n	8001b58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d010      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0201 	orr.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b56:	e007      	b.n	8001b68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	40000400 	.word	0x40000400
 8001b80:	40000800 	.word	0x40000800
 8001b84:	40000c00 	.word	0x40000c00
 8001b88:	40014000 	.word	0x40014000

08001b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d020      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01b      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f06f 0202 	mvn.w	r2, #2
 8001bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8d2 	bl	8001d80 <HAL_TIM_IC_CaptureCallback>
 8001bdc:	e005      	b.n	8001bea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8c4 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f8d5 	bl	8001d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d020      	beq.n	8001c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01b      	beq.n	8001c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0204 	mvn.w	r2, #4
 8001c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8ac 	bl	8001d80 <HAL_TIM_IC_CaptureCallback>
 8001c28:	e005      	b.n	8001c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f89e 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f8af 	bl	8001d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d020      	beq.n	8001c88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01b      	beq.n	8001c88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0208 	mvn.w	r2, #8
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f886 	bl	8001d80 <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f878 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f889 	bl	8001d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d020      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01b      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0210 	mvn.w	r2, #16
 8001ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2208      	movs	r2, #8
 8001caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f860 	bl	8001d80 <HAL_TIM_IC_CaptureCallback>
 8001cc0:	e005      	b.n	8001cce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f852 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f863 	bl	8001d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0201 	mvn.w	r2, #1
 8001cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fd4e 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00c      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8e6 	bl	8001ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f834 	bl	8001da8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00c      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0220 	mvn.w	r2, #32
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8b8 	bl	8001ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a3a      	ldr	r2, [pc, #232]	; (8001eb8 <TIM_Base_SetConfig+0xfc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00f      	beq.n	8001df4 <TIM_Base_SetConfig+0x38>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dda:	d00b      	beq.n	8001df4 <TIM_Base_SetConfig+0x38>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a37      	ldr	r2, [pc, #220]	; (8001ebc <TIM_Base_SetConfig+0x100>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <TIM_Base_SetConfig+0x38>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a36      	ldr	r2, [pc, #216]	; (8001ec0 <TIM_Base_SetConfig+0x104>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d003      	beq.n	8001df4 <TIM_Base_SetConfig+0x38>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a35      	ldr	r2, [pc, #212]	; (8001ec4 <TIM_Base_SetConfig+0x108>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d108      	bne.n	8001e06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <TIM_Base_SetConfig+0xfc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01b      	beq.n	8001e46 <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e14:	d017      	beq.n	8001e46 <TIM_Base_SetConfig+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <TIM_Base_SetConfig+0x100>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <TIM_Base_SetConfig+0x8a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <TIM_Base_SetConfig+0x104>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00f      	beq.n	8001e46 <TIM_Base_SetConfig+0x8a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a26      	ldr	r2, [pc, #152]	; (8001ec4 <TIM_Base_SetConfig+0x108>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00b      	beq.n	8001e46 <TIM_Base_SetConfig+0x8a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <TIM_Base_SetConfig+0x10c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <TIM_Base_SetConfig+0x8a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <TIM_Base_SetConfig+0x110>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d003      	beq.n	8001e46 <TIM_Base_SetConfig+0x8a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <TIM_Base_SetConfig+0x114>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d108      	bne.n	8001e58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <TIM_Base_SetConfig+0xfc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d103      	bne.n	8001e8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d105      	bne.n	8001eaa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f023 0201 	bic.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	611a      	str	r2, [r3, #16]
  }
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	40000c00 	.word	0x40000c00
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40014400 	.word	0x40014400
 8001ed0:	40014800 	.word	0x40014800

08001ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e042      	b.n	8001f94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fc7a 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	; 0x24
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f973 	bl	800222c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d175      	bne.n	80020a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_UART_Transmit+0x2c>
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e06e      	b.n	80020aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2221      	movs	r2, #33	; 0x21
 8001fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fda:	f7fe fdfb 	bl	8000bd4 <HAL_GetTick>
 8001fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	88fa      	ldrh	r2, [r7, #6]
 8001fe4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	88fa      	ldrh	r2, [r7, #6]
 8001fea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff4:	d108      	bne.n	8002008 <HAL_UART_Transmit+0x6c>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d104      	bne.n	8002008 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	e003      	b.n	8002010 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002010:	e02e      	b.n	8002070 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2200      	movs	r2, #0
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f848 	bl	80020b2 <UART_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e03a      	b.n	80020aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10b      	bne.n	8002052 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	3302      	adds	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	e007      	b.n	8002062 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3301      	adds	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1cb      	bne.n	8002012 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2200      	movs	r2, #0
 8002082:	2140      	movs	r1, #64	; 0x40
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f814 	bl	80020b2 <UART_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e006      	b.n	80020aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020a8:	2302      	movs	r3, #2
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	4613      	mov	r3, r2
 80020c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c2:	e03b      	b.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ca:	d037      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020cc:	f7fe fd82 	bl	8000bd4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	6a3a      	ldr	r2, [r7, #32]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d302      	bcc.n	80020e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e03a      	b.n	800215c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d023      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b80      	cmp	r3, #128	; 0x80
 80020f8:	d020      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b40      	cmp	r3, #64	; 0x40
 80020fe:	d01d      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b08      	cmp	r3, #8
 800210c:	d116      	bne.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f81d 	bl	8002164 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2208      	movs	r2, #8
 800212e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e00f      	b.n	800215c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	4013      	ands	r3, r2
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	429a      	cmp	r2, r3
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	429a      	cmp	r2, r3
 8002158:	d0b4      	beq.n	80020c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002164:	b480      	push	{r7}
 8002166:	b095      	sub	sp, #84	; 0x54
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	330c      	adds	r3, #12
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	e853 3f00 	ldrex	r3, [r3]
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	330c      	adds	r3, #12
 800218a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800218c:	643a      	str	r2, [r7, #64]	; 0x40
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002194:	e841 2300 	strex	r3, r2, [r1]
 8002198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800219a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1e5      	bne.n	800216c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3314      	adds	r3, #20
 80021a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	e853 3f00 	ldrex	r3, [r3]
 80021ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3314      	adds	r3, #20
 80021be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c8:	e841 2300 	strex	r3, r2, [r1]
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e5      	bne.n	80021a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d119      	bne.n	8002210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	330c      	adds	r3, #12
 80021e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	e853 3f00 	ldrex	r3, [r3]
 80021ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f023 0310 	bic.w	r3, r3, #16
 80021f2:	647b      	str	r3, [r7, #68]	; 0x44
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	330c      	adds	r3, #12
 80021fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021fc:	61ba      	str	r2, [r7, #24]
 80021fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002200:	6979      	ldr	r1, [r7, #20]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	e841 2300 	strex	r3, r2, [r1]
 8002208:	613b      	str	r3, [r7, #16]
   return(result);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e5      	bne.n	80021dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800221e:	bf00      	nop
 8002220:	3754      	adds	r7, #84	; 0x54
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800222c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002230:	b0c0      	sub	sp, #256	; 0x100
 8002232:	af00      	add	r7, sp, #0
 8002234:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	ea40 0301 	orr.w	r3, r0, r1
 8002254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	431a      	orrs	r2, r3
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	431a      	orrs	r2, r3
 800226c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002284:	f021 010c 	bic.w	r1, r1, #12
 8002288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002292:	430b      	orrs	r3, r1
 8002294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a6:	6999      	ldr	r1, [r3, #24]
 80022a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	ea40 0301 	orr.w	r3, r0, r1
 80022b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b8f      	ldr	r3, [pc, #572]	; (80024f8 <UART_SetConfig+0x2cc>)
 80022bc:	429a      	cmp	r2, r3
 80022be:	d005      	beq.n	80022cc <UART_SetConfig+0xa0>
 80022c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b8d      	ldr	r3, [pc, #564]	; (80024fc <UART_SetConfig+0x2d0>)
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d104      	bne.n	80022d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022cc:	f7ff fb5c 	bl	8001988 <HAL_RCC_GetPCLK2Freq>
 80022d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022d4:	e003      	b.n	80022de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022d6:	f7ff fb43 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 80022da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e8:	f040 810c 	bne.w	8002504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f0:	2200      	movs	r2, #0
 80022f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022fe:	4622      	mov	r2, r4
 8002300:	462b      	mov	r3, r5
 8002302:	1891      	adds	r1, r2, r2
 8002304:	65b9      	str	r1, [r7, #88]	; 0x58
 8002306:	415b      	adcs	r3, r3
 8002308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800230a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800230e:	4621      	mov	r1, r4
 8002310:	eb12 0801 	adds.w	r8, r2, r1
 8002314:	4629      	mov	r1, r5
 8002316:	eb43 0901 	adc.w	r9, r3, r1
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800232a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800232e:	4690      	mov	r8, r2
 8002330:	4699      	mov	r9, r3
 8002332:	4623      	mov	r3, r4
 8002334:	eb18 0303 	adds.w	r3, r8, r3
 8002338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800233c:	462b      	mov	r3, r5
 800233e:	eb49 0303 	adc.w	r3, r9, r3
 8002342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002352:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800235a:	460b      	mov	r3, r1
 800235c:	18db      	adds	r3, r3, r3
 800235e:	653b      	str	r3, [r7, #80]	; 0x50
 8002360:	4613      	mov	r3, r2
 8002362:	eb42 0303 	adc.w	r3, r2, r3
 8002366:	657b      	str	r3, [r7, #84]	; 0x54
 8002368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800236c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002370:	f7fd ff36 	bl	80001e0 <__aeabi_uldivmod>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4b61      	ldr	r3, [pc, #388]	; (8002500 <UART_SetConfig+0x2d4>)
 800237a:	fba3 2302 	umull	r2, r3, r3, r2
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	011c      	lsls	r4, r3, #4
 8002382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002386:	2200      	movs	r2, #0
 8002388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800238c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002394:	4642      	mov	r2, r8
 8002396:	464b      	mov	r3, r9
 8002398:	1891      	adds	r1, r2, r2
 800239a:	64b9      	str	r1, [r7, #72]	; 0x48
 800239c:	415b      	adcs	r3, r3
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023a4:	4641      	mov	r1, r8
 80023a6:	eb12 0a01 	adds.w	sl, r2, r1
 80023aa:	4649      	mov	r1, r9
 80023ac:	eb43 0b01 	adc.w	fp, r3, r1
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023c4:	4692      	mov	sl, r2
 80023c6:	469b      	mov	fp, r3
 80023c8:	4643      	mov	r3, r8
 80023ca:	eb1a 0303 	adds.w	r3, sl, r3
 80023ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023d2:	464b      	mov	r3, r9
 80023d4:	eb4b 0303 	adc.w	r3, fp, r3
 80023d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023f0:	460b      	mov	r3, r1
 80023f2:	18db      	adds	r3, r3, r3
 80023f4:	643b      	str	r3, [r7, #64]	; 0x40
 80023f6:	4613      	mov	r3, r2
 80023f8:	eb42 0303 	adc.w	r3, r2, r3
 80023fc:	647b      	str	r3, [r7, #68]	; 0x44
 80023fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002406:	f7fd feeb 	bl	80001e0 <__aeabi_uldivmod>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4611      	mov	r1, r2
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <UART_SetConfig+0x2d4>)
 8002412:	fba3 2301 	umull	r2, r3, r3, r1
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	2264      	movs	r2, #100	; 0x64
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	1acb      	subs	r3, r1, r3
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <UART_SetConfig+0x2d4>)
 8002428:	fba3 2302 	umull	r2, r3, r3, r2
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002434:	441c      	add	r4, r3
 8002436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800243a:	2200      	movs	r2, #0
 800243c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002440:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002448:	4642      	mov	r2, r8
 800244a:	464b      	mov	r3, r9
 800244c:	1891      	adds	r1, r2, r2
 800244e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002450:	415b      	adcs	r3, r3
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002458:	4641      	mov	r1, r8
 800245a:	1851      	adds	r1, r2, r1
 800245c:	6339      	str	r1, [r7, #48]	; 0x30
 800245e:	4649      	mov	r1, r9
 8002460:	414b      	adcs	r3, r1
 8002462:	637b      	str	r3, [r7, #52]	; 0x34
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002470:	4659      	mov	r1, fp
 8002472:	00cb      	lsls	r3, r1, #3
 8002474:	4651      	mov	r1, sl
 8002476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800247a:	4651      	mov	r1, sl
 800247c:	00ca      	lsls	r2, r1, #3
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	4603      	mov	r3, r0
 8002484:	4642      	mov	r2, r8
 8002486:	189b      	adds	r3, r3, r2
 8002488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800248c:	464b      	mov	r3, r9
 800248e:	460a      	mov	r2, r1
 8002490:	eb42 0303 	adc.w	r3, r2, r3
 8002494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80024a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80024ac:	460b      	mov	r3, r1
 80024ae:	18db      	adds	r3, r3, r3
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b2:	4613      	mov	r3, r2
 80024b4:	eb42 0303 	adc.w	r3, r2, r3
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024c2:	f7fd fe8d 	bl	80001e0 <__aeabi_uldivmod>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <UART_SetConfig+0x2d4>)
 80024cc:	fba3 1302 	umull	r1, r3, r3, r2
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	2164      	movs	r1, #100	; 0x64
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	3332      	adds	r3, #50	; 0x32
 80024de:	4a08      	ldr	r2, [pc, #32]	; (8002500 <UART_SetConfig+0x2d4>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	f003 0207 	and.w	r2, r3, #7
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4422      	add	r2, r4
 80024f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024f4:	e106      	b.n	8002704 <UART_SetConfig+0x4d8>
 80024f6:	bf00      	nop
 80024f8:	40011000 	.word	0x40011000
 80024fc:	40011400 	.word	0x40011400
 8002500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002508:	2200      	movs	r2, #0
 800250a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800250e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002516:	4642      	mov	r2, r8
 8002518:	464b      	mov	r3, r9
 800251a:	1891      	adds	r1, r2, r2
 800251c:	6239      	str	r1, [r7, #32]
 800251e:	415b      	adcs	r3, r3
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
 8002522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002526:	4641      	mov	r1, r8
 8002528:	1854      	adds	r4, r2, r1
 800252a:	4649      	mov	r1, r9
 800252c:	eb43 0501 	adc.w	r5, r3, r1
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	00eb      	lsls	r3, r5, #3
 800253a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800253e:	00e2      	lsls	r2, r4, #3
 8002540:	4614      	mov	r4, r2
 8002542:	461d      	mov	r5, r3
 8002544:	4643      	mov	r3, r8
 8002546:	18e3      	adds	r3, r4, r3
 8002548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800254c:	464b      	mov	r3, r9
 800254e:	eb45 0303 	adc.w	r3, r5, r3
 8002552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002572:	4629      	mov	r1, r5
 8002574:	008b      	lsls	r3, r1, #2
 8002576:	4621      	mov	r1, r4
 8002578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800257c:	4621      	mov	r1, r4
 800257e:	008a      	lsls	r2, r1, #2
 8002580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002584:	f7fd fe2c 	bl	80001e0 <__aeabi_uldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4b60      	ldr	r3, [pc, #384]	; (8002710 <UART_SetConfig+0x4e4>)
 800258e:	fba3 2302 	umull	r2, r3, r3, r2
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	011c      	lsls	r4, r3, #4
 8002596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800259a:	2200      	movs	r2, #0
 800259c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80025a8:	4642      	mov	r2, r8
 80025aa:	464b      	mov	r3, r9
 80025ac:	1891      	adds	r1, r2, r2
 80025ae:	61b9      	str	r1, [r7, #24]
 80025b0:	415b      	adcs	r3, r3
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025b8:	4641      	mov	r1, r8
 80025ba:	1851      	adds	r1, r2, r1
 80025bc:	6139      	str	r1, [r7, #16]
 80025be:	4649      	mov	r1, r9
 80025c0:	414b      	adcs	r3, r1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d0:	4659      	mov	r1, fp
 80025d2:	00cb      	lsls	r3, r1, #3
 80025d4:	4651      	mov	r1, sl
 80025d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025da:	4651      	mov	r1, sl
 80025dc:	00ca      	lsls	r2, r1, #3
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	4642      	mov	r2, r8
 80025e6:	189b      	adds	r3, r3, r2
 80025e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025ec:	464b      	mov	r3, r9
 80025ee:	460a      	mov	r2, r1
 80025f0:	eb42 0303 	adc.w	r3, r2, r3
 80025f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	67bb      	str	r3, [r7, #120]	; 0x78
 8002602:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002610:	4649      	mov	r1, r9
 8002612:	008b      	lsls	r3, r1, #2
 8002614:	4641      	mov	r1, r8
 8002616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800261a:	4641      	mov	r1, r8
 800261c:	008a      	lsls	r2, r1, #2
 800261e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002622:	f7fd fddd 	bl	80001e0 <__aeabi_uldivmod>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4611      	mov	r1, r2
 800262c:	4b38      	ldr	r3, [pc, #224]	; (8002710 <UART_SetConfig+0x4e4>)
 800262e:	fba3 2301 	umull	r2, r3, r3, r1
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2264      	movs	r2, #100	; 0x64
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	1acb      	subs	r3, r1, r3
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	3332      	adds	r3, #50	; 0x32
 8002640:	4a33      	ldr	r2, [pc, #204]	; (8002710 <UART_SetConfig+0x4e4>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264c:	441c      	add	r4, r3
 800264e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002652:	2200      	movs	r2, #0
 8002654:	673b      	str	r3, [r7, #112]	; 0x70
 8002656:	677a      	str	r2, [r7, #116]	; 0x74
 8002658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800265c:	4642      	mov	r2, r8
 800265e:	464b      	mov	r3, r9
 8002660:	1891      	adds	r1, r2, r2
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	415b      	adcs	r3, r3
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800266c:	4641      	mov	r1, r8
 800266e:	1851      	adds	r1, r2, r1
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	4649      	mov	r1, r9
 8002674:	414b      	adcs	r3, r1
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002684:	4659      	mov	r1, fp
 8002686:	00cb      	lsls	r3, r1, #3
 8002688:	4651      	mov	r1, sl
 800268a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800268e:	4651      	mov	r1, sl
 8002690:	00ca      	lsls	r2, r1, #3
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	4603      	mov	r3, r0
 8002698:	4642      	mov	r2, r8
 800269a:	189b      	adds	r3, r3, r2
 800269c:	66bb      	str	r3, [r7, #104]	; 0x68
 800269e:	464b      	mov	r3, r9
 80026a0:	460a      	mov	r2, r1
 80026a2:	eb42 0303 	adc.w	r3, r2, r3
 80026a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	663b      	str	r3, [r7, #96]	; 0x60
 80026b2:	667a      	str	r2, [r7, #100]	; 0x64
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80026c0:	4649      	mov	r1, r9
 80026c2:	008b      	lsls	r3, r1, #2
 80026c4:	4641      	mov	r1, r8
 80026c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ca:	4641      	mov	r1, r8
 80026cc:	008a      	lsls	r2, r1, #2
 80026ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026d2:	f7fd fd85 	bl	80001e0 <__aeabi_uldivmod>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <UART_SetConfig+0x4e4>)
 80026dc:	fba3 1302 	umull	r1, r3, r3, r2
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	2164      	movs	r1, #100	; 0x64
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	3332      	adds	r3, #50	; 0x32
 80026ee:	4a08      	ldr	r2, [pc, #32]	; (8002710 <UART_SetConfig+0x4e4>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	f003 020f 	and.w	r2, r3, #15
 80026fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4422      	add	r2, r4
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	bf00      	nop
 8002706:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800270a:	46bd      	mov	sp, r7
 800270c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002710:	51eb851f 	.word	0x51eb851f

08002714 <__NVIC_SetPriority>:
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	490c      	ldr	r1, [pc, #48]	; (8002760 <__NVIC_SetPriority+0x4c>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <__NVIC_SetPriority+0x50>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3b04      	subs	r3, #4
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <SysTick_Handler+0x1c>)
 800276e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002770:	f002 f85a 	bl	8004828 <xTaskGetSchedulerState>
 8002774:	4603      	mov	r3, r0
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800277a:	f002 ff3d 	bl	80055f8 <xPortSysTickHandler>
  }
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000e010 	.word	0xe000e010

08002788 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800278c:	2100      	movs	r1, #0
 800278e:	f06f 0004 	mvn.w	r0, #4
 8002792:	f7ff ffbf 	bl	8002714 <__NVIC_SetPriority>
#endif
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027a2:	f3ef 8305 	mrs	r3, IPSR
 80027a6:	603b      	str	r3, [r7, #0]
  return(result);
 80027a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80027ae:	f06f 0305 	mvn.w	r3, #5
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	e00c      	b.n	80027d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <osKernelInitialize+0x44>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d105      	bne.n	80027ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <osKernelInitialize+0x44>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	e002      	b.n	80027d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	2000012c 	.word	0x2000012c

080027e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027ea:	f3ef 8305 	mrs	r3, IPSR
 80027ee:	603b      	str	r3, [r7, #0]
  return(result);
 80027f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80027f6:	f06f 0305 	mvn.w	r3, #5
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	e010      	b.n	8002820 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <osKernelStart+0x48>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d109      	bne.n	800281a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002806:	f7ff ffbf 	bl	8002788 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <osKernelStart+0x48>)
 800280c:	2202      	movs	r2, #2
 800280e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002810:	f001 fb9e 	bl	8003f50 <vTaskStartScheduler>
      stat = osOK;
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	e002      	b.n	8002820 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002820:	687b      	ldr	r3, [r7, #4]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2000012c 	.word	0x2000012c

08002830 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b08e      	sub	sp, #56	; 0x38
 8002834:	af04      	add	r7, sp, #16
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002840:	f3ef 8305 	mrs	r3, IPSR
 8002844:	617b      	str	r3, [r7, #20]
  return(result);
 8002846:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002848:	2b00      	cmp	r3, #0
 800284a:	d17e      	bne.n	800294a <osThreadNew+0x11a>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d07b      	beq.n	800294a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002856:	2318      	movs	r3, #24
 8002858:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d045      	beq.n	80028f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <osThreadNew+0x48>
        name = attr->name;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <osThreadNew+0x6e>
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b38      	cmp	r3, #56	; 0x38
 8002890:	d805      	bhi.n	800289e <osThreadNew+0x6e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <osThreadNew+0x72>
        return (NULL);
 800289e:	2300      	movs	r3, #0
 80028a0:	e054      	b.n	800294c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00e      	beq.n	80028d8 <osThreadNew+0xa8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2ba7      	cmp	r3, #167	; 0xa7
 80028c0:	d90a      	bls.n	80028d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <osThreadNew+0xa8>
        mem = 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	e010      	b.n	80028fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10c      	bne.n	80028fa <osThreadNew+0xca>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d108      	bne.n	80028fa <osThreadNew+0xca>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d104      	bne.n	80028fa <osThreadNew+0xca>
          mem = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e001      	b.n	80028fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d110      	bne.n	8002922 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002908:	9202      	str	r2, [sp, #8]
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f001 f92e 	bl	8003b78 <xTaskCreateStatic>
 800291c:	4603      	mov	r3, r0
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	e013      	b.n	800294a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d110      	bne.n	800294a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	b29a      	uxth	r2, r3
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f001 f979 	bl	8003c32 <xTaskCreate>
 8002940:	4603      	mov	r3, r0
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <osThreadNew+0x11a>
            hTask = NULL;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800294a:	693b      	ldr	r3, [r7, #16]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800295c:	f3ef 8305 	mrs	r3, IPSR
 8002960:	60bb      	str	r3, [r7, #8]
  return(result);
 8002962:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <osDelay+0x1c>
    stat = osErrorISR;
 8002968:	f06f 0305 	mvn.w	r3, #5
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e007      	b.n	8002980 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <osDelay+0x2c>
      vTaskDelay(ticks);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f001 fab4 	bl	8003ee8 <vTaskDelay>
    }
  }

  return (stat);
 8002980:	68fb      	ldr	r3, [r7, #12]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800298a:	b580      	push	{r7, lr}
 800298c:	b088      	sub	sp, #32
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002996:	f3ef 8305 	mrs	r3, IPSR
 800299a:	60bb      	str	r3, [r7, #8]
  return(result);
 800299c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d174      	bne.n	8002a8c <osMutexNew+0x102>
    if (attr != NULL) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <osMutexNew+0x26>
      type = attr->attr_bits;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	e001      	b.n	80029b4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <osMutexNew+0x3a>
      rmtx = 1U;
 80029be:	2301      	movs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e001      	b.n	80029c8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d15c      	bne.n	8002a8c <osMutexNew+0x102>
      mem = -1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d015      	beq.n	8002a0a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <osMutexNew+0x6a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b4f      	cmp	r3, #79	; 0x4f
 80029ec:	d902      	bls.n	80029f4 <osMutexNew+0x6a>
          mem = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	e00c      	b.n	8002a0e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d108      	bne.n	8002a0e <osMutexNew+0x84>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <osMutexNew+0x84>
            mem = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	e001      	b.n	8002a0e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d112      	bne.n	8002a3a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	2004      	movs	r0, #4
 8002a22:	f000 fb18 	bl	8003056 <xQueueCreateMutexStatic>
 8002a26:	61f8      	str	r0, [r7, #28]
 8002a28:	e016      	b.n	8002a58 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	2001      	movs	r0, #1
 8002a32:	f000 fb10 	bl	8003056 <xQueueCreateMutexStatic>
 8002a36:	61f8      	str	r0, [r7, #28]
 8002a38:	e00e      	b.n	8002a58 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002a46:	2004      	movs	r0, #4
 8002a48:	f000 faed 	bl	8003026 <xQueueCreateMutex>
 8002a4c:	61f8      	str	r0, [r7, #28]
 8002a4e:	e003      	b.n	8002a58 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002a50:	2001      	movs	r0, #1
 8002a52:	f000 fae8 	bl	8003026 <xQueueCreateMutex>
 8002a56:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <osMutexNew+0xee>
        if (attr != NULL) {
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <osMutexNew+0xe2>
          name = attr->name;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e001      	b.n	8002a70 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002a70:	68f9      	ldr	r1, [r7, #12]
 8002a72:	69f8      	ldr	r0, [r7, #28]
 8002a74:	f001 f822 	bl	8003abc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <osMutexNew+0x102>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ab4:	f3ef 8305 	mrs	r3, IPSR
 8002ab8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aba:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002ac0:	f06f 0305 	mvn.w	r3, #5
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e02c      	b.n	8002b22 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002ace:	f06f 0303 	mvn.w	r3, #3
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e025      	b.n	8002b22 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d011      	beq.n	8002b00 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002adc:	6839      	ldr	r1, [r7, #0]
 8002ade:	6938      	ldr	r0, [r7, #16]
 8002ae0:	f000 fb08 	bl	80030f4 <xQueueTakeMutexRecursive>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d01b      	beq.n	8002b22 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002af0:	f06f 0301 	mvn.w	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e014      	b.n	8002b22 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002af8:	f06f 0302 	mvn.w	r3, #2
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e010      	b.n	8002b22 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	6938      	ldr	r0, [r7, #16]
 8002b04:	f000 fda6 	bl	8003654 <xQueueSemaphoreTake>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d009      	beq.n	8002b22 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002b14:	f06f 0301 	mvn.w	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	e002      	b.n	8002b22 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002b1c:	f06f 0302 	mvn.w	r3, #2
 8002b20:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002b22:	697b      	ldr	r3, [r7, #20]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b48:	f3ef 8305 	mrs	r3, IPSR
 8002b4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b4e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <osMutexRelease+0x30>
    stat = osErrorISR;
 8002b54:	f06f 0305 	mvn.w	r3, #5
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	e01f      	b.n	8002b9c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002b62:	f06f 0303 	mvn.w	r3, #3
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e018      	b.n	8002b9c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002b70:	6938      	ldr	r0, [r7, #16]
 8002b72:	f000 fa8b 	bl	800308c <xQueueGiveMutexRecursive>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d00f      	beq.n	8002b9c <osMutexRelease+0x70>
        stat = osErrorResource;
 8002b7c:	f06f 0302 	mvn.w	r3, #2
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e00b      	b.n	8002b9c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002b84:	2300      	movs	r3, #0
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	6938      	ldr	r0, [r7, #16]
 8002b8c:	f000 fae8 	bl	8003160 <xQueueGenericSend>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d002      	beq.n	8002b9c <osMutexRelease+0x70>
        stat = osErrorResource;
 8002b96:	f06f 0302 	mvn.w	r3, #2
 8002b9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002b9c:	697b      	ldr	r3, [r7, #20]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002bb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4a06      	ldr	r2, [pc, #24]	; (8002bd8 <vApplicationGetIdleTaskMemory+0x30>)
 8002bbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000130 	.word	0x20000130
 8002bd8:	200001d8 	.word	0x200001d8

08002bdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <vApplicationGetTimerTaskMemory+0x2c>)
 8002bec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <vApplicationGetTimerTaskMemory+0x30>)
 8002bf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bfa:	601a      	str	r2, [r3, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	200003d8 	.word	0x200003d8
 8002c0c:	20000480 	.word	0x20000480

08002c10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f103 0208 	add.w	r2, r3, #8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f103 0208 	add.w	r2, r3, #8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 0208 	add.w	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d103      	bne.n	8002cd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e00c      	b.n	8002cec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e002      	b.n	8002ce0 <vListInsert+0x2e>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d2f6      	bcs.n	8002cda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	601a      	str	r2, [r3, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6892      	ldr	r2, [r2, #8]
 8002d3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6852      	ldr	r2, [r2, #4]
 8002d44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d103      	bne.n	8002d58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002da2:	f002 fb97 	bl	80054d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	68f9      	ldr	r1, [r7, #12]
 8002db0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	441a      	add	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	441a      	add	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	22ff      	movs	r2, #255	; 0xff
 8002de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d114      	bne.n	8002e22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01a      	beq.n	8002e36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3310      	adds	r3, #16
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 fb3d 	bl	8004484 <xTaskRemoveFromEventList>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d012      	beq.n	8002e36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <xQueueGenericReset+0xcc>)
 8002e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	e009      	b.n	8002e36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3310      	adds	r3, #16
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fef2 	bl	8002c10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3324      	adds	r3, #36	; 0x24
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff feed 	bl	8002c10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e36:	f002 fb7d 	bl	8005534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e3a:	2301      	movs	r3, #1
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	e000ed04 	.word	0xe000ed04

08002e48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08e      	sub	sp, #56	; 0x38
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <xQueueGenericCreateStatic+0x52>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <xQueueGenericCreateStatic+0x56>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <xQueueGenericCreateStatic+0x58>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	623b      	str	r3, [r7, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <xQueueGenericCreateStatic+0x7e>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <xQueueGenericCreateStatic+0x82>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueGenericCreateStatic+0x84>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	61fb      	str	r3, [r7, #28]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ee6:	2350      	movs	r3, #80	; 0x50
 8002ee8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b50      	cmp	r3, #80	; 0x50
 8002eee:	d00a      	beq.n	8002f06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	61bb      	str	r3, [r7, #24]
}
 8002f02:	bf00      	nop
 8002f04:	e7fe      	b.n	8002f04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f83f 	bl	8002fac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3730      	adds	r7, #48	; 0x30
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	613b      	str	r3, [r7, #16]
}
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3350      	adds	r3, #80	; 0x50
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 fbd1 	bl	8005718 <pvPortMalloc>
 8002f76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d011      	beq.n	8002fa2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3350      	adds	r3, #80	; 0x50
 8002f86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f90:	79fa      	ldrb	r2, [r7, #7]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f805 	bl	8002fac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	e002      	b.n	8002fce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fda:	2101      	movs	r1, #1
 8002fdc:	69b8      	ldr	r0, [r7, #24]
 8002fde:	f7ff fecb 	bl	8002d78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003012:	2300      	movs	r3, #0
 8003014:	2200      	movs	r2, #0
 8003016:	2100      	movs	r1, #0
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f8a1 	bl	8003160 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003030:	2301      	movs	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	461a      	mov	r2, r3
 800303c:	6939      	ldr	r1, [r7, #16]
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f7ff ff7a 	bl	8002f38 <xQueueGenericCreate>
 8003044:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff ffd3 	bl	8002ff2 <prvInitialiseMutex>

		return xNewQueue;
 800304c:	68fb      	ldr	r3, [r7, #12]
	}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003056:	b580      	push	{r7, lr}
 8003058:	b088      	sub	sp, #32
 800305a:	af02      	add	r7, sp, #8
 800305c:	4603      	mov	r3, r0
 800305e:	6039      	str	r1, [r7, #0]
 8003060:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003062:	2301      	movs	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2200      	movs	r2, #0
 8003072:	6939      	ldr	r1, [r7, #16]
 8003074:	6978      	ldr	r0, [r7, #20]
 8003076:	f7ff fee7 	bl	8002e48 <xQueueGenericCreateStatic>
 800307a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff ffb8 	bl	8002ff2 <prvInitialiseMutex>

		return xNewQueue;
 8003082:	68fb      	ldr	r3, [r7, #12]
	}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	60fb      	str	r3, [r7, #12]
}
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	689c      	ldr	r4, [r3, #8]
 80030b8:	f001 fba6 	bl	8004808 <xTaskGetCurrentTaskHandle>
 80030bc:	4603      	mov	r3, r0
 80030be:	429c      	cmp	r4, r3
 80030c0:	d111      	bne.n	80030e6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	1e5a      	subs	r2, r3, #1
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80030d4:	2300      	movs	r3, #0
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	6938      	ldr	r0, [r7, #16]
 80030dc:	f000 f840 	bl	8003160 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80030e0:	2301      	movs	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e001      	b.n	80030ea <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80030ea:	697b      	ldr	r3, [r7, #20]
	}
 80030ec:	4618      	mov	r0, r3
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd90      	pop	{r4, r7, pc}

080030f4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	60fb      	str	r3, [r7, #12]
}
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	689c      	ldr	r4, [r3, #8]
 8003122:	f001 fb71 	bl	8004808 <xTaskGetCurrentTaskHandle>
 8003126:	4603      	mov	r3, r0
 8003128:	429c      	cmp	r4, r3
 800312a:	d107      	bne.n	800313c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003136:	2301      	movs	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e00c      	b.n	8003156 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	6938      	ldr	r0, [r7, #16]
 8003140:	f000 fa88 	bl	8003654 <xQueueSemaphoreTake>
 8003144:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8003156:	697b      	ldr	r3, [r7, #20]
	}
 8003158:	4618      	mov	r0, r3
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd90      	pop	{r4, r7, pc}

08003160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08e      	sub	sp, #56	; 0x38
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800316e:	2300      	movs	r3, #0
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <xQueueGenericSend+0x32>
	__asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d103      	bne.n	80031a0 <xQueueGenericSend+0x40>
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <xQueueGenericSend+0x44>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <xQueueGenericSend+0x46>
 80031a4:	2300      	movs	r3, #0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <xQueueGenericSend+0x60>
	__asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d103      	bne.n	80031ce <xQueueGenericSend+0x6e>
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <xQueueGenericSend+0x72>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <xQueueGenericSend+0x74>
 80031d2:	2300      	movs	r3, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <xQueueGenericSend+0x8e>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	623b      	str	r3, [r7, #32]
}
 80031ea:	bf00      	nop
 80031ec:	e7fe      	b.n	80031ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ee:	f001 fb1b 	bl	8004828 <xTaskGetSchedulerState>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <xQueueGenericSend+0x9e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <xQueueGenericSend+0xa2>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <xQueueGenericSend+0xa4>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <xQueueGenericSend+0xbe>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	61fb      	str	r3, [r7, #28]
}
 800321a:	bf00      	nop
 800321c:	e7fe      	b.n	800321c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800321e:	f002 f959 	bl	80054d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <xQueueGenericSend+0xd4>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d129      	bne.n	8003288 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800323a:	f000 fb2f 	bl	800389c <prvCopyDataToQueue>
 800323e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2b00      	cmp	r3, #0
 8003246:	d010      	beq.n	800326a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	3324      	adds	r3, #36	; 0x24
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f919 	bl	8004484 <xTaskRemoveFromEventList>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003258:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <xQueueGenericSend+0x1f8>)
 800325a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	e00a      	b.n	8003280 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003270:	4b39      	ldr	r3, [pc, #228]	; (8003358 <xQueueGenericSend+0x1f8>)
 8003272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003280:	f002 f958 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 8003284:	2301      	movs	r3, #1
 8003286:	e063      	b.n	8003350 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800328e:	f002 f951 	bl	8005534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003292:	2300      	movs	r3, #0
 8003294:	e05c      	b.n	8003350 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003298:	2b00      	cmp	r3, #0
 800329a:	d106      	bne.n	80032aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 f953 	bl	800454c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032a6:	2301      	movs	r3, #1
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032aa:	f002 f943 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032ae:	f000 febf 	bl	8004030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032b2:	f002 f90f 	bl	80054d4 <vPortEnterCritical>
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032bc:	b25b      	sxtb	r3, r3
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d103      	bne.n	80032cc <xQueueGenericSend+0x16c>
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d2:	b25b      	sxtb	r3, r3
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d103      	bne.n	80032e2 <xQueueGenericSend+0x182>
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032e2:	f002 f927 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032e6:	1d3a      	adds	r2, r7, #4
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 f942 	bl	8004578 <xTaskCheckForTimeOut>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d124      	bne.n	8003344 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032fc:	f000 fbc6 	bl	8003a8c <prvIsQueueFull>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d018      	beq.n	8003338 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	3310      	adds	r3, #16
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f001 f868 	bl	80043e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003316:	f000 fb51 	bl	80039bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800331a:	f000 fe97 	bl	800404c <xTaskResumeAll>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	f47f af7c 	bne.w	800321e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <xQueueGenericSend+0x1f8>)
 8003328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	e772      	b.n	800321e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333a:	f000 fb3f 	bl	80039bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800333e:	f000 fe85 	bl	800404c <xTaskResumeAll>
 8003342:	e76c      	b.n	800321e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003346:	f000 fb39 	bl	80039bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800334a:	f000 fe7f 	bl	800404c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800334e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003350:	4618      	mov	r0, r3
 8003352:	3738      	adds	r7, #56	; 0x38
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b090      	sub	sp, #64	; 0x40
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003386:	bf00      	nop
 8003388:	e7fe      	b.n	8003388 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d103      	bne.n	8003398 <xQueueGenericSendFromISR+0x3c>
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <xQueueGenericSendFromISR+0x40>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <xQueueGenericSendFromISR+0x42>
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d103      	bne.n	80033c6 <xQueueGenericSendFromISR+0x6a>
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <xQueueGenericSendFromISR+0x6e>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <xQueueGenericSendFromISR+0x70>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	623b      	str	r3, [r7, #32]
}
 80033e2:	bf00      	nop
 80033e4:	e7fe      	b.n	80033e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033e6:	f002 f957 	bl	8005698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033ea:	f3ef 8211 	mrs	r2, BASEPRI
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	61fa      	str	r2, [r7, #28]
 8003400:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003402:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003404:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <xQueueGenericSendFromISR+0xbc>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d12f      	bne.n	8003478 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800341e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800342e:	f000 fa35 	bl	800389c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003432:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343a:	d112      	bne.n	8003462 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d016      	beq.n	8003472 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003446:	3324      	adds	r3, #36	; 0x24
 8003448:	4618      	mov	r0, r3
 800344a:	f001 f81b 	bl	8004484 <xTaskRemoveFromEventList>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00e      	beq.n	8003472 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e007      	b.n	8003472 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003466:	3301      	adds	r3, #1
 8003468:	b2db      	uxtb	r3, r3
 800346a:	b25a      	sxtb	r2, r3
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003472:	2301      	movs	r3, #1
 8003474:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003476:	e001      	b.n	800347c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003478:	2300      	movs	r3, #0
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003486:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800348a:	4618      	mov	r0, r3
 800348c:	3740      	adds	r7, #64	; 0x40
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08c      	sub	sp, #48	; 0x30
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10a      	bne.n	80034c4 <xQueueReceive+0x30>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	623b      	str	r3, [r7, #32]
}
 80034c0:	bf00      	nop
 80034c2:	e7fe      	b.n	80034c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d103      	bne.n	80034d2 <xQueueReceive+0x3e>
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <xQueueReceive+0x42>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <xQueueReceive+0x44>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <xQueueReceive+0x5e>
	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	61fb      	str	r3, [r7, #28]
}
 80034ee:	bf00      	nop
 80034f0:	e7fe      	b.n	80034f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034f2:	f001 f999 	bl	8004828 <xTaskGetSchedulerState>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <xQueueReceive+0x6e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <xQueueReceive+0x72>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <xQueueReceive+0x74>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <xQueueReceive+0x8e>
	__asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	61bb      	str	r3, [r7, #24]
}
 800351e:	bf00      	nop
 8003520:	e7fe      	b.n	8003520 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003522:	f001 ffd7 	bl	80054d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01f      	beq.n	8003572 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003536:	f000 fa1b 	bl	8003970 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	1e5a      	subs	r2, r3, #1
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00f      	beq.n	800356a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	3310      	adds	r3, #16
 800354e:	4618      	mov	r0, r3
 8003550:	f000 ff98 	bl	8004484 <xTaskRemoveFromEventList>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800355a:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <xQueueReceive+0x1bc>)
 800355c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800356a:	f001 ffe3 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 800356e:	2301      	movs	r3, #1
 8003570:	e069      	b.n	8003646 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003578:	f001 ffdc 	bl	8005534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800357c:	2300      	movs	r3, #0
 800357e:	e062      	b.n	8003646 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003586:	f107 0310 	add.w	r3, r7, #16
 800358a:	4618      	mov	r0, r3
 800358c:	f000 ffde 	bl	800454c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003590:	2301      	movs	r3, #1
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003594:	f001 ffce 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003598:	f000 fd4a 	bl	8004030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800359c:	f001 ff9a 	bl	80054d4 <vPortEnterCritical>
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a6:	b25b      	sxtb	r3, r3
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d103      	bne.n	80035b6 <xQueueReceive+0x122>
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d103      	bne.n	80035cc <xQueueReceive+0x138>
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035cc:	f001 ffb2 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035d0:	1d3a      	adds	r2, r7, #4
 80035d2:	f107 0310 	add.w	r3, r7, #16
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 ffcd 	bl	8004578 <xTaskCheckForTimeOut>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d123      	bne.n	800362c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e6:	f000 fa3b 	bl	8003a60 <prvIsQueueEmpty>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d017      	beq.n	8003620 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	3324      	adds	r3, #36	; 0x24
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fef3 	bl	80043e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003600:	f000 f9dc 	bl	80039bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003604:	f000 fd22 	bl	800404c <xTaskResumeAll>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d189      	bne.n	8003522 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <xQueueReceive+0x1bc>)
 8003610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	e780      	b.n	8003522 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003622:	f000 f9cb 	bl	80039bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003626:	f000 fd11 	bl	800404c <xTaskResumeAll>
 800362a:	e77a      	b.n	8003522 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800362c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800362e:	f000 f9c5 	bl	80039bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003632:	f000 fd0b 	bl	800404c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003638:	f000 fa12 	bl	8003a60 <prvIsQueueEmpty>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	f43f af6f 	beq.w	8003522 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003644:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003646:	4618      	mov	r0, r3
 8003648:	3730      	adds	r7, #48	; 0x30
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08e      	sub	sp, #56	; 0x38
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003666:	2300      	movs	r3, #0
 8003668:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	623b      	str	r3, [r7, #32]
}
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	61fb      	str	r3, [r7, #28]
}
 80036a0:	bf00      	nop
 80036a2:	e7fe      	b.n	80036a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036a4:	f001 f8c0 	bl	8004828 <xTaskGetSchedulerState>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <xQueueSemaphoreTake+0x60>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <xQueueSemaphoreTake+0x64>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <xQueueSemaphoreTake+0x66>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	61bb      	str	r3, [r7, #24]
}
 80036d0:	bf00      	nop
 80036d2:	e7fe      	b.n	80036d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036d4:	f001 fefe 	bl	80054d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d024      	beq.n	800372e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	1e5a      	subs	r2, r3, #1
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d104      	bne.n	80036fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80036f4:	f001 fa0e 	bl	8004b14 <pvTaskIncrementMutexHeldCount>
 80036f8:	4602      	mov	r2, r0
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00f      	beq.n	8003726 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	3310      	adds	r3, #16
 800370a:	4618      	mov	r0, r3
 800370c:	f000 feba 	bl	8004484 <xTaskRemoveFromEventList>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003716:	4b54      	ldr	r3, [pc, #336]	; (8003868 <xQueueSemaphoreTake+0x214>)
 8003718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003726:	f001 ff05 	bl	8005534 <vPortExitCritical>
				return pdPASS;
 800372a:	2301      	movs	r3, #1
 800372c:	e097      	b.n	800385e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d111      	bne.n	8003758 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	617b      	str	r3, [r7, #20]
}
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003750:	f001 fef0 	bl	8005534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003754:	2300      	movs	r3, #0
 8003756:	e082      	b.n	800385e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800375e:	f107 030c 	add.w	r3, r7, #12
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fef2 	bl	800454c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800376c:	f001 fee2 	bl	8005534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003770:	f000 fc5e 	bl	8004030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003774:	f001 feae 	bl	80054d4 <vPortEnterCritical>
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800377e:	b25b      	sxtb	r3, r3
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d103      	bne.n	800378e <xQueueSemaphoreTake+0x13a>
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003794:	b25b      	sxtb	r3, r3
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	d103      	bne.n	80037a4 <xQueueSemaphoreTake+0x150>
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037a4:	f001 fec6 	bl	8005534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037a8:	463a      	mov	r2, r7
 80037aa:	f107 030c 	add.w	r3, r7, #12
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fee1 	bl	8004578 <xTaskCheckForTimeOut>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d132      	bne.n	8003822 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037be:	f000 f94f 	bl	8003a60 <prvIsQueueEmpty>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d026      	beq.n	8003816 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80037d0:	f001 fe80 	bl	80054d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f843 	bl	8004864 <xTaskPriorityInherit>
 80037de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80037e0:	f001 fea8 	bl	8005534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e6:	3324      	adds	r3, #36	; 0x24
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fdf9 	bl	80043e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037f4:	f000 f8e2 	bl	80039bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037f8:	f000 fc28 	bl	800404c <xTaskResumeAll>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f47f af68 	bne.w	80036d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <xQueueSemaphoreTake+0x214>)
 8003806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	e75e      	b.n	80036d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003818:	f000 f8d0 	bl	80039bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800381c:	f000 fc16 	bl	800404c <xTaskResumeAll>
 8003820:	e758      	b.n	80036d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003822:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003824:	f000 f8ca 	bl	80039bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003828:	f000 fc10 	bl	800404c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800382c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800382e:	f000 f917 	bl	8003a60 <prvIsQueueEmpty>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	f43f af4d 	beq.w	80036d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003840:	f001 fe48 	bl	80054d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003844:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003846:	f000 f811 	bl	800386c <prvGetDisinheritPriorityAfterTimeout>
 800384a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f8dc 	bl	8004a10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003858:	f001 fe6c 	bl	8005534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800385c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800385e:	4618      	mov	r0, r3
 8003860:	3738      	adds	r7, #56	; 0x38
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d006      	beq.n	800388a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e001      	b.n	800388e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800388e:	68fb      	ldr	r3, [r7, #12]
	}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10d      	bne.n	80038d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d14d      	bne.n	800395e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 f834 	bl	8004934 <xTaskPriorityDisinherit>
 80038cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	e043      	b.n	800395e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d119      	bne.n	8003910 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6858      	ldr	r0, [r3, #4]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	461a      	mov	r2, r3
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	f002 fbc7 	bl	800607a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	441a      	add	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	d32b      	bcc.n	800395e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	e026      	b.n	800395e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68d8      	ldr	r0, [r3, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	461a      	mov	r2, r3
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	f002 fbad 	bl	800607a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	425b      	negs	r3, r3
 800392a:	441a      	add	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d207      	bcs.n	800394c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	425b      	negs	r3, r3
 8003946:	441a      	add	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d105      	bne.n	800395e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3b01      	subs	r3, #1
 800395c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003966:	697b      	ldr	r3, [r7, #20]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d018      	beq.n	80039b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	441a      	add	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	d303      	bcc.n	80039a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68d9      	ldr	r1, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	461a      	mov	r2, r3
 80039ae:	6838      	ldr	r0, [r7, #0]
 80039b0:	f002 fb63 	bl	800607a <memcpy>
	}
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039c4:	f001 fd86 	bl	80054d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039d0:	e011      	b.n	80039f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d012      	beq.n	8003a00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3324      	adds	r3, #36	; 0x24
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fd50 	bl	8004484 <xTaskRemoveFromEventList>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039ea:	f000 fe27 	bl	800463c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	dce9      	bgt.n	80039d2 <prvUnlockQueue+0x16>
 80039fe:	e000      	b.n	8003a02 <prvUnlockQueue+0x46>
					break;
 8003a00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	22ff      	movs	r2, #255	; 0xff
 8003a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a0a:	f001 fd93 	bl	8005534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a0e:	f001 fd61 	bl	80054d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a1a:	e011      	b.n	8003a40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3310      	adds	r3, #16
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fd2b 	bl	8004484 <xTaskRemoveFromEventList>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a34:	f000 fe02 	bl	800463c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a38:	7bbb      	ldrb	r3, [r7, #14]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	dce9      	bgt.n	8003a1c <prvUnlockQueue+0x60>
 8003a48:	e000      	b.n	8003a4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	22ff      	movs	r2, #255	; 0xff
 8003a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a54:	f001 fd6e 	bl	8005534 <vPortExitCritical>
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a68:	f001 fd34 	bl	80054d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	e001      	b.n	8003a7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a7e:	f001 fd59 	bl	8005534 <vPortExitCritical>

	return xReturn;
 8003a82:	68fb      	ldr	r3, [r7, #12]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a94:	f001 fd1e 	bl	80054d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d102      	bne.n	8003aaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e001      	b.n	8003aae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aae:	f001 fd41 	bl	8005534 <vPortExitCritical>

	return xReturn;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	e014      	b.n	8003af6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003acc:	4a0f      	ldr	r2, [pc, #60]	; (8003b0c <vQueueAddToRegistry+0x50>)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ad8:	490c      	ldr	r1, [pc, #48]	; (8003b0c <vQueueAddToRegistry+0x50>)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <vQueueAddToRegistry+0x50>)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003aee:	e006      	b.n	8003afe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3301      	adds	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b07      	cmp	r3, #7
 8003afa:	d9e7      	bls.n	8003acc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000880 	.word	0x20000880

08003b10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b20:	f001 fcd8 	bl	80054d4 <vPortEnterCritical>
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b2a:	b25b      	sxtb	r3, r3
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d103      	bne.n	8003b3a <vQueueWaitForMessageRestricted+0x2a>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b40:	b25b      	sxtb	r3, r3
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d103      	bne.n	8003b50 <vQueueWaitForMessageRestricted+0x40>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b50:	f001 fcf0 	bl	8005534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3324      	adds	r3, #36	; 0x24
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fc61 	bl	800442c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b6a:	6978      	ldr	r0, [r7, #20]
 8003b6c:	f7ff ff26 	bl	80039bc <prvUnlockQueue>
	}
 8003b70:	bf00      	nop
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	; 0x38
 8003b7c:	af04      	add	r7, sp, #16
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	623b      	str	r3, [r7, #32]
}
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <xTaskCreateStatic+0x46>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	61fb      	str	r3, [r7, #28]
}
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bbe:	23a8      	movs	r3, #168	; 0xa8
 8003bc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2ba8      	cmp	r3, #168	; 0xa8
 8003bc6:	d00a      	beq.n	8003bde <xTaskCreateStatic+0x66>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	61bb      	str	r3, [r7, #24]
}
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01e      	beq.n	8003c24 <xTaskCreateStatic+0xac>
 8003be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01b      	beq.n	8003c24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9303      	str	r3, [sp, #12]
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	9302      	str	r3, [sp, #8]
 8003c06:	f107 0314 	add.w	r3, r7, #20
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f850 	bl	8003cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c1e:	f000 f8f3 	bl	8003e08 <prvAddNewTaskToReadyList>
 8003c22:	e001      	b.n	8003c28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c28:	697b      	ldr	r3, [r7, #20]
	}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3728      	adds	r7, #40	; 0x28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b08c      	sub	sp, #48	; 0x30
 8003c36:	af04      	add	r7, sp, #16
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 fd66 	bl	8005718 <pvPortMalloc>
 8003c4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c54:	20a8      	movs	r0, #168	; 0xa8
 8003c56:	f001 fd5f 	bl	8005718 <pvPortMalloc>
 8003c5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
 8003c68:	e005      	b.n	8003c76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f001 fe20 	bl	80058b0 <vPortFree>
 8003c70:	e001      	b.n	8003c76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d017      	beq.n	8003cac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c84:	88fa      	ldrh	r2, [r7, #6]
 8003c86:	2300      	movs	r3, #0
 8003c88:	9303      	str	r3, [sp, #12]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	9302      	str	r3, [sp, #8]
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f80e 	bl	8003cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ca0:	69f8      	ldr	r0, [r7, #28]
 8003ca2:	f000 f8b1 	bl	8003e08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e002      	b.n	8003cb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cac:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	21a5      	movs	r1, #165	; 0xa5
 8003cd6:	f002 f8ff 	bl	8005ed8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f023 0307 	bic.w	r3, r3, #7
 8003cf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	617b      	str	r3, [r7, #20]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01f      	beq.n	8003d5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	e012      	b.n	8003d46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	7819      	ldrb	r1, [r3, #0]
 8003d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3334      	adds	r3, #52	; 0x34
 8003d30:	460a      	mov	r2, r1
 8003d32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d006      	beq.n	8003d4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	3301      	adds	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	2b0f      	cmp	r3, #15
 8003d4a:	d9e9      	bls.n	8003d20 <prvInitialiseNewTask+0x64>
 8003d4c:	e000      	b.n	8003d50 <prvInitialiseNewTask+0x94>
			{
				break;
 8003d4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d58:	e003      	b.n	8003d62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	2b37      	cmp	r3, #55	; 0x37
 8003d66:	d901      	bls.n	8003d6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d68:	2337      	movs	r3, #55	; 0x37
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	3304      	adds	r3, #4
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe ff64 	bl	8002c50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	3318      	adds	r3, #24
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe ff5f 	bl	8002c50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	3354      	adds	r3, #84	; 0x54
 8003dbc:	224c      	movs	r2, #76	; 0x4c
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f002 f889 	bl	8005ed8 <memset>
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	4a0c      	ldr	r2, [pc, #48]	; (8003dfc <prvInitialiseNewTask+0x140>)
 8003dca:	659a      	str	r2, [r3, #88]	; 0x58
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <prvInitialiseNewTask+0x144>)
 8003dd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <prvInitialiseNewTask+0x148>)
 8003dd6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	68f9      	ldr	r1, [r7, #12]
 8003ddc:	69b8      	ldr	r0, [r7, #24]
 8003dde:	f001 fa4f 	bl	8005280 <pxPortInitialiseStack>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003df4:	bf00      	nop
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20004b14 	.word	0x20004b14
 8003e00:	20004b7c 	.word	0x20004b7c
 8003e04:	20004be4 	.word	0x20004be4

08003e08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e10:	f001 fb60 	bl	80054d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e14:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <prvAddNewTaskToReadyList+0xc4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	4a2c      	ldr	r2, [pc, #176]	; (8003ecc <prvAddNewTaskToReadyList+0xc4>)
 8003e1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <prvAddNewTaskToReadyList+0xc8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e26:	4a2a      	ldr	r2, [pc, #168]	; (8003ed0 <prvAddNewTaskToReadyList+0xc8>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e2c:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <prvAddNewTaskToReadyList+0xc4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d110      	bne.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e34:	f000 fc26 	bl	8004684 <prvInitialiseTaskLists>
 8003e38:	e00d      	b.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e3a:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <prvAddNewTaskToReadyList+0xcc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e42:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <prvAddNewTaskToReadyList+0xc8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d802      	bhi.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e50:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <prvAddNewTaskToReadyList+0xc8>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e56:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <prvAddNewTaskToReadyList+0xd0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <prvAddNewTaskToReadyList+0xd0>)
 8003e5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e60:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <prvAddNewTaskToReadyList+0xd0>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <prvAddNewTaskToReadyList+0xd4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d903      	bls.n	8003e7c <prvAddNewTaskToReadyList+0x74>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	4a18      	ldr	r2, [pc, #96]	; (8003edc <prvAddNewTaskToReadyList+0xd4>)
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <prvAddNewTaskToReadyList+0xd8>)
 8003e8a:	441a      	add	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f7fe fee9 	bl	8002c6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e98:	f001 fb4c 	bl	8005534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <prvAddNewTaskToReadyList+0xcc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00e      	beq.n	8003ec2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <prvAddNewTaskToReadyList+0xc8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d207      	bcs.n	8003ec2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <prvAddNewTaskToReadyList+0xdc>)
 8003eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000d94 	.word	0x20000d94
 8003ed0:	200008c0 	.word	0x200008c0
 8003ed4:	20000da0 	.word	0x20000da0
 8003ed8:	20000db0 	.word	0x20000db0
 8003edc:	20000d9c 	.word	0x20000d9c
 8003ee0:	200008c4 	.word	0x200008c4
 8003ee4:	e000ed04 	.word	0xe000ed04

08003ee8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d017      	beq.n	8003f2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <vTaskDelay+0x60>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <vTaskDelay+0x30>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	60bb      	str	r3, [r7, #8]
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f18:	f000 f88a 	bl	8004030 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fe0c 	bl	8004b3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f24:	f000 f892 	bl	800404c <xTaskResumeAll>
 8003f28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d107      	bne.n	8003f40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <vTaskDelay+0x64>)
 8003f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000dbc 	.word	0x20000dbc
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f5e:	463a      	mov	r2, r7
 8003f60:	1d39      	adds	r1, r7, #4
 8003f62:	f107 0308 	add.w	r3, r7, #8
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fe1e 	bl	8002ba8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	9202      	str	r2, [sp, #8]
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	2300      	movs	r3, #0
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	460a      	mov	r2, r1
 8003f7e:	4924      	ldr	r1, [pc, #144]	; (8004010 <vTaskStartScheduler+0xc0>)
 8003f80:	4824      	ldr	r0, [pc, #144]	; (8004014 <vTaskStartScheduler+0xc4>)
 8003f82:	f7ff fdf9 	bl	8003b78 <xTaskCreateStatic>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4a23      	ldr	r2, [pc, #140]	; (8004018 <vTaskStartScheduler+0xc8>)
 8003f8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <vTaskStartScheduler+0xc8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f94:	2301      	movs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e001      	b.n	8003f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d102      	bne.n	8003faa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fa4:	f000 fe1e 	bl	8004be4 <xTimerCreateTimerTask>
 8003fa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d11b      	bne.n	8003fe8 <vTaskStartScheduler+0x98>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	613b      	str	r3, [r7, #16]
}
 8003fc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <vTaskStartScheduler+0xcc>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3354      	adds	r3, #84	; 0x54
 8003fca:	4a15      	ldr	r2, [pc, #84]	; (8004020 <vTaskStartScheduler+0xd0>)
 8003fcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <vTaskStartScheduler+0xd4>)
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <vTaskStartScheduler+0xd8>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <vTaskStartScheduler+0xdc>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fe2:	f001 f9d5 	bl	8005390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fe6:	e00e      	b.n	8004006 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d10a      	bne.n	8004006 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	60fb      	str	r3, [r7, #12]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <vTaskStartScheduler+0xb4>
}
 8004006:	bf00      	nop
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	08006548 	.word	0x08006548
 8004014:	08004655 	.word	0x08004655
 8004018:	20000db8 	.word	0x20000db8
 800401c:	200008c0 	.word	0x200008c0
 8004020:	20000068 	.word	0x20000068
 8004024:	20000db4 	.word	0x20000db4
 8004028:	20000da0 	.word	0x20000da0
 800402c:	20000d98 	.word	0x20000d98

08004030 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <vTaskSuspendAll+0x18>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	4a03      	ldr	r2, [pc, #12]	; (8004048 <vTaskSuspendAll+0x18>)
 800403c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	20000dbc 	.word	0x20000dbc

0800404c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800405a:	4b42      	ldr	r3, [pc, #264]	; (8004164 <xTaskResumeAll+0x118>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <xTaskResumeAll+0x2c>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	603b      	str	r3, [r7, #0]
}
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004078:	f001 fa2c 	bl	80054d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800407c:	4b39      	ldr	r3, [pc, #228]	; (8004164 <xTaskResumeAll+0x118>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3b01      	subs	r3, #1
 8004082:	4a38      	ldr	r2, [pc, #224]	; (8004164 <xTaskResumeAll+0x118>)
 8004084:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004086:	4b37      	ldr	r3, [pc, #220]	; (8004164 <xTaskResumeAll+0x118>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d162      	bne.n	8004154 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800408e:	4b36      	ldr	r3, [pc, #216]	; (8004168 <xTaskResumeAll+0x11c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d05e      	beq.n	8004154 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004096:	e02f      	b.n	80040f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004098:	4b34      	ldr	r3, [pc, #208]	; (800416c <xTaskResumeAll+0x120>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3318      	adds	r3, #24
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fe3d 	bl	8002d24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe fe38 	bl	8002d24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	4b2d      	ldr	r3, [pc, #180]	; (8004170 <xTaskResumeAll+0x124>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d903      	bls.n	80040c8 <xTaskResumeAll+0x7c>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <xTaskResumeAll+0x124>)
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4a27      	ldr	r2, [pc, #156]	; (8004174 <xTaskResumeAll+0x128>)
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3304      	adds	r3, #4
 80040dc:	4619      	mov	r1, r3
 80040de:	4610      	mov	r0, r2
 80040e0:	f7fe fdc3 	bl	8002c6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	4b23      	ldr	r3, [pc, #140]	; (8004178 <xTaskResumeAll+0x12c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <xTaskResumeAll+0x130>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f8:	4b1c      	ldr	r3, [pc, #112]	; (800416c <xTaskResumeAll+0x120>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1cb      	bne.n	8004098 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004106:	f000 fb5f 	bl	80047c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <xTaskResumeAll+0x134>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d010      	beq.n	8004138 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004116:	f000 f847 	bl	80041a8 <xTaskIncrementTick>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004120:	4b16      	ldr	r3, [pc, #88]	; (800417c <xTaskResumeAll+0x130>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3b01      	subs	r3, #1
 800412a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f1      	bne.n	8004116 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <xTaskResumeAll+0x134>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <xTaskResumeAll+0x130>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <xTaskResumeAll+0x138>)
 8004146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004154:	f001 f9ee 	bl	8005534 <vPortExitCritical>

	return xAlreadyYielded;
 8004158:	68bb      	ldr	r3, [r7, #8]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000dbc 	.word	0x20000dbc
 8004168:	20000d94 	.word	0x20000d94
 800416c:	20000d54 	.word	0x20000d54
 8004170:	20000d9c 	.word	0x20000d9c
 8004174:	200008c4 	.word	0x200008c4
 8004178:	200008c0 	.word	0x200008c0
 800417c:	20000da8 	.word	0x20000da8
 8004180:	20000da4 	.word	0x20000da4
 8004184:	e000ed04 	.word	0xe000ed04

08004188 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <xTaskGetTickCount+0x1c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004194:	687b      	ldr	r3, [r7, #4]
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000d98 	.word	0x20000d98

080041a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b2:	4b4f      	ldr	r3, [pc, #316]	; (80042f0 <xTaskIncrementTick+0x148>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f040 808f 	bne.w	80042da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041bc:	4b4d      	ldr	r3, [pc, #308]	; (80042f4 <xTaskIncrementTick+0x14c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3301      	adds	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041c4:	4a4b      	ldr	r2, [pc, #300]	; (80042f4 <xTaskIncrementTick+0x14c>)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d120      	bne.n	8004212 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041d0:	4b49      	ldr	r3, [pc, #292]	; (80042f8 <xTaskIncrementTick+0x150>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	603b      	str	r3, [r7, #0]
}
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <xTaskIncrementTick+0x46>
 80041f0:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <xTaskIncrementTick+0x150>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	4b41      	ldr	r3, [pc, #260]	; (80042fc <xTaskIncrementTick+0x154>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3f      	ldr	r2, [pc, #252]	; (80042f8 <xTaskIncrementTick+0x150>)
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4a3f      	ldr	r2, [pc, #252]	; (80042fc <xTaskIncrementTick+0x154>)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <xTaskIncrementTick+0x158>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3301      	adds	r3, #1
 800420a:	4a3d      	ldr	r2, [pc, #244]	; (8004300 <xTaskIncrementTick+0x158>)
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	f000 fadb 	bl	80047c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004212:	4b3c      	ldr	r3, [pc, #240]	; (8004304 <xTaskIncrementTick+0x15c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d349      	bcc.n	80042b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <xTaskIncrementTick+0x150>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d104      	bne.n	8004230 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004226:	4b37      	ldr	r3, [pc, #220]	; (8004304 <xTaskIncrementTick+0x15c>)
 8004228:	f04f 32ff 	mov.w	r2, #4294967295
 800422c:	601a      	str	r2, [r3, #0]
					break;
 800422e:	e03f      	b.n	80042b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004230:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <xTaskIncrementTick+0x150>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d203      	bcs.n	8004250 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004248:	4a2e      	ldr	r2, [pc, #184]	; (8004304 <xTaskIncrementTick+0x15c>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800424e:	e02f      	b.n	80042b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	3304      	adds	r3, #4
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe fd65 	bl	8002d24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3318      	adds	r3, #24
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fd5c 	bl	8002d24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <xTaskIncrementTick+0x160>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d903      	bls.n	8004280 <xTaskIncrementTick+0xd8>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4a22      	ldr	r2, [pc, #136]	; (8004308 <xTaskIncrementTick+0x160>)
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4a1f      	ldr	r2, [pc, #124]	; (800430c <xTaskIncrementTick+0x164>)
 800428e:	441a      	add	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f7fe fce7 	bl	8002c6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a0:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <xTaskIncrementTick+0x168>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d3b8      	bcc.n	800421c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042aa:	2301      	movs	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ae:	e7b5      	b.n	800421c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042b0:	4b17      	ldr	r3, [pc, #92]	; (8004310 <xTaskIncrementTick+0x168>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b6:	4915      	ldr	r1, [pc, #84]	; (800430c <xTaskIncrementTick+0x164>)
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d901      	bls.n	80042cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042cc:	4b11      	ldr	r3, [pc, #68]	; (8004314 <xTaskIncrementTick+0x16c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80042d4:	2301      	movs	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e004      	b.n	80042e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <xTaskIncrementTick+0x170>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3301      	adds	r3, #1
 80042e0:	4a0d      	ldr	r2, [pc, #52]	; (8004318 <xTaskIncrementTick+0x170>)
 80042e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042e4:	697b      	ldr	r3, [r7, #20]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000dbc 	.word	0x20000dbc
 80042f4:	20000d98 	.word	0x20000d98
 80042f8:	20000d4c 	.word	0x20000d4c
 80042fc:	20000d50 	.word	0x20000d50
 8004300:	20000dac 	.word	0x20000dac
 8004304:	20000db4 	.word	0x20000db4
 8004308:	20000d9c 	.word	0x20000d9c
 800430c:	200008c4 	.word	0x200008c4
 8004310:	200008c0 	.word	0x200008c0
 8004314:	20000da8 	.word	0x20000da8
 8004318:	20000da4 	.word	0x20000da4

0800431c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004322:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <vTaskSwitchContext+0xb0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800432a:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <vTaskSwitchContext+0xb4>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004330:	e046      	b.n	80043c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004332:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <vTaskSwitchContext+0xb4>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004338:	4b26      	ldr	r3, [pc, #152]	; (80043d4 <vTaskSwitchContext+0xb8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e010      	b.n	8004362 <vTaskSwitchContext+0x46>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <vTaskSwitchContext+0x40>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	607b      	str	r3, [r7, #4]
}
 8004358:	bf00      	nop
 800435a:	e7fe      	b.n	800435a <vTaskSwitchContext+0x3e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3b01      	subs	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	491d      	ldr	r1, [pc, #116]	; (80043d8 <vTaskSwitchContext+0xbc>)
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0e4      	beq.n	8004340 <vTaskSwitchContext+0x24>
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <vTaskSwitchContext+0xbc>)
 8004382:	4413      	add	r3, r2
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	3308      	adds	r3, #8
 8004398:	429a      	cmp	r2, r3
 800439a:	d104      	bne.n	80043a6 <vTaskSwitchContext+0x8a>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <vTaskSwitchContext+0xc0>)
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <vTaskSwitchContext+0xb8>)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <vTaskSwitchContext+0xc0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3354      	adds	r3, #84	; 0x54
 80043bc:	4a08      	ldr	r2, [pc, #32]	; (80043e0 <vTaskSwitchContext+0xc4>)
 80043be:	6013      	str	r3, [r2, #0]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	20000dbc 	.word	0x20000dbc
 80043d0:	20000da8 	.word	0x20000da8
 80043d4:	20000d9c 	.word	0x20000d9c
 80043d8:	200008c4 	.word	0x200008c4
 80043dc:	200008c0 	.word	0x200008c0
 80043e0:	20000068 	.word	0x20000068

080043e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60fb      	str	r3, [r7, #12]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800440a:	4b07      	ldr	r3, [pc, #28]	; (8004428 <vTaskPlaceOnEventList+0x44>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3318      	adds	r3, #24
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fe fc4d 	bl	8002cb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004418:	2101      	movs	r1, #1
 800441a:	6838      	ldr	r0, [r7, #0]
 800441c:	f000 fb8e 	bl	8004b3c <prvAddCurrentTaskToDelayedList>
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	200008c0 	.word	0x200008c0

0800442c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	617b      	str	r3, [r7, #20]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004454:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <vTaskPlaceOnEventListRestricted+0x54>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3318      	adds	r3, #24
 800445a:	4619      	mov	r1, r3
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7fe fc04 	bl	8002c6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004468:	f04f 33ff 	mov.w	r3, #4294967295
 800446c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	68b8      	ldr	r0, [r7, #8]
 8004472:	f000 fb63 	bl	8004b3c <prvAddCurrentTaskToDelayedList>
	}
 8004476:	bf00      	nop
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	200008c0 	.word	0x200008c0

08004484 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	60fb      	str	r3, [r7, #12]
}
 80044ac:	bf00      	nop
 80044ae:	e7fe      	b.n	80044ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3318      	adds	r3, #24
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe fc35 	bl	8002d24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ba:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <xTaskRemoveFromEventList+0xb0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d11d      	bne.n	80044fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fc2c 	bl	8002d24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <xTaskRemoveFromEventList+0xb4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d903      	bls.n	80044e0 <xTaskRemoveFromEventList+0x5c>
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	4a16      	ldr	r2, [pc, #88]	; (8004538 <xTaskRemoveFromEventList+0xb4>)
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <xTaskRemoveFromEventList+0xb8>)
 80044ee:	441a      	add	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f7fe fbb7 	bl	8002c6a <vListInsertEnd>
 80044fc:	e005      	b.n	800450a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3318      	adds	r3, #24
 8004502:	4619      	mov	r1, r3
 8004504:	480e      	ldr	r0, [pc, #56]	; (8004540 <xTaskRemoveFromEventList+0xbc>)
 8004506:	f7fe fbb0 	bl	8002c6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <xTaskRemoveFromEventList+0xc0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	429a      	cmp	r2, r3
 8004516:	d905      	bls.n	8004524 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004518:	2301      	movs	r3, #1
 800451a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <xTaskRemoveFromEventList+0xc4>)
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e001      	b.n	8004528 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004528:	697b      	ldr	r3, [r7, #20]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000dbc 	.word	0x20000dbc
 8004538:	20000d9c 	.word	0x20000d9c
 800453c:	200008c4 	.word	0x200008c4
 8004540:	20000d54 	.word	0x20000d54
 8004544:	200008c0 	.word	0x200008c0
 8004548:	20000da8 	.word	0x20000da8

0800454c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <vTaskInternalSetTimeOutState+0x24>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <vTaskInternalSetTimeOutState+0x28>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	605a      	str	r2, [r3, #4]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20000dac 	.word	0x20000dac
 8004574:	20000d98 	.word	0x20000d98

08004578 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	613b      	str	r3, [r7, #16]
}
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	60fb      	str	r3, [r7, #12]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045ba:	f000 ff8b 	bl	80054d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045be:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <xTaskCheckForTimeOut+0xbc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d102      	bne.n	80045de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	e023      	b.n	8004626 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <xTaskCheckForTimeOut+0xc0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d007      	beq.n	80045fa <xTaskCheckForTimeOut+0x82>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	e015      	b.n	8004626 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	429a      	cmp	r2, r3
 8004602:	d20b      	bcs.n	800461c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad2      	subs	r2, r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff ff9b 	bl	800454c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	e004      	b.n	8004626 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004622:	2301      	movs	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004626:	f000 ff85 	bl	8005534 <vPortExitCritical>

	return xReturn;
 800462a:	69fb      	ldr	r3, [r7, #28]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3720      	adds	r7, #32
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000d98 	.word	0x20000d98
 8004638:	20000dac 	.word	0x20000dac

0800463c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <vTaskMissedYield+0x14>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	20000da8 	.word	0x20000da8

08004654 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800465c:	f000 f852 	bl	8004704 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <prvIdleTask+0x28>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d9f9      	bls.n	800465c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <prvIdleTask+0x2c>)
 800466a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004678:	e7f0      	b.n	800465c <prvIdleTask+0x8>
 800467a:	bf00      	nop
 800467c:	200008c4 	.word	0x200008c4
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800468a:	2300      	movs	r3, #0
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	e00c      	b.n	80046aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <prvInitialiseTaskLists+0x60>)
 800469c:	4413      	add	r3, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fab6 	bl	8002c10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3301      	adds	r3, #1
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b37      	cmp	r3, #55	; 0x37
 80046ae:	d9ef      	bls.n	8004690 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046b0:	480d      	ldr	r0, [pc, #52]	; (80046e8 <prvInitialiseTaskLists+0x64>)
 80046b2:	f7fe faad 	bl	8002c10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046b6:	480d      	ldr	r0, [pc, #52]	; (80046ec <prvInitialiseTaskLists+0x68>)
 80046b8:	f7fe faaa 	bl	8002c10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046bc:	480c      	ldr	r0, [pc, #48]	; (80046f0 <prvInitialiseTaskLists+0x6c>)
 80046be:	f7fe faa7 	bl	8002c10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046c2:	480c      	ldr	r0, [pc, #48]	; (80046f4 <prvInitialiseTaskLists+0x70>)
 80046c4:	f7fe faa4 	bl	8002c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046c8:	480b      	ldr	r0, [pc, #44]	; (80046f8 <prvInitialiseTaskLists+0x74>)
 80046ca:	f7fe faa1 	bl	8002c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046ce:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <prvInitialiseTaskLists+0x78>)
 80046d0:	4a05      	ldr	r2, [pc, #20]	; (80046e8 <prvInitialiseTaskLists+0x64>)
 80046d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046d4:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <prvInitialiseTaskLists+0x7c>)
 80046d6:	4a05      	ldr	r2, [pc, #20]	; (80046ec <prvInitialiseTaskLists+0x68>)
 80046d8:	601a      	str	r2, [r3, #0]
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200008c4 	.word	0x200008c4
 80046e8:	20000d24 	.word	0x20000d24
 80046ec:	20000d38 	.word	0x20000d38
 80046f0:	20000d54 	.word	0x20000d54
 80046f4:	20000d68 	.word	0x20000d68
 80046f8:	20000d80 	.word	0x20000d80
 80046fc:	20000d4c 	.word	0x20000d4c
 8004700:	20000d50 	.word	0x20000d50

08004704 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800470a:	e019      	b.n	8004740 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800470c:	f000 fee2 	bl	80054d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004710:	4b10      	ldr	r3, [pc, #64]	; (8004754 <prvCheckTasksWaitingTermination+0x50>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4618      	mov	r0, r3
 800471e:	f7fe fb01 	bl	8002d24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004722:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <prvCheckTasksWaitingTermination+0x54>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3b01      	subs	r3, #1
 8004728:	4a0b      	ldr	r2, [pc, #44]	; (8004758 <prvCheckTasksWaitingTermination+0x54>)
 800472a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <prvCheckTasksWaitingTermination+0x58>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3b01      	subs	r3, #1
 8004732:	4a0a      	ldr	r2, [pc, #40]	; (800475c <prvCheckTasksWaitingTermination+0x58>)
 8004734:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004736:	f000 fefd 	bl	8005534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f810 	bl	8004760 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <prvCheckTasksWaitingTermination+0x58>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e1      	bne.n	800470c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000d68 	.word	0x20000d68
 8004758:	20000d94 	.word	0x20000d94
 800475c:	20000d7c 	.word	0x20000d7c

08004760 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3354      	adds	r3, #84	; 0x54
 800476c:	4618      	mov	r0, r3
 800476e:	f001 fbcb 	bl	8005f08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004778:	2b00      	cmp	r3, #0
 800477a:	d108      	bne.n	800478e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	4618      	mov	r0, r3
 8004782:	f001 f895 	bl	80058b0 <vPortFree>
				vPortFree( pxTCB );
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f001 f892 	bl	80058b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800478c:	e018      	b.n	80047c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004794:	2b01      	cmp	r3, #1
 8004796:	d103      	bne.n	80047a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 f889 	bl	80058b0 <vPortFree>
	}
 800479e:	e00f      	b.n	80047c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d00a      	beq.n	80047c0 <prvDeleteTCB+0x60>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	60fb      	str	r3, [r7, #12]
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <prvDeleteTCB+0x5e>
	}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ce:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <prvResetNextTaskUnblockTime+0x38>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <prvResetNextTaskUnblockTime+0x3c>)
 80047da:	f04f 32ff 	mov.w	r2, #4294967295
 80047de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047e0:	e008      	b.n	80047f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e2:	4b07      	ldr	r3, [pc, #28]	; (8004800 <prvResetNextTaskUnblockTime+0x38>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4a04      	ldr	r2, [pc, #16]	; (8004804 <prvResetNextTaskUnblockTime+0x3c>)
 80047f2:	6013      	str	r3, [r2, #0]
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	20000d4c 	.word	0x20000d4c
 8004804:	20000db4 	.word	0x20000db4

08004808 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <xTaskGetCurrentTaskHandle+0x1c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004814:	687b      	ldr	r3, [r7, #4]
	}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	200008c0 	.word	0x200008c0

08004828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <xTaskGetSchedulerState+0x34>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004836:	2301      	movs	r3, #1
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	e008      	b.n	800484e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800483c:	4b08      	ldr	r3, [pc, #32]	; (8004860 <xTaskGetSchedulerState+0x38>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004844:	2302      	movs	r3, #2
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	e001      	b.n	800484e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800484e:	687b      	ldr	r3, [r7, #4]
	}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	20000da0 	.word	0x20000da0
 8004860:	20000dbc 	.word	0x20000dbc

08004864 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d051      	beq.n	800491e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487e:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <xTaskPriorityInherit+0xc4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	429a      	cmp	r2, r3
 8004886:	d241      	bcs.n	800490c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	db06      	blt.n	800489e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004890:	4b25      	ldr	r3, [pc, #148]	; (8004928 <xTaskPriorityInherit+0xc4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6959      	ldr	r1, [r3, #20]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4a1f      	ldr	r2, [pc, #124]	; (800492c <xTaskPriorityInherit+0xc8>)
 80048b0:	4413      	add	r3, r2
 80048b2:	4299      	cmp	r1, r3
 80048b4:	d122      	bne.n	80048fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fa32 	bl	8002d24 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <xTaskPriorityInherit+0xc4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ce:	4b18      	ldr	r3, [pc, #96]	; (8004930 <xTaskPriorityInherit+0xcc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d903      	bls.n	80048de <xTaskPriorityInherit+0x7a>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	4a15      	ldr	r2, [pc, #84]	; (8004930 <xTaskPriorityInherit+0xcc>)
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4a10      	ldr	r2, [pc, #64]	; (800492c <xTaskPriorityInherit+0xc8>)
 80048ec:	441a      	add	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7fe f9b8 	bl	8002c6a <vListInsertEnd>
 80048fa:	e004      	b.n	8004906 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <xTaskPriorityInherit+0xc4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e008      	b.n	800491e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <xTaskPriorityInherit+0xc4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	429a      	cmp	r2, r3
 8004918:	d201      	bcs.n	800491e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800491a:	2301      	movs	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800491e:	68fb      	ldr	r3, [r7, #12]
	}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	200008c0 	.word	0x200008c0
 800492c:	200008c4 	.word	0x200008c4
 8004930:	20000d9c 	.word	0x20000d9c

08004934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d056      	beq.n	80049f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800494a:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <xTaskPriorityDisinherit+0xd0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d00a      	beq.n	800496a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	60fb      	str	r3, [r7, #12]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60bb      	str	r3, [r7, #8]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	429a      	cmp	r2, r3
 800499c:	d02c      	beq.n	80049f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d128      	bne.n	80049f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe f9ba 	bl	8002d24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <xTaskPriorityDisinherit+0xd4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d903      	bls.n	80049d8 <xTaskPriorityDisinherit+0xa4>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <xTaskPriorityDisinherit+0xd4>)
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <xTaskPriorityDisinherit+0xd8>)
 80049e6:	441a      	add	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f7fe f93b 	bl	8002c6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049f4:	2301      	movs	r3, #1
 80049f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049f8:	697b      	ldr	r3, [r7, #20]
	}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200008c0 	.word	0x200008c0
 8004a08:	20000d9c 	.word	0x20000d9c
 8004a0c:	200008c4 	.word	0x200008c4

08004a10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d06a      	beq.n	8004afe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	60fb      	str	r3, [r7, #12]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d902      	bls.n	8004a56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e002      	b.n	8004a5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d04b      	beq.n	8004afe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d146      	bne.n	8004afe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004a70:	4b25      	ldr	r3, [pc, #148]	; (8004b08 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d10a      	bne.n	8004a90 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	60bb      	str	r3, [r7, #8]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	db04      	blt.n	8004aae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	6959      	ldr	r1, [r3, #20]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004abe:	4413      	add	r3, r2
 8004ac0:	4299      	cmp	r1, r3
 8004ac2:	d11c      	bne.n	8004afe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe f92b 	bl	8002d24 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d903      	bls.n	8004ae2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004af0:	441a      	add	r2, r3
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	3304      	adds	r3, #4
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f7fe f8b6 	bl	8002c6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004afe:	bf00      	nop
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	200008c0 	.word	0x200008c0
 8004b0c:	200008c4 	.word	0x200008c4
 8004b10:	20000d9c 	.word	0x20000d9c

08004b14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004b18:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d004      	beq.n	8004b2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b26:	3201      	adds	r2, #1
 8004b28:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004b2a:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
	}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	200008c0 	.word	0x200008c0

08004b3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b46:	4b21      	ldr	r3, [pc, #132]	; (8004bcc <prvAddCurrentTaskToDelayedList+0x90>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b4c:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3304      	adds	r3, #4
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe f8e6 	bl	8002d24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d10a      	bne.n	8004b76 <prvAddCurrentTaskToDelayedList+0x3a>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b66:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4819      	ldr	r0, [pc, #100]	; (8004bd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b70:	f7fe f87b 	bl	8002c6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b74:	e026      	b.n	8004bc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b7e:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d209      	bcs.n	8004ba2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7fe f889 	bl	8002cb2 <vListInsert>
}
 8004ba0:	e010      	b.n	8004bc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f7fe f87f 	bl	8002cb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d202      	bcs.n	8004bc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bbe:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	6013      	str	r3, [r2, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000d98 	.word	0x20000d98
 8004bd0:	200008c0 	.word	0x200008c0
 8004bd4:	20000d80 	.word	0x20000d80
 8004bd8:	20000d50 	.word	0x20000d50
 8004bdc:	20000d4c 	.word	0x20000d4c
 8004be0:	20000db4 	.word	0x20000db4

08004be4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bee:	f000 fb07 	bl	8005200 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bf2:	4b1c      	ldr	r3, [pc, #112]	; (8004c64 <xTimerCreateTimerTask+0x80>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d021      	beq.n	8004c3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c02:	1d3a      	adds	r2, r7, #4
 8004c04:	f107 0108 	add.w	r1, r7, #8
 8004c08:	f107 030c 	add.w	r3, r7, #12
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fd ffe5 	bl	8002bdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	9202      	str	r2, [sp, #8]
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2300      	movs	r3, #0
 8004c22:	460a      	mov	r2, r1
 8004c24:	4910      	ldr	r1, [pc, #64]	; (8004c68 <xTimerCreateTimerTask+0x84>)
 8004c26:	4811      	ldr	r0, [pc, #68]	; (8004c6c <xTimerCreateTimerTask+0x88>)
 8004c28:	f7fe ffa6 	bl	8003b78 <xTaskCreateStatic>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4a10      	ldr	r2, [pc, #64]	; (8004c70 <xTimerCreateTimerTask+0x8c>)
 8004c30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c32:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <xTimerCreateTimerTask+0x8c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	613b      	str	r3, [r7, #16]
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c5a:	697b      	ldr	r3, [r7, #20]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000df0 	.word	0x20000df0
 8004c68:	08006550 	.word	0x08006550
 8004c6c:	08004da9 	.word	0x08004da9
 8004c70:	20000df4 	.word	0x20000df4

08004c74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	623b      	str	r3, [r7, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <xTimerGenericCommand+0x98>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d02a      	beq.n	8004d00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b05      	cmp	r3, #5
 8004cba:	dc18      	bgt.n	8004cee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cbc:	f7ff fdb4 	bl	8004828 <xTaskGetSchedulerState>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d109      	bne.n	8004cda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <xTimerGenericCommand+0x98>)
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f107 0110 	add.w	r1, r7, #16
 8004cce:	2300      	movs	r3, #0
 8004cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd2:	f7fe fa45 	bl	8003160 <xQueueGenericSend>
 8004cd6:	6278      	str	r0, [r7, #36]	; 0x24
 8004cd8:	e012      	b.n	8004d00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cda:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <xTimerGenericCommand+0x98>)
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	f107 0110 	add.w	r1, r7, #16
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f7fe fa3b 	bl	8003160 <xQueueGenericSend>
 8004cea:	6278      	str	r0, [r7, #36]	; 0x24
 8004cec:	e008      	b.n	8004d00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cee:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <xTimerGenericCommand+0x98>)
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	f107 0110 	add.w	r1, r7, #16
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	f7fe fb2f 	bl	800335c <xQueueGenericSendFromISR>
 8004cfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3728      	adds	r7, #40	; 0x28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000df0 	.word	0x20000df0

08004d10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d1a:	4b22      	ldr	r3, [pc, #136]	; (8004da4 <prvProcessExpiredTimer+0x94>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fd fffb 	bl	8002d24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d022      	beq.n	8004d82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	18d1      	adds	r1, r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	6978      	ldr	r0, [r7, #20]
 8004d4a:	f000 f8d1 	bl	8004ef0 <prvInsertTimerInActiveList>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01f      	beq.n	8004d94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d54:	2300      	movs	r3, #0
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6978      	ldr	r0, [r7, #20]
 8004d60:	f7ff ff88 	bl	8004c74 <xTimerGenericCommand>
 8004d64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d113      	bne.n	8004d94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	60fb      	str	r3, [r7, #12]
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	6978      	ldr	r0, [r7, #20]
 8004d9a:	4798      	blx	r3
}
 8004d9c:	bf00      	nop
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000de8 	.word	0x20000de8

08004da8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004db0:	f107 0308 	add.w	r3, r7, #8
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 f857 	bl	8004e68 <prvGetNextExpireTime>
 8004dba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f803 	bl	8004dcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dc6:	f000 f8d5 	bl	8004f74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dca:	e7f1      	b.n	8004db0 <prvTimerTask+0x8>

08004dcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004dd6:	f7ff f92b 	bl	8004030 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dda:	f107 0308 	add.w	r3, r7, #8
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f866 	bl	8004eb0 <prvSampleTimeNow>
 8004de4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d130      	bne.n	8004e4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <prvProcessTimerOrBlockTask+0x3c>
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d806      	bhi.n	8004e08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004dfa:	f7ff f927 	bl	800404c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ff85 	bl	8004d10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e06:	e024      	b.n	8004e52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d008      	beq.n	8004e20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e0e:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <prvProcessTimerOrBlockTask+0x90>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <prvProcessTimerOrBlockTask+0x50>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <prvProcessTimerOrBlockTask+0x52>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e20:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <prvProcessTimerOrBlockTask+0x94>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	f7fe fe6f 	bl	8003b10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e32:	f7ff f90b 	bl	800404c <xTaskResumeAll>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e3c:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <prvProcessTimerOrBlockTask+0x98>)
 8004e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	f3bf 8f6f 	isb	sy
}
 8004e4c:	e001      	b.n	8004e52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e4e:	f7ff f8fd 	bl	800404c <xTaskResumeAll>
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000dec 	.word	0x20000dec
 8004e60:	20000df0 	.word	0x20000df0
 8004e64:	e000ed04 	.word	0xe000ed04

08004e68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e70:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <prvGetNextExpireTime+0x44>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <prvGetNextExpireTime+0x16>
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	e000      	b.n	8004e80 <prvGetNextExpireTime+0x18>
 8004e7e:	2200      	movs	r2, #0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d105      	bne.n	8004e98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e8c:	4b07      	ldr	r3, [pc, #28]	; (8004eac <prvGetNextExpireTime+0x44>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e001      	b.n	8004e9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20000de8 	.word	0x20000de8

08004eb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004eb8:	f7ff f966 	bl	8004188 <xTaskGetTickCount>
 8004ebc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <prvSampleTimeNow+0x3c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d205      	bcs.n	8004ed4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ec8:	f000 f936 	bl	8005138 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e002      	b.n	8004eda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004eda:	4a04      	ldr	r2, [pc, #16]	; (8004eec <prvSampleTimeNow+0x3c>)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000df8 	.word	0x20000df8

08004ef0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d812      	bhi.n	8004f3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d302      	bcc.n	8004f2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f24:	2301      	movs	r3, #1
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e01b      	b.n	8004f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <prvInsertTimerInActiveList+0x7c>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f7fd febc 	bl	8002cb2 <vListInsert>
 8004f3a:	e012      	b.n	8004f62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d206      	bcs.n	8004f52 <prvInsertTimerInActiveList+0x62>
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d302      	bcc.n	8004f52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	e007      	b.n	8004f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f52:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <prvInsertTimerInActiveList+0x80>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	f7fd fea8 	bl	8002cb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f62:	697b      	ldr	r3, [r7, #20]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000dec 	.word	0x20000dec
 8004f70:	20000de8 	.word	0x20000de8

08004f74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08e      	sub	sp, #56	; 0x38
 8004f78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f7a:	e0ca      	b.n	8005112 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	da18      	bge.n	8004fb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f82:	1d3b      	adds	r3, r7, #4
 8004f84:	3304      	adds	r3, #4
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	61fb      	str	r3, [r7, #28]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004faa:	6850      	ldr	r0, [r2, #4]
 8004fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fae:	6892      	ldr	r2, [r2, #8]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f2c0 80ab 	blt.w	8005112 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fd fea9 	bl	8002d24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff6b 	bl	8004eb0 <prvSampleTimeNow>
 8004fda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b09      	cmp	r3, #9
 8004fe0:	f200 8096 	bhi.w	8005110 <prvProcessReceivedCommands+0x19c>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <prvProcessReceivedCommands+0x78>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	08005015 	.word	0x08005015
 8004ff8:	08005089 	.word	0x08005089
 8004ffc:	0800509d 	.word	0x0800509d
 8005000:	080050e7 	.word	0x080050e7
 8005004:	08005015 	.word	0x08005015
 8005008:	08005015 	.word	0x08005015
 800500c:	08005089 	.word	0x08005089
 8005010:	0800509d 	.word	0x0800509d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	b2da      	uxtb	r2, r3
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	18d1      	adds	r1, r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005034:	f7ff ff5c 	bl	8004ef0 <prvInsertTimerInActiveList>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d069      	beq.n	8005112 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005044:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05e      	beq.n	8005112 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	441a      	add	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	2100      	movs	r1, #0
 8005064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005066:	f7ff fe05 	bl	8004c74 <xTimerGenericCommand>
 800506a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d14f      	bne.n	8005112 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	61bb      	str	r3, [r7, #24]
}
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800509a:	e03a      	b.n	8005112 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	617b      	str	r3, [r7, #20]
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	18d1      	adds	r1, r2, r3
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e0:	f7ff ff06 	bl	8004ef0 <prvInsertTimerInActiveList>
					break;
 80050e4:	e015      	b.n	8005112 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d103      	bne.n	80050fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80050f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f6:	f000 fbdb 	bl	80058b0 <vPortFree>
 80050fa:	e00a      	b.n	8005112 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	b2da      	uxtb	r2, r3
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800510e:	e000      	b.n	8005112 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005110:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005112:	4b08      	ldr	r3, [pc, #32]	; (8005134 <prvProcessReceivedCommands+0x1c0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	1d39      	adds	r1, r7, #4
 8005118:	2200      	movs	r2, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe f9ba 	bl	8003494 <xQueueReceive>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	f47f af2a 	bne.w	8004f7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005128:	bf00      	nop
 800512a:	bf00      	nop
 800512c:	3730      	adds	r7, #48	; 0x30
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000df0 	.word	0x20000df0

08005138 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800513e:	e048      	b.n	80051d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005140:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800514a:	4b2b      	ldr	r3, [pc, #172]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3304      	adds	r3, #4
 8005158:	4618      	mov	r0, r3
 800515a:	f7fd fde3 	bl	8002d24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d02e      	beq.n	80051d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	d90e      	bls.n	80051a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005192:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3304      	adds	r3, #4
 800519a:	4619      	mov	r1, r3
 800519c:	4610      	mov	r0, r2
 800519e:	f7fd fd88 	bl	8002cb2 <vListInsert>
 80051a2:	e016      	b.n	80051d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	2300      	movs	r3, #0
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	2100      	movs	r1, #0
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff fd60 	bl	8004c74 <xTimerGenericCommand>
 80051b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	603b      	str	r3, [r7, #0]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051d2:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1b1      	bne.n	8005140 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <prvSwitchTimerLists+0xc4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a04      	ldr	r2, [pc, #16]	; (80051f8 <prvSwitchTimerLists+0xc0>)
 80051e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051ea:	4a04      	ldr	r2, [pc, #16]	; (80051fc <prvSwitchTimerLists+0xc4>)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	6013      	str	r3, [r2, #0]
}
 80051f0:	bf00      	nop
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000de8 	.word	0x20000de8
 80051fc:	20000dec 	.word	0x20000dec

08005200 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005206:	f000 f965 	bl	80054d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800520a:	4b15      	ldr	r3, [pc, #84]	; (8005260 <prvCheckForValidListAndQueue+0x60>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d120      	bne.n	8005254 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005212:	4814      	ldr	r0, [pc, #80]	; (8005264 <prvCheckForValidListAndQueue+0x64>)
 8005214:	f7fd fcfc 	bl	8002c10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005218:	4813      	ldr	r0, [pc, #76]	; (8005268 <prvCheckForValidListAndQueue+0x68>)
 800521a:	f7fd fcf9 	bl	8002c10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800521e:	4b13      	ldr	r3, [pc, #76]	; (800526c <prvCheckForValidListAndQueue+0x6c>)
 8005220:	4a10      	ldr	r2, [pc, #64]	; (8005264 <prvCheckForValidListAndQueue+0x64>)
 8005222:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005224:	4b12      	ldr	r3, [pc, #72]	; (8005270 <prvCheckForValidListAndQueue+0x70>)
 8005226:	4a10      	ldr	r2, [pc, #64]	; (8005268 <prvCheckForValidListAndQueue+0x68>)
 8005228:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800522a:	2300      	movs	r3, #0
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <prvCheckForValidListAndQueue+0x74>)
 8005230:	4a11      	ldr	r2, [pc, #68]	; (8005278 <prvCheckForValidListAndQueue+0x78>)
 8005232:	2110      	movs	r1, #16
 8005234:	200a      	movs	r0, #10
 8005236:	f7fd fe07 	bl	8002e48 <xQueueGenericCreateStatic>
 800523a:	4603      	mov	r3, r0
 800523c:	4a08      	ldr	r2, [pc, #32]	; (8005260 <prvCheckForValidListAndQueue+0x60>)
 800523e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <prvCheckForValidListAndQueue+0x60>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <prvCheckForValidListAndQueue+0x60>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	490b      	ldr	r1, [pc, #44]	; (800527c <prvCheckForValidListAndQueue+0x7c>)
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fc34 	bl	8003abc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005254:	f000 f96e 	bl	8005534 <vPortExitCritical>
}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000df0 	.word	0x20000df0
 8005264:	20000dc0 	.word	0x20000dc0
 8005268:	20000dd4 	.word	0x20000dd4
 800526c:	20000de8 	.word	0x20000de8
 8005270:	20000dec 	.word	0x20000dec
 8005274:	20000e9c 	.word	0x20000e9c
 8005278:	20000dfc 	.word	0x20000dfc
 800527c:	08006558 	.word	0x08006558

08005280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3b04      	subs	r3, #4
 8005290:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3b04      	subs	r3, #4
 800529e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 0201 	bic.w	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b04      	subs	r3, #4
 80052ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052b0:	4a0c      	ldr	r2, [pc, #48]	; (80052e4 <pxPortInitialiseStack+0x64>)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3b14      	subs	r3, #20
 80052ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3b04      	subs	r3, #4
 80052c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f06f 0202 	mvn.w	r2, #2
 80052ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3b20      	subs	r3, #32
 80052d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052d6:	68fb      	ldr	r3, [r7, #12]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	080052e9 	.word	0x080052e9

080052e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <prvTaskExitError+0x54>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d00a      	beq.n	8005312 <prvTaskExitError+0x2a>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	60fb      	str	r3, [r7, #12]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <prvTaskExitError+0x28>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	60bb      	str	r3, [r7, #8]
}
 8005324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005326:	bf00      	nop
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0fc      	beq.n	8005328 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	2000000c 	.word	0x2000000c

08005340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <pxCurrentTCBConst2>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	f380 8809 	msr	PSP, r0
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8811 	msr	BASEPRI, r0
 800535a:	4770      	bx	lr
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst2>:
 8005360:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005368:	4808      	ldr	r0, [pc, #32]	; (800538c <prvPortStartFirstTask+0x24>)
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f380 8808 	msr	MSP, r0
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8814 	msr	CONTROL, r0
 800537a:	b662      	cpsie	i
 800537c:	b661      	cpsie	f
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	df00      	svc	0
 8005388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800538a:	bf00      	nop
 800538c:	e000ed08 	.word	0xe000ed08

08005390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005396:	4b46      	ldr	r3, [pc, #280]	; (80054b0 <xPortStartScheduler+0x120>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a46      	ldr	r2, [pc, #280]	; (80054b4 <xPortStartScheduler+0x124>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10a      	bne.n	80053b6 <xPortStartScheduler+0x26>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	613b      	str	r3, [r7, #16]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053b6:	4b3e      	ldr	r3, [pc, #248]	; (80054b0 <xPortStartScheduler+0x120>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <xPortStartScheduler+0x128>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10a      	bne.n	80053d6 <xPortStartScheduler+0x46>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60fb      	str	r3, [r7, #12]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053d6:	4b39      	ldr	r3, [pc, #228]	; (80054bc <xPortStartScheduler+0x12c>)
 80053d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	22ff      	movs	r2, #255	; 0xff
 80053e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4b31      	ldr	r3, [pc, #196]	; (80054c0 <xPortStartScheduler+0x130>)
 80053fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053fe:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <xPortStartScheduler+0x134>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005404:	e009      	b.n	800541a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005406:	4b2f      	ldr	r3, [pc, #188]	; (80054c4 <xPortStartScheduler+0x134>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3b01      	subs	r3, #1
 800540c:	4a2d      	ldr	r2, [pc, #180]	; (80054c4 <xPortStartScheduler+0x134>)
 800540e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d0ef      	beq.n	8005406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <xPortStartScheduler+0x134>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1c3 0307 	rsb	r3, r3, #7
 800542e:	2b04      	cmp	r3, #4
 8005430:	d00a      	beq.n	8005448 <xPortStartScheduler+0xb8>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60bb      	str	r3, [r7, #8]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005448:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <xPortStartScheduler+0x134>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <xPortStartScheduler+0x134>)
 8005450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005452:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <xPortStartScheduler+0x134>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <xPortStartScheduler+0x134>)
 800545c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005466:	4b18      	ldr	r3, [pc, #96]	; (80054c8 <xPortStartScheduler+0x138>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <xPortStartScheduler+0x138>)
 800546c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <xPortStartScheduler+0x138>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a14      	ldr	r2, [pc, #80]	; (80054c8 <xPortStartScheduler+0x138>)
 8005478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800547c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800547e:	f000 f8dd 	bl	800563c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <xPortStartScheduler+0x13c>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005488:	f000 f8fc 	bl	8005684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <xPortStartScheduler+0x140>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <xPortStartScheduler+0x140>)
 8005492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005498:	f7ff ff66 	bl	8005368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800549c:	f7fe ff3e 	bl	800431c <vTaskSwitchContext>
	prvTaskExitError();
 80054a0:	f7ff ff22 	bl	80052e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	e000ed00 	.word	0xe000ed00
 80054b4:	410fc271 	.word	0x410fc271
 80054b8:	410fc270 	.word	0x410fc270
 80054bc:	e000e400 	.word	0xe000e400
 80054c0:	20000eec 	.word	0x20000eec
 80054c4:	20000ef0 	.word	0x20000ef0
 80054c8:	e000ed20 	.word	0xe000ed20
 80054cc:	2000000c 	.word	0x2000000c
 80054d0:	e000ef34 	.word	0xe000ef34

080054d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	607b      	str	r3, [r7, #4]
}
 80054ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054ee:	4b0f      	ldr	r3, [pc, #60]	; (800552c <vPortEnterCritical+0x58>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a0d      	ldr	r2, [pc, #52]	; (800552c <vPortEnterCritical+0x58>)
 80054f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <vPortEnterCritical+0x58>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10f      	bne.n	8005520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <vPortEnterCritical+0x5c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <vPortEnterCritical+0x4c>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	603b      	str	r3, [r7, #0]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <vPortEnterCritical+0x4a>
	}
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	2000000c 	.word	0x2000000c
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <vPortExitCritical+0x50>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <vPortExitCritical+0x24>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	607b      	str	r3, [r7, #4]
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <vPortExitCritical+0x50>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3b01      	subs	r3, #1
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <vPortExitCritical+0x50>)
 8005560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <vPortExitCritical+0x50>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d105      	bne.n	8005576 <vPortExitCritical+0x42>
 800556a:	2300      	movs	r3, #0
 800556c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f383 8811 	msr	BASEPRI, r3
}
 8005574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	2000000c 	.word	0x2000000c
	...

08005590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005590:	f3ef 8009 	mrs	r0, PSP
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <pxCurrentTCBConst>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	f01e 0f10 	tst.w	lr, #16
 80055a0:	bf08      	it	eq
 80055a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	6010      	str	r0, [r2, #0]
 80055ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055b4:	f380 8811 	msr	BASEPRI, r0
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f7fe feac 	bl	800431c <vTaskSwitchContext>
 80055c4:	f04f 0000 	mov.w	r0, #0
 80055c8:	f380 8811 	msr	BASEPRI, r0
 80055cc:	bc09      	pop	{r0, r3}
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	6808      	ldr	r0, [r1, #0]
 80055d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d6:	f01e 0f10 	tst.w	lr, #16
 80055da:	bf08      	it	eq
 80055dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055e0:	f380 8809 	msr	PSP, r0
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	f3af 8000 	nop.w

080055f0 <pxCurrentTCBConst>:
 80055f0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop

080055f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	607b      	str	r3, [r7, #4]
}
 8005610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005612:	f7fe fdc9 	bl	80041a8 <xTaskIncrementTick>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <xPortSysTickHandler+0x40>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <vPortSetupTimerInterrupt+0x38>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <vPortSetupTimerInterrupt+0x3c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0a      	ldr	r2, [pc, #40]	; (800567c <vPortSetupTimerInterrupt+0x40>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	4a09      	ldr	r2, [pc, #36]	; (8005680 <vPortSetupTimerInterrupt+0x44>)
 800565a:	3b01      	subs	r3, #1
 800565c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800565e:	4b04      	ldr	r3, [pc, #16]	; (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005660:	2207      	movs	r2, #7
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000e010 	.word	0xe000e010
 8005674:	e000e018 	.word	0xe000e018
 8005678:	20000000 	.word	0x20000000
 800567c:	10624dd3 	.word	0x10624dd3
 8005680:	e000e014 	.word	0xe000e014

08005684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005694 <vPortEnableVFP+0x10>
 8005688:	6801      	ldr	r1, [r0, #0]
 800568a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800568e:	6001      	str	r1, [r0, #0]
 8005690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005692:	bf00      	nop
 8005694:	e000ed88 	.word	0xe000ed88

08005698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800569e:	f3ef 8305 	mrs	r3, IPSR
 80056a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b0f      	cmp	r3, #15
 80056a8:	d914      	bls.n	80056d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <vPortValidateInterruptPriority+0x70>)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056b4:	4b15      	ldr	r3, [pc, #84]	; (800570c <vPortValidateInterruptPriority+0x74>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	7afa      	ldrb	r2, [r7, #11]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d20a      	bcs.n	80056d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	607b      	str	r3, [r7, #4]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056d4:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <vPortValidateInterruptPriority+0x78>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <vPortValidateInterruptPriority+0x7c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d90a      	bls.n	80056fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	603b      	str	r3, [r7, #0]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <vPortValidateInterruptPriority+0x60>
	}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	e000e3f0 	.word	0xe000e3f0
 800570c:	20000eec 	.word	0x20000eec
 8005710:	e000ed0c 	.word	0xe000ed0c
 8005714:	20000ef0 	.word	0x20000ef0

08005718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005724:	f7fe fc84 	bl	8004030 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005728:	4b5b      	ldr	r3, [pc, #364]	; (8005898 <pvPortMalloc+0x180>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005730:	f000 f920 	bl	8005974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005734:	4b59      	ldr	r3, [pc, #356]	; (800589c <pvPortMalloc+0x184>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	f040 8093 	bne.w	8005868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01d      	beq.n	8005784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005748:	2208      	movs	r2, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	2b00      	cmp	r3, #0
 8005758:	d014      	beq.n	8005784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f023 0307 	bic.w	r3, r3, #7
 8005760:	3308      	adds	r3, #8
 8005762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <pvPortMalloc+0x6c>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	617b      	str	r3, [r7, #20]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d06e      	beq.n	8005868 <pvPortMalloc+0x150>
 800578a:	4b45      	ldr	r3, [pc, #276]	; (80058a0 <pvPortMalloc+0x188>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d869      	bhi.n	8005868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005794:	4b43      	ldr	r3, [pc, #268]	; (80058a4 <pvPortMalloc+0x18c>)
 8005796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005798:	4b42      	ldr	r3, [pc, #264]	; (80058a4 <pvPortMalloc+0x18c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800579e:	e004      	b.n	80057aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d903      	bls.n	80057bc <pvPortMalloc+0xa4>
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f1      	bne.n	80057a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057bc:	4b36      	ldr	r3, [pc, #216]	; (8005898 <pvPortMalloc+0x180>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d050      	beq.n	8005868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2208      	movs	r2, #8
 80057cc:	4413      	add	r3, r2
 80057ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	2308      	movs	r3, #8
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d91f      	bls.n	8005828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <pvPortMalloc+0xf8>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	613b      	str	r3, [r7, #16]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	1ad2      	subs	r2, r2, r3
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005822:	69b8      	ldr	r0, [r7, #24]
 8005824:	f000 f908 	bl	8005a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005828:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <pvPortMalloc+0x188>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <pvPortMalloc+0x188>)
 8005834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005836:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <pvPortMalloc+0x188>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <pvPortMalloc+0x190>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d203      	bcs.n	800584a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005842:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <pvPortMalloc+0x188>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <pvPortMalloc+0x190>)
 8005848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <pvPortMalloc+0x184>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	431a      	orrs	r2, r3
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <pvPortMalloc+0x194>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3301      	adds	r3, #1
 8005864:	4a11      	ldr	r2, [pc, #68]	; (80058ac <pvPortMalloc+0x194>)
 8005866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005868:	f7fe fbf0 	bl	800404c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <pvPortMalloc+0x174>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60fb      	str	r3, [r7, #12]
}
 8005888:	bf00      	nop
 800588a:	e7fe      	b.n	800588a <pvPortMalloc+0x172>
	return pvReturn;
 800588c:	69fb      	ldr	r3, [r7, #28]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3728      	adds	r7, #40	; 0x28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20004afc 	.word	0x20004afc
 800589c:	20004b10 	.word	0x20004b10
 80058a0:	20004b00 	.word	0x20004b00
 80058a4:	20004af4 	.word	0x20004af4
 80058a8:	20004b04 	.word	0x20004b04
 80058ac:	20004b08 	.word	0x20004b08

080058b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d04d      	beq.n	800595e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058c2:	2308      	movs	r3, #8
 80058c4:	425b      	negs	r3, r3
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4413      	add	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	4b24      	ldr	r3, [pc, #144]	; (8005968 <vPortFree+0xb8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <vPortFree+0x44>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	60fb      	str	r3, [r7, #12]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <vPortFree+0x62>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60bb      	str	r3, [r7, #8]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <vPortFree+0xb8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01e      	beq.n	800595e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d11a      	bne.n	800595e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <vPortFree+0xb8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	43db      	mvns	r3, r3
 8005932:	401a      	ands	r2, r3
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005938:	f7fe fb7a 	bl	8004030 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	4b0a      	ldr	r3, [pc, #40]	; (800596c <vPortFree+0xbc>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4413      	add	r3, r2
 8005946:	4a09      	ldr	r2, [pc, #36]	; (800596c <vPortFree+0xbc>)
 8005948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800594a:	6938      	ldr	r0, [r7, #16]
 800594c:	f000 f874 	bl	8005a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <vPortFree+0xc0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	4a06      	ldr	r2, [pc, #24]	; (8005970 <vPortFree+0xc0>)
 8005958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800595a:	f7fe fb77 	bl	800404c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20004b10 	.word	0x20004b10
 800596c:	20004b00 	.word	0x20004b00
 8005970:	20004b0c 	.word	0x20004b0c

08005974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800597a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800597e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005980:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <prvHeapInit+0xac>)
 8005982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3307      	adds	r3, #7
 8005992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0307 	bic.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <prvHeapInit+0xac>)
 80059a4:	4413      	add	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059ac:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <prvHeapInit+0xb0>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059b2:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <prvHeapInit+0xb0>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059c0:	2208      	movs	r2, #8
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <prvHeapInit+0xb4>)
 80059d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <prvHeapInit+0xb4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <prvHeapInit+0xb4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <prvHeapInit+0xb4>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <prvHeapInit+0xb8>)
 8005a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <prvHeapInit+0xbc>)
 8005a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <prvHeapInit+0xc0>)
 8005a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a12:	601a      	str	r2, [r3, #0]
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000ef4 	.word	0x20000ef4
 8005a24:	20004af4 	.word	0x20004af4
 8005a28:	20004afc 	.word	0x20004afc
 8005a2c:	20004b04 	.word	0x20004b04
 8005a30:	20004b00 	.word	0x20004b00
 8005a34:	20004b10 	.word	0x20004b10

08005a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a40:	4b28      	ldr	r3, [pc, #160]	; (8005ae4 <prvInsertBlockIntoFreeList+0xac>)
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e002      	b.n	8005a4c <prvInsertBlockIntoFreeList+0x14>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d8f7      	bhi.n	8005a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4413      	add	r3, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d108      	bne.n	8005a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	441a      	add	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d118      	bne.n	8005ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d00d      	beq.n	8005ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e008      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e003      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d002      	beq.n	8005ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20004af4 	.word	0x20004af4
 8005ae8:	20004afc 	.word	0x20004afc

08005aec <std>:
 8005aec:	2300      	movs	r3, #0
 8005aee:	b510      	push	{r4, lr}
 8005af0:	4604      	mov	r4, r0
 8005af2:	e9c0 3300 	strd	r3, r3, [r0]
 8005af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005afa:	6083      	str	r3, [r0, #8]
 8005afc:	8181      	strh	r1, [r0, #12]
 8005afe:	6643      	str	r3, [r0, #100]	; 0x64
 8005b00:	81c2      	strh	r2, [r0, #14]
 8005b02:	6183      	str	r3, [r0, #24]
 8005b04:	4619      	mov	r1, r3
 8005b06:	2208      	movs	r2, #8
 8005b08:	305c      	adds	r0, #92	; 0x5c
 8005b0a:	f000 f9e5 	bl	8005ed8 <memset>
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <std+0x58>)
 8005b10:	6263      	str	r3, [r4, #36]	; 0x24
 8005b12:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <std+0x5c>)
 8005b14:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <std+0x60>)
 8005b18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <std+0x64>)
 8005b1c:	6323      	str	r3, [r4, #48]	; 0x30
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <std+0x68>)
 8005b20:	6224      	str	r4, [r4, #32]
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d006      	beq.n	8005b34 <std+0x48>
 8005b26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b2a:	4294      	cmp	r4, r2
 8005b2c:	d002      	beq.n	8005b34 <std+0x48>
 8005b2e:	33d0      	adds	r3, #208	; 0xd0
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d105      	bne.n	8005b40 <std+0x54>
 8005b34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b3c:	f000 ba9a 	b.w	8006074 <__retarget_lock_init_recursive>
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	bf00      	nop
 8005b44:	08005d29 	.word	0x08005d29
 8005b48:	08005d4b 	.word	0x08005d4b
 8005b4c:	08005d83 	.word	0x08005d83
 8005b50:	08005da7 	.word	0x08005da7
 8005b54:	20004b14 	.word	0x20004b14

08005b58 <stdio_exit_handler>:
 8005b58:	4a02      	ldr	r2, [pc, #8]	; (8005b64 <stdio_exit_handler+0xc>)
 8005b5a:	4903      	ldr	r1, [pc, #12]	; (8005b68 <stdio_exit_handler+0x10>)
 8005b5c:	4803      	ldr	r0, [pc, #12]	; (8005b6c <stdio_exit_handler+0x14>)
 8005b5e:	f000 b869 	b.w	8005c34 <_fwalk_sglue>
 8005b62:	bf00      	nop
 8005b64:	20000010 	.word	0x20000010
 8005b68:	08006395 	.word	0x08006395
 8005b6c:	2000001c 	.word	0x2000001c

08005b70 <cleanup_stdio>:
 8005b70:	6841      	ldr	r1, [r0, #4]
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <cleanup_stdio+0x34>)
 8005b74:	4299      	cmp	r1, r3
 8005b76:	b510      	push	{r4, lr}
 8005b78:	4604      	mov	r4, r0
 8005b7a:	d001      	beq.n	8005b80 <cleanup_stdio+0x10>
 8005b7c:	f000 fc0a 	bl	8006394 <_fflush_r>
 8005b80:	68a1      	ldr	r1, [r4, #8]
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <cleanup_stdio+0x38>)
 8005b84:	4299      	cmp	r1, r3
 8005b86:	d002      	beq.n	8005b8e <cleanup_stdio+0x1e>
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 fc03 	bl	8006394 <_fflush_r>
 8005b8e:	68e1      	ldr	r1, [r4, #12]
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <cleanup_stdio+0x3c>)
 8005b92:	4299      	cmp	r1, r3
 8005b94:	d004      	beq.n	8005ba0 <cleanup_stdio+0x30>
 8005b96:	4620      	mov	r0, r4
 8005b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b9c:	f000 bbfa 	b.w	8006394 <_fflush_r>
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20004b14 	.word	0x20004b14
 8005ba8:	20004b7c 	.word	0x20004b7c
 8005bac:	20004be4 	.word	0x20004be4

08005bb0 <global_stdio_init.part.0>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <global_stdio_init.part.0+0x30>)
 8005bb4:	4c0b      	ldr	r4, [pc, #44]	; (8005be4 <global_stdio_init.part.0+0x34>)
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <global_stdio_init.part.0+0x38>)
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	4620      	mov	r0, r4
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2104      	movs	r1, #4
 8005bc0:	f7ff ff94 	bl	8005aec <std>
 8005bc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005bc8:	2201      	movs	r2, #1
 8005bca:	2109      	movs	r1, #9
 8005bcc:	f7ff ff8e 	bl	8005aec <std>
 8005bd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bda:	2112      	movs	r1, #18
 8005bdc:	f7ff bf86 	b.w	8005aec <std>
 8005be0:	20004c4c 	.word	0x20004c4c
 8005be4:	20004b14 	.word	0x20004b14
 8005be8:	08005b59 	.word	0x08005b59

08005bec <__sfp_lock_acquire>:
 8005bec:	4801      	ldr	r0, [pc, #4]	; (8005bf4 <__sfp_lock_acquire+0x8>)
 8005bee:	f000 ba42 	b.w	8006076 <__retarget_lock_acquire_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	20004c55 	.word	0x20004c55

08005bf8 <__sfp_lock_release>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	; (8005c00 <__sfp_lock_release+0x8>)
 8005bfa:	f000 ba3d 	b.w	8006078 <__retarget_lock_release_recursive>
 8005bfe:	bf00      	nop
 8005c00:	20004c55 	.word	0x20004c55

08005c04 <__sinit>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4604      	mov	r4, r0
 8005c08:	f7ff fff0 	bl	8005bec <__sfp_lock_acquire>
 8005c0c:	6a23      	ldr	r3, [r4, #32]
 8005c0e:	b11b      	cbz	r3, 8005c18 <__sinit+0x14>
 8005c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c14:	f7ff bff0 	b.w	8005bf8 <__sfp_lock_release>
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <__sinit+0x28>)
 8005c1a:	6223      	str	r3, [r4, #32]
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <__sinit+0x2c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f5      	bne.n	8005c10 <__sinit+0xc>
 8005c24:	f7ff ffc4 	bl	8005bb0 <global_stdio_init.part.0>
 8005c28:	e7f2      	b.n	8005c10 <__sinit+0xc>
 8005c2a:	bf00      	nop
 8005c2c:	08005b71 	.word	0x08005b71
 8005c30:	20004c4c 	.word	0x20004c4c

08005c34 <_fwalk_sglue>:
 8005c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c38:	4607      	mov	r7, r0
 8005c3a:	4688      	mov	r8, r1
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	2600      	movs	r6, #0
 8005c40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c44:	f1b9 0901 	subs.w	r9, r9, #1
 8005c48:	d505      	bpl.n	8005c56 <_fwalk_sglue+0x22>
 8005c4a:	6824      	ldr	r4, [r4, #0]
 8005c4c:	2c00      	cmp	r4, #0
 8005c4e:	d1f7      	bne.n	8005c40 <_fwalk_sglue+0xc>
 8005c50:	4630      	mov	r0, r6
 8005c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c56:	89ab      	ldrh	r3, [r5, #12]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d907      	bls.n	8005c6c <_fwalk_sglue+0x38>
 8005c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c60:	3301      	adds	r3, #1
 8005c62:	d003      	beq.n	8005c6c <_fwalk_sglue+0x38>
 8005c64:	4629      	mov	r1, r5
 8005c66:	4638      	mov	r0, r7
 8005c68:	47c0      	blx	r8
 8005c6a:	4306      	orrs	r6, r0
 8005c6c:	3568      	adds	r5, #104	; 0x68
 8005c6e:	e7e9      	b.n	8005c44 <_fwalk_sglue+0x10>

08005c70 <_puts_r>:
 8005c70:	6a03      	ldr	r3, [r0, #32]
 8005c72:	b570      	push	{r4, r5, r6, lr}
 8005c74:	6884      	ldr	r4, [r0, #8]
 8005c76:	4605      	mov	r5, r0
 8005c78:	460e      	mov	r6, r1
 8005c7a:	b90b      	cbnz	r3, 8005c80 <_puts_r+0x10>
 8005c7c:	f7ff ffc2 	bl	8005c04 <__sinit>
 8005c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c82:	07db      	lsls	r3, r3, #31
 8005c84:	d405      	bmi.n	8005c92 <_puts_r+0x22>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	0598      	lsls	r0, r3, #22
 8005c8a:	d402      	bmi.n	8005c92 <_puts_r+0x22>
 8005c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c8e:	f000 f9f2 	bl	8006076 <__retarget_lock_acquire_recursive>
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	0719      	lsls	r1, r3, #28
 8005c96:	d513      	bpl.n	8005cc0 <_puts_r+0x50>
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	b18b      	cbz	r3, 8005cc0 <_puts_r+0x50>
 8005c9c:	3e01      	subs	r6, #1
 8005c9e:	68a3      	ldr	r3, [r4, #8]
 8005ca0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	60a3      	str	r3, [r4, #8]
 8005ca8:	b9e9      	cbnz	r1, 8005ce6 <_puts_r+0x76>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da2e      	bge.n	8005d0c <_puts_r+0x9c>
 8005cae:	4622      	mov	r2, r4
 8005cb0:	210a      	movs	r1, #10
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f000 f87b 	bl	8005dae <__swbuf_r>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d007      	beq.n	8005ccc <_puts_r+0x5c>
 8005cbc:	250a      	movs	r5, #10
 8005cbe:	e007      	b.n	8005cd0 <_puts_r+0x60>
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 f8b0 	bl	8005e28 <__swsetup_r>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d0e7      	beq.n	8005c9c <_puts_r+0x2c>
 8005ccc:	f04f 35ff 	mov.w	r5, #4294967295
 8005cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cd2:	07da      	lsls	r2, r3, #31
 8005cd4:	d405      	bmi.n	8005ce2 <_puts_r+0x72>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	059b      	lsls	r3, r3, #22
 8005cda:	d402      	bmi.n	8005ce2 <_puts_r+0x72>
 8005cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cde:	f000 f9cb 	bl	8006078 <__retarget_lock_release_recursive>
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	bd70      	pop	{r4, r5, r6, pc}
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	da04      	bge.n	8005cf4 <_puts_r+0x84>
 8005cea:	69a2      	ldr	r2, [r4, #24]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	dc06      	bgt.n	8005cfe <_puts_r+0x8e>
 8005cf0:	290a      	cmp	r1, #10
 8005cf2:	d004      	beq.n	8005cfe <_puts_r+0x8e>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	6022      	str	r2, [r4, #0]
 8005cfa:	7019      	strb	r1, [r3, #0]
 8005cfc:	e7cf      	b.n	8005c9e <_puts_r+0x2e>
 8005cfe:	4622      	mov	r2, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 f854 	bl	8005dae <__swbuf_r>
 8005d06:	3001      	adds	r0, #1
 8005d08:	d1c9      	bne.n	8005c9e <_puts_r+0x2e>
 8005d0a:	e7df      	b.n	8005ccc <_puts_r+0x5c>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	250a      	movs	r5, #10
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	6022      	str	r2, [r4, #0]
 8005d14:	701d      	strb	r5, [r3, #0]
 8005d16:	e7db      	b.n	8005cd0 <_puts_r+0x60>

08005d18 <puts>:
 8005d18:	4b02      	ldr	r3, [pc, #8]	; (8005d24 <puts+0xc>)
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	f7ff bfa7 	b.w	8005c70 <_puts_r>
 8005d22:	bf00      	nop
 8005d24:	20000068 	.word	0x20000068

08005d28 <__sread>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d30:	f000 f952 	bl	8005fd8 <_read_r>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	bfab      	itete	ge
 8005d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d3c:	181b      	addge	r3, r3, r0
 8005d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d42:	bfac      	ite	ge
 8005d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d46:	81a3      	strhlt	r3, [r4, #12]
 8005d48:	bd10      	pop	{r4, pc}

08005d4a <__swrite>:
 8005d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4e:	461f      	mov	r7, r3
 8005d50:	898b      	ldrh	r3, [r1, #12]
 8005d52:	05db      	lsls	r3, r3, #23
 8005d54:	4605      	mov	r5, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	4616      	mov	r6, r2
 8005d5a:	d505      	bpl.n	8005d68 <__swrite+0x1e>
 8005d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d60:	2302      	movs	r3, #2
 8005d62:	2200      	movs	r2, #0
 8005d64:	f000 f926 	bl	8005fb4 <_lseek_r>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	4632      	mov	r2, r6
 8005d76:	463b      	mov	r3, r7
 8005d78:	4628      	mov	r0, r5
 8005d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7e:	f000 b93d 	b.w	8005ffc <_write_r>

08005d82 <__sseek>:
 8005d82:	b510      	push	{r4, lr}
 8005d84:	460c      	mov	r4, r1
 8005d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8a:	f000 f913 	bl	8005fb4 <_lseek_r>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	bf15      	itete	ne
 8005d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d9e:	81a3      	strheq	r3, [r4, #12]
 8005da0:	bf18      	it	ne
 8005da2:	81a3      	strhne	r3, [r4, #12]
 8005da4:	bd10      	pop	{r4, pc}

08005da6 <__sclose>:
 8005da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005daa:	f000 b89d 	b.w	8005ee8 <_close_r>

08005dae <__swbuf_r>:
 8005dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db0:	460e      	mov	r6, r1
 8005db2:	4614      	mov	r4, r2
 8005db4:	4605      	mov	r5, r0
 8005db6:	b118      	cbz	r0, 8005dc0 <__swbuf_r+0x12>
 8005db8:	6a03      	ldr	r3, [r0, #32]
 8005dba:	b90b      	cbnz	r3, 8005dc0 <__swbuf_r+0x12>
 8005dbc:	f7ff ff22 	bl	8005c04 <__sinit>
 8005dc0:	69a3      	ldr	r3, [r4, #24]
 8005dc2:	60a3      	str	r3, [r4, #8]
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	071a      	lsls	r2, r3, #28
 8005dc8:	d525      	bpl.n	8005e16 <__swbuf_r+0x68>
 8005dca:	6923      	ldr	r3, [r4, #16]
 8005dcc:	b31b      	cbz	r3, 8005e16 <__swbuf_r+0x68>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	6922      	ldr	r2, [r4, #16]
 8005dd2:	1a98      	subs	r0, r3, r2
 8005dd4:	6963      	ldr	r3, [r4, #20]
 8005dd6:	b2f6      	uxtb	r6, r6
 8005dd8:	4283      	cmp	r3, r0
 8005dda:	4637      	mov	r7, r6
 8005ddc:	dc04      	bgt.n	8005de8 <__swbuf_r+0x3a>
 8005dde:	4621      	mov	r1, r4
 8005de0:	4628      	mov	r0, r5
 8005de2:	f000 fad7 	bl	8006394 <_fflush_r>
 8005de6:	b9e0      	cbnz	r0, 8005e22 <__swbuf_r+0x74>
 8005de8:	68a3      	ldr	r3, [r4, #8]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	60a3      	str	r3, [r4, #8]
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	6022      	str	r2, [r4, #0]
 8005df4:	701e      	strb	r6, [r3, #0]
 8005df6:	6962      	ldr	r2, [r4, #20]
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d004      	beq.n	8005e08 <__swbuf_r+0x5a>
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	07db      	lsls	r3, r3, #31
 8005e02:	d506      	bpl.n	8005e12 <__swbuf_r+0x64>
 8005e04:	2e0a      	cmp	r6, #10
 8005e06:	d104      	bne.n	8005e12 <__swbuf_r+0x64>
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f000 fac2 	bl	8006394 <_fflush_r>
 8005e10:	b938      	cbnz	r0, 8005e22 <__swbuf_r+0x74>
 8005e12:	4638      	mov	r0, r7
 8005e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e16:	4621      	mov	r1, r4
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 f805 	bl	8005e28 <__swsetup_r>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d0d5      	beq.n	8005dce <__swbuf_r+0x20>
 8005e22:	f04f 37ff 	mov.w	r7, #4294967295
 8005e26:	e7f4      	b.n	8005e12 <__swbuf_r+0x64>

08005e28 <__swsetup_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4b2a      	ldr	r3, [pc, #168]	; (8005ed4 <__swsetup_r+0xac>)
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	460c      	mov	r4, r1
 8005e32:	b118      	cbz	r0, 8005e3c <__swsetup_r+0x14>
 8005e34:	6a03      	ldr	r3, [r0, #32]
 8005e36:	b90b      	cbnz	r3, 8005e3c <__swsetup_r+0x14>
 8005e38:	f7ff fee4 	bl	8005c04 <__sinit>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e42:	0718      	lsls	r0, r3, #28
 8005e44:	d422      	bmi.n	8005e8c <__swsetup_r+0x64>
 8005e46:	06d9      	lsls	r1, r3, #27
 8005e48:	d407      	bmi.n	8005e5a <__swsetup_r+0x32>
 8005e4a:	2309      	movs	r3, #9
 8005e4c:	602b      	str	r3, [r5, #0]
 8005e4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e52:	81a3      	strh	r3, [r4, #12]
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	e034      	b.n	8005ec4 <__swsetup_r+0x9c>
 8005e5a:	0758      	lsls	r0, r3, #29
 8005e5c:	d512      	bpl.n	8005e84 <__swsetup_r+0x5c>
 8005e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e60:	b141      	cbz	r1, 8005e74 <__swsetup_r+0x4c>
 8005e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e66:	4299      	cmp	r1, r3
 8005e68:	d002      	beq.n	8005e70 <__swsetup_r+0x48>
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 f914 	bl	8006098 <_free_r>
 8005e70:	2300      	movs	r3, #0
 8005e72:	6363      	str	r3, [r4, #52]	; 0x34
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	6063      	str	r3, [r4, #4]
 8005e80:	6923      	ldr	r3, [r4, #16]
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	f043 0308 	orr.w	r3, r3, #8
 8005e8a:	81a3      	strh	r3, [r4, #12]
 8005e8c:	6923      	ldr	r3, [r4, #16]
 8005e8e:	b94b      	cbnz	r3, 8005ea4 <__swsetup_r+0x7c>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e9a:	d003      	beq.n	8005ea4 <__swsetup_r+0x7c>
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 fac6 	bl	8006430 <__smakebuf_r>
 8005ea4:	89a0      	ldrh	r0, [r4, #12]
 8005ea6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eaa:	f010 0301 	ands.w	r3, r0, #1
 8005eae:	d00a      	beq.n	8005ec6 <__swsetup_r+0x9e>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60a3      	str	r3, [r4, #8]
 8005eb4:	6963      	ldr	r3, [r4, #20]
 8005eb6:	425b      	negs	r3, r3
 8005eb8:	61a3      	str	r3, [r4, #24]
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	b943      	cbnz	r3, 8005ed0 <__swsetup_r+0xa8>
 8005ebe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ec2:	d1c4      	bne.n	8005e4e <__swsetup_r+0x26>
 8005ec4:	bd38      	pop	{r3, r4, r5, pc}
 8005ec6:	0781      	lsls	r1, r0, #30
 8005ec8:	bf58      	it	pl
 8005eca:	6963      	ldrpl	r3, [r4, #20]
 8005ecc:	60a3      	str	r3, [r4, #8]
 8005ece:	e7f4      	b.n	8005eba <__swsetup_r+0x92>
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	e7f7      	b.n	8005ec4 <__swsetup_r+0x9c>
 8005ed4:	20000068 	.word	0x20000068

08005ed8 <memset>:
 8005ed8:	4402      	add	r2, r0
 8005eda:	4603      	mov	r3, r0
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d100      	bne.n	8005ee2 <memset+0xa>
 8005ee0:	4770      	bx	lr
 8005ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ee6:	e7f9      	b.n	8005edc <memset+0x4>

08005ee8 <_close_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4d06      	ldr	r5, [pc, #24]	; (8005f04 <_close_r+0x1c>)
 8005eec:	2300      	movs	r3, #0
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4608      	mov	r0, r1
 8005ef2:	602b      	str	r3, [r5, #0]
 8005ef4:	f7fa fd91 	bl	8000a1a <_close>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d102      	bne.n	8005f02 <_close_r+0x1a>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	b103      	cbz	r3, 8005f02 <_close_r+0x1a>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	20004c50 	.word	0x20004c50

08005f08 <_reclaim_reent>:
 8005f08:	4b29      	ldr	r3, [pc, #164]	; (8005fb0 <_reclaim_reent+0xa8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4283      	cmp	r3, r0
 8005f0e:	b570      	push	{r4, r5, r6, lr}
 8005f10:	4604      	mov	r4, r0
 8005f12:	d04b      	beq.n	8005fac <_reclaim_reent+0xa4>
 8005f14:	69c3      	ldr	r3, [r0, #28]
 8005f16:	b143      	cbz	r3, 8005f2a <_reclaim_reent+0x22>
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d144      	bne.n	8005fa8 <_reclaim_reent+0xa0>
 8005f1e:	69e3      	ldr	r3, [r4, #28]
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	b111      	cbz	r1, 8005f2a <_reclaim_reent+0x22>
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 f8b7 	bl	8006098 <_free_r>
 8005f2a:	6961      	ldr	r1, [r4, #20]
 8005f2c:	b111      	cbz	r1, 8005f34 <_reclaim_reent+0x2c>
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f000 f8b2 	bl	8006098 <_free_r>
 8005f34:	69e1      	ldr	r1, [r4, #28]
 8005f36:	b111      	cbz	r1, 8005f3e <_reclaim_reent+0x36>
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 f8ad 	bl	8006098 <_free_r>
 8005f3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005f40:	b111      	cbz	r1, 8005f48 <_reclaim_reent+0x40>
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 f8a8 	bl	8006098 <_free_r>
 8005f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f4a:	b111      	cbz	r1, 8005f52 <_reclaim_reent+0x4a>
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 f8a3 	bl	8006098 <_free_r>
 8005f52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f54:	b111      	cbz	r1, 8005f5c <_reclaim_reent+0x54>
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 f89e 	bl	8006098 <_free_r>
 8005f5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f5e:	b111      	cbz	r1, 8005f66 <_reclaim_reent+0x5e>
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 f899 	bl	8006098 <_free_r>
 8005f66:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005f68:	b111      	cbz	r1, 8005f70 <_reclaim_reent+0x68>
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 f894 	bl	8006098 <_free_r>
 8005f70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f72:	b111      	cbz	r1, 8005f7a <_reclaim_reent+0x72>
 8005f74:	4620      	mov	r0, r4
 8005f76:	f000 f88f 	bl	8006098 <_free_r>
 8005f7a:	6a23      	ldr	r3, [r4, #32]
 8005f7c:	b1b3      	cbz	r3, 8005fac <_reclaim_reent+0xa4>
 8005f7e:	4620      	mov	r0, r4
 8005f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f84:	4718      	bx	r3
 8005f86:	5949      	ldr	r1, [r1, r5]
 8005f88:	b941      	cbnz	r1, 8005f9c <_reclaim_reent+0x94>
 8005f8a:	3504      	adds	r5, #4
 8005f8c:	69e3      	ldr	r3, [r4, #28]
 8005f8e:	2d80      	cmp	r5, #128	; 0x80
 8005f90:	68d9      	ldr	r1, [r3, #12]
 8005f92:	d1f8      	bne.n	8005f86 <_reclaim_reent+0x7e>
 8005f94:	4620      	mov	r0, r4
 8005f96:	f000 f87f 	bl	8006098 <_free_r>
 8005f9a:	e7c0      	b.n	8005f1e <_reclaim_reent+0x16>
 8005f9c:	680e      	ldr	r6, [r1, #0]
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 f87a 	bl	8006098 <_free_r>
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	e7ef      	b.n	8005f88 <_reclaim_reent+0x80>
 8005fa8:	2500      	movs	r5, #0
 8005faa:	e7ef      	b.n	8005f8c <_reclaim_reent+0x84>
 8005fac:	bd70      	pop	{r4, r5, r6, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000068 	.word	0x20000068

08005fb4 <_lseek_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4d07      	ldr	r5, [pc, #28]	; (8005fd4 <_lseek_r+0x20>)
 8005fb8:	4604      	mov	r4, r0
 8005fba:	4608      	mov	r0, r1
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	602a      	str	r2, [r5, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f7fa fd50 	bl	8000a68 <_lseek>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d102      	bne.n	8005fd2 <_lseek_r+0x1e>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	b103      	cbz	r3, 8005fd2 <_lseek_r+0x1e>
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	20004c50 	.word	0x20004c50

08005fd8 <_read_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4d07      	ldr	r5, [pc, #28]	; (8005ff8 <_read_r+0x20>)
 8005fdc:	4604      	mov	r4, r0
 8005fde:	4608      	mov	r0, r1
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	602a      	str	r2, [r5, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f7fa fcfa 	bl	80009e0 <_read>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_read_r+0x1e>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_read_r+0x1e>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	20004c50 	.word	0x20004c50

08005ffc <_write_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4d07      	ldr	r5, [pc, #28]	; (800601c <_write_r+0x20>)
 8006000:	4604      	mov	r4, r0
 8006002:	4608      	mov	r0, r1
 8006004:	4611      	mov	r1, r2
 8006006:	2200      	movs	r2, #0
 8006008:	602a      	str	r2, [r5, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	f7fa fa66 	bl	80004dc <_write>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d102      	bne.n	800601a <_write_r+0x1e>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b103      	cbz	r3, 800601a <_write_r+0x1e>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	20004c50 	.word	0x20004c50

08006020 <__errno>:
 8006020:	4b01      	ldr	r3, [pc, #4]	; (8006028 <__errno+0x8>)
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000068 	.word	0x20000068

0800602c <__libc_init_array>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	4d0d      	ldr	r5, [pc, #52]	; (8006064 <__libc_init_array+0x38>)
 8006030:	4c0d      	ldr	r4, [pc, #52]	; (8006068 <__libc_init_array+0x3c>)
 8006032:	1b64      	subs	r4, r4, r5
 8006034:	10a4      	asrs	r4, r4, #2
 8006036:	2600      	movs	r6, #0
 8006038:	42a6      	cmp	r6, r4
 800603a:	d109      	bne.n	8006050 <__libc_init_array+0x24>
 800603c:	4d0b      	ldr	r5, [pc, #44]	; (800606c <__libc_init_array+0x40>)
 800603e:	4c0c      	ldr	r4, [pc, #48]	; (8006070 <__libc_init_array+0x44>)
 8006040:	f000 fa64 	bl	800650c <_init>
 8006044:	1b64      	subs	r4, r4, r5
 8006046:	10a4      	asrs	r4, r4, #2
 8006048:	2600      	movs	r6, #0
 800604a:	42a6      	cmp	r6, r4
 800604c:	d105      	bne.n	800605a <__libc_init_array+0x2e>
 800604e:	bd70      	pop	{r4, r5, r6, pc}
 8006050:	f855 3b04 	ldr.w	r3, [r5], #4
 8006054:	4798      	blx	r3
 8006056:	3601      	adds	r6, #1
 8006058:	e7ee      	b.n	8006038 <__libc_init_array+0xc>
 800605a:	f855 3b04 	ldr.w	r3, [r5], #4
 800605e:	4798      	blx	r3
 8006060:	3601      	adds	r6, #1
 8006062:	e7f2      	b.n	800604a <__libc_init_array+0x1e>
 8006064:	080065d8 	.word	0x080065d8
 8006068:	080065d8 	.word	0x080065d8
 800606c:	080065d8 	.word	0x080065d8
 8006070:	080065dc 	.word	0x080065dc

08006074 <__retarget_lock_init_recursive>:
 8006074:	4770      	bx	lr

08006076 <__retarget_lock_acquire_recursive>:
 8006076:	4770      	bx	lr

08006078 <__retarget_lock_release_recursive>:
 8006078:	4770      	bx	lr

0800607a <memcpy>:
 800607a:	440a      	add	r2, r1
 800607c:	4291      	cmp	r1, r2
 800607e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006082:	d100      	bne.n	8006086 <memcpy+0xc>
 8006084:	4770      	bx	lr
 8006086:	b510      	push	{r4, lr}
 8006088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800608c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006090:	4291      	cmp	r1, r2
 8006092:	d1f9      	bne.n	8006088 <memcpy+0xe>
 8006094:	bd10      	pop	{r4, pc}
	...

08006098 <_free_r>:
 8006098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800609a:	2900      	cmp	r1, #0
 800609c:	d044      	beq.n	8006128 <_free_r+0x90>
 800609e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a2:	9001      	str	r0, [sp, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f1a1 0404 	sub.w	r4, r1, #4
 80060aa:	bfb8      	it	lt
 80060ac:	18e4      	addlt	r4, r4, r3
 80060ae:	f000 f8df 	bl	8006270 <__malloc_lock>
 80060b2:	4a1e      	ldr	r2, [pc, #120]	; (800612c <_free_r+0x94>)
 80060b4:	9801      	ldr	r0, [sp, #4]
 80060b6:	6813      	ldr	r3, [r2, #0]
 80060b8:	b933      	cbnz	r3, 80060c8 <_free_r+0x30>
 80060ba:	6063      	str	r3, [r4, #4]
 80060bc:	6014      	str	r4, [r2, #0]
 80060be:	b003      	add	sp, #12
 80060c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060c4:	f000 b8da 	b.w	800627c <__malloc_unlock>
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d908      	bls.n	80060de <_free_r+0x46>
 80060cc:	6825      	ldr	r5, [r4, #0]
 80060ce:	1961      	adds	r1, r4, r5
 80060d0:	428b      	cmp	r3, r1
 80060d2:	bf01      	itttt	eq
 80060d4:	6819      	ldreq	r1, [r3, #0]
 80060d6:	685b      	ldreq	r3, [r3, #4]
 80060d8:	1949      	addeq	r1, r1, r5
 80060da:	6021      	streq	r1, [r4, #0]
 80060dc:	e7ed      	b.n	80060ba <_free_r+0x22>
 80060de:	461a      	mov	r2, r3
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	b10b      	cbz	r3, 80060e8 <_free_r+0x50>
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	d9fa      	bls.n	80060de <_free_r+0x46>
 80060e8:	6811      	ldr	r1, [r2, #0]
 80060ea:	1855      	adds	r5, r2, r1
 80060ec:	42a5      	cmp	r5, r4
 80060ee:	d10b      	bne.n	8006108 <_free_r+0x70>
 80060f0:	6824      	ldr	r4, [r4, #0]
 80060f2:	4421      	add	r1, r4
 80060f4:	1854      	adds	r4, r2, r1
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	6011      	str	r1, [r2, #0]
 80060fa:	d1e0      	bne.n	80060be <_free_r+0x26>
 80060fc:	681c      	ldr	r4, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	6053      	str	r3, [r2, #4]
 8006102:	440c      	add	r4, r1
 8006104:	6014      	str	r4, [r2, #0]
 8006106:	e7da      	b.n	80060be <_free_r+0x26>
 8006108:	d902      	bls.n	8006110 <_free_r+0x78>
 800610a:	230c      	movs	r3, #12
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	e7d6      	b.n	80060be <_free_r+0x26>
 8006110:	6825      	ldr	r5, [r4, #0]
 8006112:	1961      	adds	r1, r4, r5
 8006114:	428b      	cmp	r3, r1
 8006116:	bf04      	itt	eq
 8006118:	6819      	ldreq	r1, [r3, #0]
 800611a:	685b      	ldreq	r3, [r3, #4]
 800611c:	6063      	str	r3, [r4, #4]
 800611e:	bf04      	itt	eq
 8006120:	1949      	addeq	r1, r1, r5
 8006122:	6021      	streq	r1, [r4, #0]
 8006124:	6054      	str	r4, [r2, #4]
 8006126:	e7ca      	b.n	80060be <_free_r+0x26>
 8006128:	b003      	add	sp, #12
 800612a:	bd30      	pop	{r4, r5, pc}
 800612c:	20004c58 	.word	0x20004c58

08006130 <sbrk_aligned>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	4e0e      	ldr	r6, [pc, #56]	; (800616c <sbrk_aligned+0x3c>)
 8006134:	460c      	mov	r4, r1
 8006136:	6831      	ldr	r1, [r6, #0]
 8006138:	4605      	mov	r5, r0
 800613a:	b911      	cbnz	r1, 8006142 <sbrk_aligned+0x12>
 800613c:	f000 f9d6 	bl	80064ec <_sbrk_r>
 8006140:	6030      	str	r0, [r6, #0]
 8006142:	4621      	mov	r1, r4
 8006144:	4628      	mov	r0, r5
 8006146:	f000 f9d1 	bl	80064ec <_sbrk_r>
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	d00a      	beq.n	8006164 <sbrk_aligned+0x34>
 800614e:	1cc4      	adds	r4, r0, #3
 8006150:	f024 0403 	bic.w	r4, r4, #3
 8006154:	42a0      	cmp	r0, r4
 8006156:	d007      	beq.n	8006168 <sbrk_aligned+0x38>
 8006158:	1a21      	subs	r1, r4, r0
 800615a:	4628      	mov	r0, r5
 800615c:	f000 f9c6 	bl	80064ec <_sbrk_r>
 8006160:	3001      	adds	r0, #1
 8006162:	d101      	bne.n	8006168 <sbrk_aligned+0x38>
 8006164:	f04f 34ff 	mov.w	r4, #4294967295
 8006168:	4620      	mov	r0, r4
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	20004c5c 	.word	0x20004c5c

08006170 <_malloc_r>:
 8006170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006174:	1ccd      	adds	r5, r1, #3
 8006176:	f025 0503 	bic.w	r5, r5, #3
 800617a:	3508      	adds	r5, #8
 800617c:	2d0c      	cmp	r5, #12
 800617e:	bf38      	it	cc
 8006180:	250c      	movcc	r5, #12
 8006182:	2d00      	cmp	r5, #0
 8006184:	4607      	mov	r7, r0
 8006186:	db01      	blt.n	800618c <_malloc_r+0x1c>
 8006188:	42a9      	cmp	r1, r5
 800618a:	d905      	bls.n	8006198 <_malloc_r+0x28>
 800618c:	230c      	movs	r3, #12
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	2600      	movs	r6, #0
 8006192:	4630      	mov	r0, r6
 8006194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006198:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800626c <_malloc_r+0xfc>
 800619c:	f000 f868 	bl	8006270 <__malloc_lock>
 80061a0:	f8d8 3000 	ldr.w	r3, [r8]
 80061a4:	461c      	mov	r4, r3
 80061a6:	bb5c      	cbnz	r4, 8006200 <_malloc_r+0x90>
 80061a8:	4629      	mov	r1, r5
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff ffc0 	bl	8006130 <sbrk_aligned>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	4604      	mov	r4, r0
 80061b4:	d155      	bne.n	8006262 <_malloc_r+0xf2>
 80061b6:	f8d8 4000 	ldr.w	r4, [r8]
 80061ba:	4626      	mov	r6, r4
 80061bc:	2e00      	cmp	r6, #0
 80061be:	d145      	bne.n	800624c <_malloc_r+0xdc>
 80061c0:	2c00      	cmp	r4, #0
 80061c2:	d048      	beq.n	8006256 <_malloc_r+0xe6>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	4631      	mov	r1, r6
 80061c8:	4638      	mov	r0, r7
 80061ca:	eb04 0903 	add.w	r9, r4, r3
 80061ce:	f000 f98d 	bl	80064ec <_sbrk_r>
 80061d2:	4581      	cmp	r9, r0
 80061d4:	d13f      	bne.n	8006256 <_malloc_r+0xe6>
 80061d6:	6821      	ldr	r1, [r4, #0]
 80061d8:	1a6d      	subs	r5, r5, r1
 80061da:	4629      	mov	r1, r5
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff ffa7 	bl	8006130 <sbrk_aligned>
 80061e2:	3001      	adds	r0, #1
 80061e4:	d037      	beq.n	8006256 <_malloc_r+0xe6>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	442b      	add	r3, r5
 80061ea:	6023      	str	r3, [r4, #0]
 80061ec:	f8d8 3000 	ldr.w	r3, [r8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d038      	beq.n	8006266 <_malloc_r+0xf6>
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	42a2      	cmp	r2, r4
 80061f8:	d12b      	bne.n	8006252 <_malloc_r+0xe2>
 80061fa:	2200      	movs	r2, #0
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	e00f      	b.n	8006220 <_malloc_r+0xb0>
 8006200:	6822      	ldr	r2, [r4, #0]
 8006202:	1b52      	subs	r2, r2, r5
 8006204:	d41f      	bmi.n	8006246 <_malloc_r+0xd6>
 8006206:	2a0b      	cmp	r2, #11
 8006208:	d917      	bls.n	800623a <_malloc_r+0xca>
 800620a:	1961      	adds	r1, r4, r5
 800620c:	42a3      	cmp	r3, r4
 800620e:	6025      	str	r5, [r4, #0]
 8006210:	bf18      	it	ne
 8006212:	6059      	strne	r1, [r3, #4]
 8006214:	6863      	ldr	r3, [r4, #4]
 8006216:	bf08      	it	eq
 8006218:	f8c8 1000 	streq.w	r1, [r8]
 800621c:	5162      	str	r2, [r4, r5]
 800621e:	604b      	str	r3, [r1, #4]
 8006220:	4638      	mov	r0, r7
 8006222:	f104 060b 	add.w	r6, r4, #11
 8006226:	f000 f829 	bl	800627c <__malloc_unlock>
 800622a:	f026 0607 	bic.w	r6, r6, #7
 800622e:	1d23      	adds	r3, r4, #4
 8006230:	1af2      	subs	r2, r6, r3
 8006232:	d0ae      	beq.n	8006192 <_malloc_r+0x22>
 8006234:	1b9b      	subs	r3, r3, r6
 8006236:	50a3      	str	r3, [r4, r2]
 8006238:	e7ab      	b.n	8006192 <_malloc_r+0x22>
 800623a:	42a3      	cmp	r3, r4
 800623c:	6862      	ldr	r2, [r4, #4]
 800623e:	d1dd      	bne.n	80061fc <_malloc_r+0x8c>
 8006240:	f8c8 2000 	str.w	r2, [r8]
 8006244:	e7ec      	b.n	8006220 <_malloc_r+0xb0>
 8006246:	4623      	mov	r3, r4
 8006248:	6864      	ldr	r4, [r4, #4]
 800624a:	e7ac      	b.n	80061a6 <_malloc_r+0x36>
 800624c:	4634      	mov	r4, r6
 800624e:	6876      	ldr	r6, [r6, #4]
 8006250:	e7b4      	b.n	80061bc <_malloc_r+0x4c>
 8006252:	4613      	mov	r3, r2
 8006254:	e7cc      	b.n	80061f0 <_malloc_r+0x80>
 8006256:	230c      	movs	r3, #12
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	4638      	mov	r0, r7
 800625c:	f000 f80e 	bl	800627c <__malloc_unlock>
 8006260:	e797      	b.n	8006192 <_malloc_r+0x22>
 8006262:	6025      	str	r5, [r4, #0]
 8006264:	e7dc      	b.n	8006220 <_malloc_r+0xb0>
 8006266:	605b      	str	r3, [r3, #4]
 8006268:	deff      	udf	#255	; 0xff
 800626a:	bf00      	nop
 800626c:	20004c58 	.word	0x20004c58

08006270 <__malloc_lock>:
 8006270:	4801      	ldr	r0, [pc, #4]	; (8006278 <__malloc_lock+0x8>)
 8006272:	f7ff bf00 	b.w	8006076 <__retarget_lock_acquire_recursive>
 8006276:	bf00      	nop
 8006278:	20004c54 	.word	0x20004c54

0800627c <__malloc_unlock>:
 800627c:	4801      	ldr	r0, [pc, #4]	; (8006284 <__malloc_unlock+0x8>)
 800627e:	f7ff befb 	b.w	8006078 <__retarget_lock_release_recursive>
 8006282:	bf00      	nop
 8006284:	20004c54 	.word	0x20004c54

08006288 <__sflush_r>:
 8006288:	898a      	ldrh	r2, [r1, #12]
 800628a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628e:	4605      	mov	r5, r0
 8006290:	0710      	lsls	r0, r2, #28
 8006292:	460c      	mov	r4, r1
 8006294:	d458      	bmi.n	8006348 <__sflush_r+0xc0>
 8006296:	684b      	ldr	r3, [r1, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	dc05      	bgt.n	80062a8 <__sflush_r+0x20>
 800629c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dc02      	bgt.n	80062a8 <__sflush_r+0x20>
 80062a2:	2000      	movs	r0, #0
 80062a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	d0f9      	beq.n	80062a2 <__sflush_r+0x1a>
 80062ae:	2300      	movs	r3, #0
 80062b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062b4:	682f      	ldr	r7, [r5, #0]
 80062b6:	6a21      	ldr	r1, [r4, #32]
 80062b8:	602b      	str	r3, [r5, #0]
 80062ba:	d032      	beq.n	8006322 <__sflush_r+0x9a>
 80062bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	075a      	lsls	r2, r3, #29
 80062c2:	d505      	bpl.n	80062d0 <__sflush_r+0x48>
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	1ac0      	subs	r0, r0, r3
 80062c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062ca:	b10b      	cbz	r3, 80062d0 <__sflush_r+0x48>
 80062cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062ce:	1ac0      	subs	r0, r0, r3
 80062d0:	2300      	movs	r3, #0
 80062d2:	4602      	mov	r2, r0
 80062d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062d6:	6a21      	ldr	r1, [r4, #32]
 80062d8:	4628      	mov	r0, r5
 80062da:	47b0      	blx	r6
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	d106      	bne.n	80062f0 <__sflush_r+0x68>
 80062e2:	6829      	ldr	r1, [r5, #0]
 80062e4:	291d      	cmp	r1, #29
 80062e6:	d82b      	bhi.n	8006340 <__sflush_r+0xb8>
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <__sflush_r+0x108>)
 80062ea:	410a      	asrs	r2, r1
 80062ec:	07d6      	lsls	r6, r2, #31
 80062ee:	d427      	bmi.n	8006340 <__sflush_r+0xb8>
 80062f0:	2200      	movs	r2, #0
 80062f2:	6062      	str	r2, [r4, #4]
 80062f4:	04d9      	lsls	r1, r3, #19
 80062f6:	6922      	ldr	r2, [r4, #16]
 80062f8:	6022      	str	r2, [r4, #0]
 80062fa:	d504      	bpl.n	8006306 <__sflush_r+0x7e>
 80062fc:	1c42      	adds	r2, r0, #1
 80062fe:	d101      	bne.n	8006304 <__sflush_r+0x7c>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	b903      	cbnz	r3, 8006306 <__sflush_r+0x7e>
 8006304:	6560      	str	r0, [r4, #84]	; 0x54
 8006306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006308:	602f      	str	r7, [r5, #0]
 800630a:	2900      	cmp	r1, #0
 800630c:	d0c9      	beq.n	80062a2 <__sflush_r+0x1a>
 800630e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006312:	4299      	cmp	r1, r3
 8006314:	d002      	beq.n	800631c <__sflush_r+0x94>
 8006316:	4628      	mov	r0, r5
 8006318:	f7ff febe 	bl	8006098 <_free_r>
 800631c:	2000      	movs	r0, #0
 800631e:	6360      	str	r0, [r4, #52]	; 0x34
 8006320:	e7c0      	b.n	80062a4 <__sflush_r+0x1c>
 8006322:	2301      	movs	r3, #1
 8006324:	4628      	mov	r0, r5
 8006326:	47b0      	blx	r6
 8006328:	1c41      	adds	r1, r0, #1
 800632a:	d1c8      	bne.n	80062be <__sflush_r+0x36>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0c5      	beq.n	80062be <__sflush_r+0x36>
 8006332:	2b1d      	cmp	r3, #29
 8006334:	d001      	beq.n	800633a <__sflush_r+0xb2>
 8006336:	2b16      	cmp	r3, #22
 8006338:	d101      	bne.n	800633e <__sflush_r+0xb6>
 800633a:	602f      	str	r7, [r5, #0]
 800633c:	e7b1      	b.n	80062a2 <__sflush_r+0x1a>
 800633e:	89a3      	ldrh	r3, [r4, #12]
 8006340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006344:	81a3      	strh	r3, [r4, #12]
 8006346:	e7ad      	b.n	80062a4 <__sflush_r+0x1c>
 8006348:	690f      	ldr	r7, [r1, #16]
 800634a:	2f00      	cmp	r7, #0
 800634c:	d0a9      	beq.n	80062a2 <__sflush_r+0x1a>
 800634e:	0793      	lsls	r3, r2, #30
 8006350:	680e      	ldr	r6, [r1, #0]
 8006352:	bf08      	it	eq
 8006354:	694b      	ldreq	r3, [r1, #20]
 8006356:	600f      	str	r7, [r1, #0]
 8006358:	bf18      	it	ne
 800635a:	2300      	movne	r3, #0
 800635c:	eba6 0807 	sub.w	r8, r6, r7
 8006360:	608b      	str	r3, [r1, #8]
 8006362:	f1b8 0f00 	cmp.w	r8, #0
 8006366:	dd9c      	ble.n	80062a2 <__sflush_r+0x1a>
 8006368:	6a21      	ldr	r1, [r4, #32]
 800636a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800636c:	4643      	mov	r3, r8
 800636e:	463a      	mov	r2, r7
 8006370:	4628      	mov	r0, r5
 8006372:	47b0      	blx	r6
 8006374:	2800      	cmp	r0, #0
 8006376:	dc06      	bgt.n	8006386 <__sflush_r+0xfe>
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800637e:	81a3      	strh	r3, [r4, #12]
 8006380:	f04f 30ff 	mov.w	r0, #4294967295
 8006384:	e78e      	b.n	80062a4 <__sflush_r+0x1c>
 8006386:	4407      	add	r7, r0
 8006388:	eba8 0800 	sub.w	r8, r8, r0
 800638c:	e7e9      	b.n	8006362 <__sflush_r+0xda>
 800638e:	bf00      	nop
 8006390:	dfbffffe 	.word	0xdfbffffe

08006394 <_fflush_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	4605      	mov	r5, r0
 800639a:	460c      	mov	r4, r1
 800639c:	b913      	cbnz	r3, 80063a4 <_fflush_r+0x10>
 800639e:	2500      	movs	r5, #0
 80063a0:	4628      	mov	r0, r5
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	b118      	cbz	r0, 80063ae <_fflush_r+0x1a>
 80063a6:	6a03      	ldr	r3, [r0, #32]
 80063a8:	b90b      	cbnz	r3, 80063ae <_fflush_r+0x1a>
 80063aa:	f7ff fc2b 	bl	8005c04 <__sinit>
 80063ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f3      	beq.n	800639e <_fflush_r+0xa>
 80063b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063b8:	07d0      	lsls	r0, r2, #31
 80063ba:	d404      	bmi.n	80063c6 <_fflush_r+0x32>
 80063bc:	0599      	lsls	r1, r3, #22
 80063be:	d402      	bmi.n	80063c6 <_fflush_r+0x32>
 80063c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063c2:	f7ff fe58 	bl	8006076 <__retarget_lock_acquire_recursive>
 80063c6:	4628      	mov	r0, r5
 80063c8:	4621      	mov	r1, r4
 80063ca:	f7ff ff5d 	bl	8006288 <__sflush_r>
 80063ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063d0:	07da      	lsls	r2, r3, #31
 80063d2:	4605      	mov	r5, r0
 80063d4:	d4e4      	bmi.n	80063a0 <_fflush_r+0xc>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	059b      	lsls	r3, r3, #22
 80063da:	d4e1      	bmi.n	80063a0 <_fflush_r+0xc>
 80063dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063de:	f7ff fe4b 	bl	8006078 <__retarget_lock_release_recursive>
 80063e2:	e7dd      	b.n	80063a0 <_fflush_r+0xc>

080063e4 <__swhatbuf_r>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	460c      	mov	r4, r1
 80063e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ec:	2900      	cmp	r1, #0
 80063ee:	b096      	sub	sp, #88	; 0x58
 80063f0:	4615      	mov	r5, r2
 80063f2:	461e      	mov	r6, r3
 80063f4:	da0d      	bge.n	8006412 <__swhatbuf_r+0x2e>
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063fc:	f04f 0100 	mov.w	r1, #0
 8006400:	bf0c      	ite	eq
 8006402:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006406:	2340      	movne	r3, #64	; 0x40
 8006408:	2000      	movs	r0, #0
 800640a:	6031      	str	r1, [r6, #0]
 800640c:	602b      	str	r3, [r5, #0]
 800640e:	b016      	add	sp, #88	; 0x58
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	466a      	mov	r2, sp
 8006414:	f000 f848 	bl	80064a8 <_fstat_r>
 8006418:	2800      	cmp	r0, #0
 800641a:	dbec      	blt.n	80063f6 <__swhatbuf_r+0x12>
 800641c:	9901      	ldr	r1, [sp, #4]
 800641e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006422:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006426:	4259      	negs	r1, r3
 8006428:	4159      	adcs	r1, r3
 800642a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800642e:	e7eb      	b.n	8006408 <__swhatbuf_r+0x24>

08006430 <__smakebuf_r>:
 8006430:	898b      	ldrh	r3, [r1, #12]
 8006432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006434:	079d      	lsls	r5, r3, #30
 8006436:	4606      	mov	r6, r0
 8006438:	460c      	mov	r4, r1
 800643a:	d507      	bpl.n	800644c <__smakebuf_r+0x1c>
 800643c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	2301      	movs	r3, #1
 8006446:	6163      	str	r3, [r4, #20]
 8006448:	b002      	add	sp, #8
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	ab01      	add	r3, sp, #4
 800644e:	466a      	mov	r2, sp
 8006450:	f7ff ffc8 	bl	80063e4 <__swhatbuf_r>
 8006454:	9900      	ldr	r1, [sp, #0]
 8006456:	4605      	mov	r5, r0
 8006458:	4630      	mov	r0, r6
 800645a:	f7ff fe89 	bl	8006170 <_malloc_r>
 800645e:	b948      	cbnz	r0, 8006474 <__smakebuf_r+0x44>
 8006460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006464:	059a      	lsls	r2, r3, #22
 8006466:	d4ef      	bmi.n	8006448 <__smakebuf_r+0x18>
 8006468:	f023 0303 	bic.w	r3, r3, #3
 800646c:	f043 0302 	orr.w	r3, r3, #2
 8006470:	81a3      	strh	r3, [r4, #12]
 8006472:	e7e3      	b.n	800643c <__smakebuf_r+0xc>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	6020      	str	r0, [r4, #0]
 8006478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	9b00      	ldr	r3, [sp, #0]
 8006480:	6163      	str	r3, [r4, #20]
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	6120      	str	r0, [r4, #16]
 8006486:	b15b      	cbz	r3, 80064a0 <__smakebuf_r+0x70>
 8006488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800648c:	4630      	mov	r0, r6
 800648e:	f000 f81d 	bl	80064cc <_isatty_r>
 8006492:	b128      	cbz	r0, 80064a0 <__smakebuf_r+0x70>
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	81a3      	strh	r3, [r4, #12]
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	431d      	orrs	r5, r3
 80064a4:	81a5      	strh	r5, [r4, #12]
 80064a6:	e7cf      	b.n	8006448 <__smakebuf_r+0x18>

080064a8 <_fstat_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4d07      	ldr	r5, [pc, #28]	; (80064c8 <_fstat_r+0x20>)
 80064ac:	2300      	movs	r3, #0
 80064ae:	4604      	mov	r4, r0
 80064b0:	4608      	mov	r0, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	602b      	str	r3, [r5, #0]
 80064b6:	f7fa fabc 	bl	8000a32 <_fstat>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d102      	bne.n	80064c4 <_fstat_r+0x1c>
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	b103      	cbz	r3, 80064c4 <_fstat_r+0x1c>
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	bd38      	pop	{r3, r4, r5, pc}
 80064c6:	bf00      	nop
 80064c8:	20004c50 	.word	0x20004c50

080064cc <_isatty_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d06      	ldr	r5, [pc, #24]	; (80064e8 <_isatty_r+0x1c>)
 80064d0:	2300      	movs	r3, #0
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	602b      	str	r3, [r5, #0]
 80064d8:	f7fa fabb 	bl	8000a52 <_isatty>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_isatty_r+0x1a>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_isatty_r+0x1a>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20004c50 	.word	0x20004c50

080064ec <_sbrk_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4d06      	ldr	r5, [pc, #24]	; (8006508 <_sbrk_r+0x1c>)
 80064f0:	2300      	movs	r3, #0
 80064f2:	4604      	mov	r4, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	602b      	str	r3, [r5, #0]
 80064f8:	f7fa fac4 	bl	8000a84 <_sbrk>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d102      	bne.n	8006506 <_sbrk_r+0x1a>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	b103      	cbz	r3, 8006506 <_sbrk_r+0x1a>
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	20004c50 	.word	0x20004c50

0800650c <_init>:
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	bf00      	nop
 8006510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006512:	bc08      	pop	{r3}
 8006514:	469e      	mov	lr, r3
 8006516:	4770      	bx	lr

08006518 <_fini>:
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651a:	bf00      	nop
 800651c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651e:	bc08      	pop	{r3}
 8006520:	469e      	mov	lr, r3
 8006522:	4770      	bx	lr
