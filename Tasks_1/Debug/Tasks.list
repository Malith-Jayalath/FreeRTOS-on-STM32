
Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005e04  08005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e70  08005e70  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e78  08005e78  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf0  2000006c  08005eec  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c5c  08005eec  00024c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bc0  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033fe  00000000  00000000  00037c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003b0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe5  00000000  00000000  0003c520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044a2  00000000  00000000  0003d505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001651e  00000000  00000000  000419a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a65b  00000000  00000000  00057ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cb0  00000000  00000000  000f2520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f81d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005dec 	.word	0x08005dec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005dec 	.word	0x08005dec

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_write>:
void StartTask1(void *argument);
void StartTask2(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e00a      	b.n	8000504 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	1c4b      	adds	r3, r1, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	2201      	movs	r2, #1
 80004f8:	4807      	ldr	r0, [pc, #28]	; (8000518 <_write+0x3c>)
 80004fa:	f001 fce5 	bl	8001ec8 <HAL_UART_Transmit>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf0      	blt.n	80004ee <_write+0x12>
	}
	return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000088 	.word	0x20000088

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fadc 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f818 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f89e 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f872 	bl	8000614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f002 f8ca 	bl	80026c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <main+0x30>)
 8000536:	2100      	movs	r1, #0
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x34>)
 800053a:	f002 f90f 	bl	800275c <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <main+0x38>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f002 f8e4 	bl	8002710 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x2c>
 800054a:	bf00      	nop
 800054c:	08005e34 	.word	0x08005e34
 8000550:	0800069d 	.word	0x0800069d
 8000554:	200000d0 	.word	0x200000d0

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f926 	bl	80057b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xb4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xb4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xb4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <SystemClock_Config+0xb8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <SystemClock_Config+0xb8>)
 80005a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <SystemClock_Config+0xb8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fd2f 	bl	800102c <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d4:	f000 f8b2 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 ff92 	bl	800151c <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005fe:	f000 f89d 	bl	800073c <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_USART2_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800064c:	f001 fbec 	bl	8001e28 <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f000 f871 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000088 	.word	0x20000088
 8000664:	40004400 	.word	0x40004400

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_GPIO_Init+0x30>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <MX_GPIO_Init+0x30>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_GPIO_Init+0x30>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//	osPriority_t priority;
  const osThreadAttr_t Task2_attributes = {
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2224      	movs	r2, #36	; 0x24
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f005 f883 	bl	80057b8 <memset>
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <StartTask1+0x48>)
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	2318      	movs	r3, #24
 80006be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Infinite loop */
  for(;;)
  {
//	priority = osThreadGetPriority(Task2Handle);
	printf("1\r\n");
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <StartTask1+0x4c>)
 80006c2:	f004 ff99 	bl	80055f8 <puts>
	Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	461a      	mov	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <StartTask1+0x50>)
 80006d0:	f002 f844 	bl	800275c <osThreadNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <StartTask1+0x54>)
 80006d8:	6013      	str	r3, [r2, #0]
	osDelay(1000);
 80006da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006de:	f002 f8fc 	bl	80028da <osDelay>
	printf("1\r\n");
 80006e2:	e7ed      	b.n	80006c0 <StartTask1+0x24>
 80006e4:	08005e0c 	.word	0x08005e0c
 80006e8:	08005e14 	.word	0x08005e14
 80006ec:	080006f5 	.word	0x080006f5
 80006f0:	200000d4 	.word	0x200000d4

080006f4 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
//	osPriority_t priority;
  /* Infinite loop */
  for(;;)
  {
//	priority = osThreadGetPriority(Task2Handle);
	printf("2\r\n");
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <StartTask2+0x1c>)
 80006fe:	f004 ff7b 	bl	80055f8 <puts>
	osThreadTerminate(Task2Handle);
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <StartTask2+0x20>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f8ba 	bl	8002880 <osThreadTerminate>
	printf("2\r\n");
 800070c:	e7f6      	b.n	80006fc <StartTask2+0x8>
 800070e:	bf00      	nop
 8000710:	08005e18 	.word	0x08005e18
 8000714:	200000d4 	.word	0x200000d4

08000718 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d101      	bne.n	800072e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800072a:	f000 f9f9 	bl	8000b20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40014400 	.word	0x40014400

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x8>
	...

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_MspInit+0x54>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	4a11      	ldr	r2, [pc, #68]	; (800079c <HAL_MspInit+0x54>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6453      	str	r3, [r2, #68]	; 0x44
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x54>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <HAL_MspInit+0x54>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_MspInit+0x54>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_MspInit+0x54>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	210f      	movs	r1, #15
 800078a:	f06f 0001 	mvn.w	r0, #1
 800078e:	f000 fa9f 	bl	8000cd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_UART_MspInit+0x84>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12b      	bne.n	800081a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007fa:	230c      	movs	r3, #12
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800080a:	2307      	movs	r3, #7
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <HAL_UART_MspInit+0x8c>)
 8000816:	f000 fa85 	bl	8000d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40004400 	.word	0x40004400
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <HAL_InitTick+0xd0>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	4a2d      	ldr	r2, [pc, #180]	; (8000900 <HAL_InitTick+0xd0>)
 800084a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084e:	6453      	str	r3, [r2, #68]	; 0x44
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <HAL_InitTick+0xd0>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800085c:	f107 020c 	add.w	r2, r7, #12
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f001 f838 	bl	80018dc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800086c:	f001 f822 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 8000870:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000874:	4a23      	ldr	r2, [pc, #140]	; (8000904 <HAL_InitTick+0xd4>)
 8000876:	fba2 2303 	umull	r2, r3, r2, r3
 800087a:	0c9b      	lsrs	r3, r3, #18
 800087c:	3b01      	subs	r3, #1
 800087e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <HAL_InitTick+0xd8>)
 8000882:	4a22      	ldr	r2, [pc, #136]	; (800090c <HAL_InitTick+0xdc>)
 8000884:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <HAL_InitTick+0xd8>)
 8000888:	f240 32e7 	movw	r2, #999	; 0x3e7
 800088c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800088e:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <HAL_InitTick+0xd8>)
 8000890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000892:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <HAL_InitTick+0xd8>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <HAL_InitTick+0xd8>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <HAL_InitTick+0xd8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80008a6:	4818      	ldr	r0, [pc, #96]	; (8000908 <HAL_InitTick+0xd8>)
 80008a8:	f001 f84a 	bl	8001940 <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d11b      	bne.n	80008f2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80008ba:	4813      	ldr	r0, [pc, #76]	; (8000908 <HAL_InitTick+0xd8>)
 80008bc:	f001 f89a 	bl	80019f4 <HAL_TIM_Base_Start_IT>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d111      	bne.n	80008f2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008ce:	2019      	movs	r0, #25
 80008d0:	f000 fa1a 	bl	8000d08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d808      	bhi.n	80008ec <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008da:	2200      	movs	r2, #0
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	2019      	movs	r0, #25
 80008e0:	f000 f9f6 	bl	8000cd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_InitTick+0xe0>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
 80008ea:	e002      	b.n	80008f2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	431bde83 	.word	0x431bde83
 8000908:	200000d8 	.word	0x200000d8
 800090c:	40014400 	.word	0x40014400
 8000910:	20000004 	.word	0x20000004

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000946:	f001 f8b7 	bl	8001ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000d8 	.word	0x200000d8

08000954 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	e00a      	b.n	800097c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000966:	f3af 8000 	nop.w
 800096a:	4601      	mov	r1, r0
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	b2ca      	uxtb	r2, r1
 8000974:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf0      	blt.n	8000966 <_read+0x12>
  }

  return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:
  }
  return len;
}

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	605a      	str	r2, [r3, #4]
  return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_isatty>:

int _isatty(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f004 ff6a 	bl	8005900 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20020000 	.word	0x20020000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000120 	.word	0x20000120
 8000a60:	20004c60 	.word	0x20004c60

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a8c:	f7ff ffea 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a92:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aa8:	4c0a      	ldr	r4, [pc, #40]	; (8000ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f004 ff29 	bl	800590c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aba:	f7ff fd2f 	bl	800051c <main>
  bx  lr    
 8000abe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000acc:	08005e80 	.word	0x08005e80
  ldr r2, =_sbss
 8000ad0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ad4:	20004c5c 	.word	0x20004c5c

08000ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC_IRQHandler>
	...

08000adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <HAL_Init+0x40>)
 8000ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_Init+0x40>)
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x40>)
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f8d8 	bl	8000cba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f7ff fe90 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe1a 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000124 	.word	0x20000124

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000124 	.word	0x20000124

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ff4c 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce2:	f7ff ff61 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000ce6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	68b9      	ldr	r1, [r7, #8]
 8000cec:	6978      	ldr	r0, [r7, #20]
 8000cee:	f7ff ffb1 	bl	8000c54 <NVIC_EncodePriority>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff80 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff54 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e159      	b.n	8000ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 8148 	bne.w	8000fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d005      	beq.n	8000d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d130      	bne.n	8000dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 0201 	and.w	r2, r3, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d017      	beq.n	8000e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d123      	bne.n	8000e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	69b9      	ldr	r1, [r7, #24]
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0203 	and.w	r2, r3, #3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80a2 	beq.w	8000fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b57      	ldr	r3, [pc, #348]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a56      	ldr	r2, [pc, #344]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b54      	ldr	r3, [pc, #336]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec6:	4a52      	ldr	r2, [pc, #328]	; (8001010 <HAL_GPIO_Init+0x2ec>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a49      	ldr	r2, [pc, #292]	; (8001014 <HAL_GPIO_Init+0x2f0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d019      	beq.n	8000f26 <HAL_GPIO_Init+0x202>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a48      	ldr	r2, [pc, #288]	; (8001018 <HAL_GPIO_Init+0x2f4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0x1fe>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a47      	ldr	r2, [pc, #284]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d00d      	beq.n	8000f1e <HAL_GPIO_Init+0x1fa>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a46      	ldr	r2, [pc, #280]	; (8001020 <HAL_GPIO_Init+0x2fc>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d007      	beq.n	8000f1a <HAL_GPIO_Init+0x1f6>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a45      	ldr	r2, [pc, #276]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_GPIO_Init+0x1f2>
 8000f12:	2304      	movs	r3, #4
 8000f14:	e008      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f16:	2307      	movs	r3, #7
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f26:	2300      	movs	r3, #0
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	f002 0203 	and.w	r2, r2, #3
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	; (8001010 <HAL_GPIO_Init+0x2ec>)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6a:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f94:	4a24      	ldr	r2, [pc, #144]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fbe:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	f67f aea2 	bls.w	8000d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40013800 	.word	0x40013800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021000 	.word	0x40021000
 8001028:	40013c00 	.word	0x40013c00

0800102c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e267      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d075      	beq.n	8001136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800104a:	4b88      	ldr	r3, [pc, #544]	; (800126c <HAL_RCC_OscConfig+0x240>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b04      	cmp	r3, #4
 8001054:	d00c      	beq.n	8001070 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001056:	4b85      	ldr	r3, [pc, #532]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800105e:	2b08      	cmp	r3, #8
 8001060:	d112      	bne.n	8001088 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001062:	4b82      	ldr	r3, [pc, #520]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800106e:	d10b      	bne.n	8001088 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001070:	4b7e      	ldr	r3, [pc, #504]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d05b      	beq.n	8001134 <HAL_RCC_OscConfig+0x108>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d157      	bne.n	8001134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e242      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001090:	d106      	bne.n	80010a0 <HAL_RCC_OscConfig+0x74>
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a75      	ldr	r2, [pc, #468]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e01d      	b.n	80010dc <HAL_RCC_OscConfig+0xb0>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x98>
 80010aa:	4b70      	ldr	r3, [pc, #448]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a6f      	ldr	r2, [pc, #444]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b6d      	ldr	r3, [pc, #436]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6c      	ldr	r2, [pc, #432]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e00b      	b.n	80010dc <HAL_RCC_OscConfig+0xb0>
 80010c4:	4b69      	ldr	r3, [pc, #420]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a68      	ldr	r2, [pc, #416]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80010ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b66      	ldr	r3, [pc, #408]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a65      	ldr	r2, [pc, #404]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80010d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fd30 	bl	8000b48 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fd2c 	bl	8000b48 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e207      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b5b      	ldr	r3, [pc, #364]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0xc0>
 800110a:	e014      	b.n	8001136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fd1c 	bl	8000b48 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fd18 	bl	8000b48 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e1f3      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001126:	4b51      	ldr	r3, [pc, #324]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0xe8>
 8001132:	e000      	b.n	8001136 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d063      	beq.n	800120a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001142:	4b4a      	ldr	r3, [pc, #296]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001156:	2b08      	cmp	r3, #8
 8001158:	d11c      	bne.n	8001194 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <HAL_RCC_OscConfig+0x240>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d116      	bne.n	8001194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_RCC_OscConfig+0x152>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d001      	beq.n	800117e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e1c7      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4937      	ldr	r1, [pc, #220]	; (800126c <HAL_RCC_OscConfig+0x240>)
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	e03a      	b.n	800120a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119c:	4b34      	ldr	r3, [pc, #208]	; (8001270 <HAL_RCC_OscConfig+0x244>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a2:	f7ff fcd1 	bl	8000b48 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff fccd 	bl	8000b48 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e1a8      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4925      	ldr	r1, [pc, #148]	; (800126c <HAL_RCC_OscConfig+0x240>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
 80011dc:	e015      	b.n	800120a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <HAL_RCC_OscConfig+0x244>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fcb0 	bl	8000b48 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ec:	f7ff fcac 	bl	8000b48 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e187      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d036      	beq.n	8001284 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d016      	beq.n	800124c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_RCC_OscConfig+0x248>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001224:	f7ff fc90 	bl	8000b48 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122c:	f7ff fc8c 	bl	8000b48 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e167      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_RCC_OscConfig+0x240>)
 8001240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x200>
 800124a:	e01b      	b.n	8001284 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_RCC_OscConfig+0x248>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff fc79 	bl	8000b48 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	e00e      	b.n	8001278 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125a:	f7ff fc75 	bl	8000b48 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d907      	bls.n	8001278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e150      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
 800126c:	40023800 	.word	0x40023800
 8001270:	42470000 	.word	0x42470000
 8001274:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001278:	4b88      	ldr	r3, [pc, #544]	; (800149c <HAL_RCC_OscConfig+0x470>)
 800127a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1ea      	bne.n	800125a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 8097 	beq.w	80013c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001296:	4b81      	ldr	r3, [pc, #516]	; (800149c <HAL_RCC_OscConfig+0x470>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10f      	bne.n	80012c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b7d      	ldr	r3, [pc, #500]	; (800149c <HAL_RCC_OscConfig+0x470>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a7c      	ldr	r2, [pc, #496]	; (800149c <HAL_RCC_OscConfig+0x470>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b7a      	ldr	r3, [pc, #488]	; (800149c <HAL_RCC_OscConfig+0x470>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012be:	2301      	movs	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	4b77      	ldr	r3, [pc, #476]	; (80014a0 <HAL_RCC_OscConfig+0x474>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d118      	bne.n	8001300 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ce:	4b74      	ldr	r3, [pc, #464]	; (80014a0 <HAL_RCC_OscConfig+0x474>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a73      	ldr	r2, [pc, #460]	; (80014a0 <HAL_RCC_OscConfig+0x474>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012da:	f7ff fc35 	bl	8000b48 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e2:	f7ff fc31 	bl	8000b48 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e10c      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	4b6a      	ldr	r3, [pc, #424]	; (80014a0 <HAL_RCC_OscConfig+0x474>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x2ea>
 8001308:	4b64      	ldr	r3, [pc, #400]	; (800149c <HAL_RCC_OscConfig+0x470>)
 800130a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130c:	4a63      	ldr	r2, [pc, #396]	; (800149c <HAL_RCC_OscConfig+0x470>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6713      	str	r3, [r2, #112]	; 0x70
 8001314:	e01c      	b.n	8001350 <HAL_RCC_OscConfig+0x324>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b05      	cmp	r3, #5
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x30c>
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <HAL_RCC_OscConfig+0x470>)
 8001320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001322:	4a5e      	ldr	r2, [pc, #376]	; (800149c <HAL_RCC_OscConfig+0x470>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6713      	str	r3, [r2, #112]	; 0x70
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_RCC_OscConfig+0x470>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132e:	4a5b      	ldr	r2, [pc, #364]	; (800149c <HAL_RCC_OscConfig+0x470>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6713      	str	r3, [r2, #112]	; 0x70
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0x324>
 8001338:	4b58      	ldr	r3, [pc, #352]	; (800149c <HAL_RCC_OscConfig+0x470>)
 800133a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133c:	4a57      	ldr	r2, [pc, #348]	; (800149c <HAL_RCC_OscConfig+0x470>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	6713      	str	r3, [r2, #112]	; 0x70
 8001344:	4b55      	ldr	r3, [pc, #340]	; (800149c <HAL_RCC_OscConfig+0x470>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	4a54      	ldr	r2, [pc, #336]	; (800149c <HAL_RCC_OscConfig+0x470>)
 800134a:	f023 0304 	bic.w	r3, r3, #4
 800134e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d015      	beq.n	8001384 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001358:	f7ff fbf6 	bl	8000b48 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135e:	e00a      	b.n	8001376 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001360:	f7ff fbf2 	bl	8000b48 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f241 3288 	movw	r2, #5000	; 0x1388
 800136e:	4293      	cmp	r3, r2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e0cb      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001376:	4b49      	ldr	r3, [pc, #292]	; (800149c <HAL_RCC_OscConfig+0x470>)
 8001378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0ee      	beq.n	8001360 <HAL_RCC_OscConfig+0x334>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001384:	f7ff fbe0 	bl	8000b48 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138a:	e00a      	b.n	80013a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138c:	f7ff fbdc 	bl	8000b48 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f241 3288 	movw	r2, #5000	; 0x1388
 800139a:	4293      	cmp	r3, r2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e0b5      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a2:	4b3e      	ldr	r3, [pc, #248]	; (800149c <HAL_RCC_OscConfig+0x470>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1ee      	bne.n	800138c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d105      	bne.n	80013c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_RCC_OscConfig+0x470>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	4a38      	ldr	r2, [pc, #224]	; (800149c <HAL_RCC_OscConfig+0x470>)
 80013ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80a1 	beq.w	800150c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_RCC_OscConfig+0x470>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d05c      	beq.n	8001490 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d141      	bne.n	8001462 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <HAL_RCC_OscConfig+0x478>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fbb0 	bl	8000b48 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff fbac 	bl	8000b48 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e087      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fe:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_RCC_OscConfig+0x470>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69da      	ldr	r2, [r3, #28]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	019b      	lsls	r3, r3, #6
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	3b01      	subs	r3, #1
 8001424:	041b      	lsls	r3, r3, #16
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	491b      	ldr	r1, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x470>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_RCC_OscConfig+0x478>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff fb85 	bl	8000b48 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001442:	f7ff fb81 	bl	8000b48 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e05c      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_RCC_OscConfig+0x470>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x416>
 8001460:	e054      	b.n	800150c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x478>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fb6e 	bl	8000b48 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fb6a 	bl	8000b48 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e045      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_RCC_OscConfig+0x470>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x444>
 800148e:	e03d      	b.n	800150c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d107      	bne.n	80014a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e038      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000
 80014a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x4ec>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d028      	beq.n	8001508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d121      	bne.n	8001508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d11a      	bne.n	8001508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014d8:	4013      	ands	r3, r2
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d111      	bne.n	8001508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	085b      	lsrs	r3, r3, #1
 80014f0:	3b01      	subs	r3, #1
 80014f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0cc      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d90c      	bls.n	8001558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b8      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001570:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800157a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	494d      	ldr	r1, [pc, #308]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d044      	beq.n	800163c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d119      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d003      	beq.n	80015da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e06f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ea:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e067      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f023 0203 	bic.w	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4934      	ldr	r1, [pc, #208]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800160c:	f7ff fa9c 	bl	8000b48 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	e00a      	b.n	800162a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff fa98 	bl	8000b48 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e04f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 020c 	and.w	r2, r3, #12
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	429a      	cmp	r2, r3
 800163a:	d1eb      	bne.n	8001614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d20c      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e032      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4916      	ldr	r1, [pc, #88]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 f821 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	490a      	ldr	r1, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	5ccb      	ldrb	r3, [r1, r3]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f8b4 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00
 80016d8:	40023800 	.word	0x40023800
 80016dc:	08005e58 	.word	0x08005e58
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b090      	sub	sp, #64	; 0x40
 80016ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001700:	4b59      	ldr	r3, [pc, #356]	; (8001868 <HAL_RCC_GetSysClockFreq+0x180>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d00d      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x40>
 800170c:	2b08      	cmp	r3, #8
 800170e:	f200 80a1 	bhi.w	8001854 <HAL_RCC_GetSysClockFreq+0x16c>
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0x34>
 8001716:	2b04      	cmp	r3, #4
 8001718:	d003      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0x3a>
 800171a:	e09b      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_RCC_GetSysClockFreq+0x184>)
 800171e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001720:	e09b      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001722:	4b53      	ldr	r3, [pc, #332]	; (8001870 <HAL_RCC_GetSysClockFreq+0x188>)
 8001724:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001726:	e098      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001728:	4b4f      	ldr	r3, [pc, #316]	; (8001868 <HAL_RCC_GetSysClockFreq+0x180>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001732:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <HAL_RCC_GetSysClockFreq+0x180>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d028      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_RCC_GetSysClockFreq+0x180>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	2200      	movs	r2, #0
 8001746:	623b      	str	r3, [r7, #32]
 8001748:	627a      	str	r2, [r7, #36]	; 0x24
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001750:	2100      	movs	r1, #0
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <HAL_RCC_GetSysClockFreq+0x188>)
 8001754:	fb03 f201 	mul.w	r2, r3, r1
 8001758:	2300      	movs	r3, #0
 800175a:	fb00 f303 	mul.w	r3, r0, r3
 800175e:	4413      	add	r3, r2
 8001760:	4a43      	ldr	r2, [pc, #268]	; (8001870 <HAL_RCC_GetSysClockFreq+0x188>)
 8001762:	fba0 1202 	umull	r1, r2, r0, r2
 8001766:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001768:	460a      	mov	r2, r1
 800176a:	62ba      	str	r2, [r7, #40]	; 0x28
 800176c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176e:	4413      	add	r3, r2
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001774:	2200      	movs	r2, #0
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	61fa      	str	r2, [r7, #28]
 800177a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800177e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001782:	f7fe fd2d 	bl	80001e0 <__aeabi_uldivmod>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4613      	mov	r3, r2
 800178c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800178e:	e053      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001790:	4b35      	ldr	r3, [pc, #212]	; (8001868 <HAL_RCC_GetSysClockFreq+0x180>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	2200      	movs	r2, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	617a      	str	r2, [r7, #20]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017a2:	f04f 0b00 	mov.w	fp, #0
 80017a6:	4652      	mov	r2, sl
 80017a8:	465b      	mov	r3, fp
 80017aa:	f04f 0000 	mov.w	r0, #0
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	0159      	lsls	r1, r3, #5
 80017b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b8:	0150      	lsls	r0, r2, #5
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	ebb2 080a 	subs.w	r8, r2, sl
 80017c2:	eb63 090b 	sbc.w	r9, r3, fp
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017da:	ebb2 0408 	subs.w	r4, r2, r8
 80017de:	eb63 0509 	sbc.w	r5, r3, r9
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	00eb      	lsls	r3, r5, #3
 80017ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f0:	00e2      	lsls	r2, r4, #3
 80017f2:	4614      	mov	r4, r2
 80017f4:	461d      	mov	r5, r3
 80017f6:	eb14 030a 	adds.w	r3, r4, sl
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	eb45 030b 	adc.w	r3, r5, fp
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800180e:	4629      	mov	r1, r5
 8001810:	028b      	lsls	r3, r1, #10
 8001812:	4621      	mov	r1, r4
 8001814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001818:	4621      	mov	r1, r4
 800181a:	028a      	lsls	r2, r1, #10
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001822:	2200      	movs	r2, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	60fa      	str	r2, [r7, #12]
 8001828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800182c:	f7fe fcd8 	bl	80001e0 <__aeabi_uldivmod>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4613      	mov	r3, r2
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_GetSysClockFreq+0x180>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	0c1b      	lsrs	r3, r3, #16
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	3301      	adds	r3, #1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001852:	e002      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_RCC_GetSysClockFreq+0x184>)
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800185c:	4618      	mov	r0, r3
 800185e:	3740      	adds	r7, #64	; 0x40
 8001860:	46bd      	mov	sp, r7
 8001862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	00f42400 	.word	0x00f42400
 8001870:	017d7840 	.word	0x017d7840

08001874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_RCC_GetHCLKFreq+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000000 	.word	0x20000000

0800188c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001890:	f7ff fff0 	bl	8001874 <HAL_RCC_GetHCLKFreq>
 8001894:	4602      	mov	r2, r0
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	0a9b      	lsrs	r3, r3, #10
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	4903      	ldr	r1, [pc, #12]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a2:	5ccb      	ldrb	r3, [r1, r3]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08005e68 	.word	0x08005e68

080018b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018b8:	f7ff ffdc 	bl	8001874 <HAL_RCC_GetHCLKFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	0b5b      	lsrs	r3, r3, #13
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	4903      	ldr	r1, [pc, #12]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	08005e68 	.word	0x08005e68

080018dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	220f      	movs	r2, #15
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_GetClockConfig+0x5c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 0203 	and.w	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_RCC_GetClockConfig+0x5c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_RCC_GetClockConfig+0x5c>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_GetClockConfig+0x5c>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <HAL_RCC_GetClockConfig+0x60>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0207 	and.w	r2, r3, #7
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40023c00 	.word	0x40023c00

08001940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e041      	b.n	80019d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f839 	bl	80019de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3304      	adds	r3, #4
 800197c:	4619      	mov	r1, r3
 800197e:	4610      	mov	r0, r2
 8001980:	f000 f9b2 	bl	8001ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d001      	beq.n	8001a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e044      	b.n	8001a96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d018      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x6c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a36:	d013      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x6c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00e      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x6c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a19      	ldr	r2, [pc, #100]	; (8001aac <HAL_TIM_Base_Start_IT+0xb8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d009      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x6c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d004      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x6c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a16      	ldr	r2, [pc, #88]	; (8001ab4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d111      	bne.n	8001a84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d010      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0201 	orr.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a82:	e007      	b.n	8001a94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40000800 	.word	0x40000800
 8001ab0:	40000c00 	.word	0x40000c00
 8001ab4:	40014000 	.word	0x40014000

08001ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d020      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01b      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f06f 0202 	mvn.w	r2, #2
 8001aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8d2 	bl	8001cac <HAL_TIM_IC_CaptureCallback>
 8001b08:	e005      	b.n	8001b16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f8c4 	bl	8001c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f8d5 	bl	8001cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d020      	beq.n	8001b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0204 	mvn.w	r2, #4
 8001b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8ac 	bl	8001cac <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f89e 	bl	8001c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8af 	bl	8001cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d020      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01b      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0208 	mvn.w	r2, #8
 8001b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f886 	bl	8001cac <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f878 	bl	8001c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f889 	bl	8001cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d020      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01b      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0210 	mvn.w	r2, #16
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f860 	bl	8001cac <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f852 	bl	8001c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f863 	bl	8001cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00c      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0201 	mvn.w	r2, #1
 8001c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe fd7a 	bl	8000718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8e6 	bl	8001e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00c      	beq.n	8001c6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f834 	bl	8001cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00c      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0220 	mvn.w	r2, #32
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8b8 	bl	8001e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3a      	ldr	r2, [pc, #232]	; (8001de4 <TIM_Base_SetConfig+0xfc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00f      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d00b      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a37      	ldr	r2, [pc, #220]	; (8001de8 <TIM_Base_SetConfig+0x100>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a36      	ldr	r2, [pc, #216]	; (8001dec <TIM_Base_SetConfig+0x104>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a35      	ldr	r2, [pc, #212]	; (8001df0 <TIM_Base_SetConfig+0x108>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <TIM_Base_SetConfig+0xfc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01b      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d017      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <TIM_Base_SetConfig+0x100>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <TIM_Base_SetConfig+0x104>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00f      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <TIM_Base_SetConfig+0x108>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00b      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <TIM_Base_SetConfig+0x10c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <TIM_Base_SetConfig+0x110>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d003      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <TIM_Base_SetConfig+0x114>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d108      	bne.n	8001d84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <TIM_Base_SetConfig+0xfc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d103      	bne.n	8001db8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d105      	bne.n	8001dd6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f023 0201 	bic.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	611a      	str	r2, [r3, #16]
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40000800 	.word	0x40000800
 8001df0:	40000c00 	.word	0x40000c00
 8001df4:	40014000 	.word	0x40014000
 8001df8:	40014400 	.word	0x40014400
 8001dfc:	40014800 	.word	0x40014800

08001e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e042      	b.n	8001ec0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fca6 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2224      	movs	r2, #36	; 0x24
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f973 	bl	8002158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d175      	bne.n	8001fd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_UART_Transmit+0x2c>
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e06e      	b.n	8001fd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2221      	movs	r2, #33	; 0x21
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f06:	f7fe fe1f 	bl	8000b48 <HAL_GetTick>
 8001f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	88fa      	ldrh	r2, [r7, #6]
 8001f10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	88fa      	ldrh	r2, [r7, #6]
 8001f16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f20:	d108      	bne.n	8001f34 <HAL_UART_Transmit+0x6c>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d104      	bne.n	8001f34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	e003      	b.n	8001f3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f3c:	e02e      	b.n	8001f9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f848 	bl	8001fde <UART_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e03a      	b.n	8001fd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10b      	bne.n	8001f7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	3302      	adds	r3, #2
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	e007      	b.n	8001f8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1cb      	bne.n	8001f3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2200      	movs	r2, #0
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f814 	bl	8001fde <UART_WaitOnFlagUntilTimeout>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e006      	b.n	8001fd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e000      	b.n	8001fd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fee:	e03b      	b.n	8002068 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff6:	d037      	beq.n	8002068 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff8:	f7fe fda6 	bl	8000b48 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	6a3a      	ldr	r2, [r7, #32]
 8002004:	429a      	cmp	r2, r3
 8002006:	d302      	bcc.n	800200e <UART_WaitOnFlagUntilTimeout+0x30>
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e03a      	b.n	8002088 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d023      	beq.n	8002068 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b80      	cmp	r3, #128	; 0x80
 8002024:	d020      	beq.n	8002068 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d01d      	beq.n	8002068 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d116      	bne.n	8002068 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f81d 	bl	8002090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2208      	movs	r2, #8
 800205a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e00f      	b.n	8002088 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4013      	ands	r3, r2
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	429a      	cmp	r2, r3
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	429a      	cmp	r2, r3
 8002084:	d0b4      	beq.n	8001ff0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002090:	b480      	push	{r7}
 8002092:	b095      	sub	sp, #84	; 0x54
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	330c      	adds	r3, #12
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	e853 3f00 	ldrex	r3, [r3]
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80020ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	330c      	adds	r3, #12
 80020b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020b8:	643a      	str	r2, [r7, #64]	; 0x40
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020c0:	e841 2300 	strex	r3, r2, [r1]
 80020c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80020c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e5      	bne.n	8002098 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3314      	adds	r3, #20
 80020d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	e853 3f00 	ldrex	r3, [r3]
 80020da:	61fb      	str	r3, [r7, #28]
   return(result);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3314      	adds	r3, #20
 80020ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f4:	e841 2300 	strex	r3, r2, [r1]
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1e5      	bne.n	80020cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	2b01      	cmp	r3, #1
 8002106:	d119      	bne.n	800213c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	330c      	adds	r3, #12
 800210e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	e853 3f00 	ldrex	r3, [r3]
 8002116:	60bb      	str	r3, [r7, #8]
   return(result);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f023 0310 	bic.w	r3, r3, #16
 800211e:	647b      	str	r3, [r7, #68]	; 0x44
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	330c      	adds	r3, #12
 8002126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002128:	61ba      	str	r2, [r7, #24]
 800212a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212c:	6979      	ldr	r1, [r7, #20]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	e841 2300 	strex	r3, r2, [r1]
 8002134:	613b      	str	r3, [r7, #16]
   return(result);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e5      	bne.n	8002108 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
}
 800214a:	bf00      	nop
 800214c:	3754      	adds	r7, #84	; 0x54
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800215c:	b0c0      	sub	sp, #256	; 0x100
 800215e:	af00      	add	r7, sp, #0
 8002160:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002174:	68d9      	ldr	r1, [r3, #12]
 8002176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	ea40 0301 	orr.w	r3, r0, r1
 8002180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	431a      	orrs	r2, r3
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	431a      	orrs	r2, r3
 8002198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021b0:	f021 010c 	bic.w	r1, r1, #12
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80021be:	430b      	orrs	r3, r1
 80021c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d2:	6999      	ldr	r1, [r3, #24]
 80021d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	ea40 0301 	orr.w	r3, r0, r1
 80021de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b8f      	ldr	r3, [pc, #572]	; (8002424 <UART_SetConfig+0x2cc>)
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d005      	beq.n	80021f8 <UART_SetConfig+0xa0>
 80021ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b8d      	ldr	r3, [pc, #564]	; (8002428 <UART_SetConfig+0x2d0>)
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d104      	bne.n	8002202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021f8:	f7ff fb5c 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 80021fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002200:	e003      	b.n	800220a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002202:	f7ff fb43 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8002206:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800220a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002214:	f040 810c 	bne.w	8002430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800221c:	2200      	movs	r2, #0
 800221e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002222:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800222a:	4622      	mov	r2, r4
 800222c:	462b      	mov	r3, r5
 800222e:	1891      	adds	r1, r2, r2
 8002230:	65b9      	str	r1, [r7, #88]	; 0x58
 8002232:	415b      	adcs	r3, r3
 8002234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800223a:	4621      	mov	r1, r4
 800223c:	eb12 0801 	adds.w	r8, r2, r1
 8002240:	4629      	mov	r1, r5
 8002242:	eb43 0901 	adc.w	r9, r3, r1
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800225a:	4690      	mov	r8, r2
 800225c:	4699      	mov	r9, r3
 800225e:	4623      	mov	r3, r4
 8002260:	eb18 0303 	adds.w	r3, r8, r3
 8002264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002268:	462b      	mov	r3, r5
 800226a:	eb49 0303 	adc.w	r3, r9, r3
 800226e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800227e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002286:	460b      	mov	r3, r1
 8002288:	18db      	adds	r3, r3, r3
 800228a:	653b      	str	r3, [r7, #80]	; 0x50
 800228c:	4613      	mov	r3, r2
 800228e:	eb42 0303 	adc.w	r3, r2, r3
 8002292:	657b      	str	r3, [r7, #84]	; 0x54
 8002294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800229c:	f7fd ffa0 	bl	80001e0 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4b61      	ldr	r3, [pc, #388]	; (800242c <UART_SetConfig+0x2d4>)
 80022a6:	fba3 2302 	umull	r2, r3, r3, r2
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	011c      	lsls	r4, r3, #4
 80022ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022b2:	2200      	movs	r2, #0
 80022b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80022c0:	4642      	mov	r2, r8
 80022c2:	464b      	mov	r3, r9
 80022c4:	1891      	adds	r1, r2, r2
 80022c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80022c8:	415b      	adcs	r3, r3
 80022ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022d0:	4641      	mov	r1, r8
 80022d2:	eb12 0a01 	adds.w	sl, r2, r1
 80022d6:	4649      	mov	r1, r9
 80022d8:	eb43 0b01 	adc.w	fp, r3, r1
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022f0:	4692      	mov	sl, r2
 80022f2:	469b      	mov	fp, r3
 80022f4:	4643      	mov	r3, r8
 80022f6:	eb1a 0303 	adds.w	r3, sl, r3
 80022fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022fe:	464b      	mov	r3, r9
 8002300:	eb4b 0303 	adc.w	r3, fp, r3
 8002304:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002314:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800231c:	460b      	mov	r3, r1
 800231e:	18db      	adds	r3, r3, r3
 8002320:	643b      	str	r3, [r7, #64]	; 0x40
 8002322:	4613      	mov	r3, r2
 8002324:	eb42 0303 	adc.w	r3, r2, r3
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
 800232a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800232e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002332:	f7fd ff55 	bl	80001e0 <__aeabi_uldivmod>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4611      	mov	r1, r2
 800233c:	4b3b      	ldr	r3, [pc, #236]	; (800242c <UART_SetConfig+0x2d4>)
 800233e:	fba3 2301 	umull	r2, r3, r3, r1
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2264      	movs	r2, #100	; 0x64
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	1acb      	subs	r3, r1, r3
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <UART_SetConfig+0x2d4>)
 8002354:	fba3 2302 	umull	r2, r3, r3, r2
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002360:	441c      	add	r4, r3
 8002362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002366:	2200      	movs	r2, #0
 8002368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800236c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002374:	4642      	mov	r2, r8
 8002376:	464b      	mov	r3, r9
 8002378:	1891      	adds	r1, r2, r2
 800237a:	63b9      	str	r1, [r7, #56]	; 0x38
 800237c:	415b      	adcs	r3, r3
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002384:	4641      	mov	r1, r8
 8002386:	1851      	adds	r1, r2, r1
 8002388:	6339      	str	r1, [r7, #48]	; 0x30
 800238a:	4649      	mov	r1, r9
 800238c:	414b      	adcs	r3, r1
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800239c:	4659      	mov	r1, fp
 800239e:	00cb      	lsls	r3, r1, #3
 80023a0:	4651      	mov	r1, sl
 80023a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a6:	4651      	mov	r1, sl
 80023a8:	00ca      	lsls	r2, r1, #3
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	4642      	mov	r2, r8
 80023b2:	189b      	adds	r3, r3, r2
 80023b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023b8:	464b      	mov	r3, r9
 80023ba:	460a      	mov	r2, r1
 80023bc:	eb42 0303 	adc.w	r3, r2, r3
 80023c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80023d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80023d8:	460b      	mov	r3, r1
 80023da:	18db      	adds	r3, r3, r3
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023de:	4613      	mov	r3, r2
 80023e0:	eb42 0303 	adc.w	r3, r2, r3
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023ee:	f7fd fef7 	bl	80001e0 <__aeabi_uldivmod>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <UART_SetConfig+0x2d4>)
 80023f8:	fba3 1302 	umull	r1, r3, r3, r2
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	2164      	movs	r1, #100	; 0x64
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	3332      	adds	r3, #50	; 0x32
 800240a:	4a08      	ldr	r2, [pc, #32]	; (800242c <UART_SetConfig+0x2d4>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	f003 0207 	and.w	r2, r3, #7
 8002416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4422      	add	r2, r4
 800241e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002420:	e106      	b.n	8002630 <UART_SetConfig+0x4d8>
 8002422:	bf00      	nop
 8002424:	40011000 	.word	0x40011000
 8002428:	40011400 	.word	0x40011400
 800242c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002434:	2200      	movs	r2, #0
 8002436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800243a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800243e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002442:	4642      	mov	r2, r8
 8002444:	464b      	mov	r3, r9
 8002446:	1891      	adds	r1, r2, r2
 8002448:	6239      	str	r1, [r7, #32]
 800244a:	415b      	adcs	r3, r3
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
 800244e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002452:	4641      	mov	r1, r8
 8002454:	1854      	adds	r4, r2, r1
 8002456:	4649      	mov	r1, r9
 8002458:	eb43 0501 	adc.w	r5, r3, r1
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	00eb      	lsls	r3, r5, #3
 8002466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800246a:	00e2      	lsls	r2, r4, #3
 800246c:	4614      	mov	r4, r2
 800246e:	461d      	mov	r5, r3
 8002470:	4643      	mov	r3, r8
 8002472:	18e3      	adds	r3, r4, r3
 8002474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002478:	464b      	mov	r3, r9
 800247a:	eb45 0303 	adc.w	r3, r5, r3
 800247e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800248e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800249e:	4629      	mov	r1, r5
 80024a0:	008b      	lsls	r3, r1, #2
 80024a2:	4621      	mov	r1, r4
 80024a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024a8:	4621      	mov	r1, r4
 80024aa:	008a      	lsls	r2, r1, #2
 80024ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80024b0:	f7fd fe96 	bl	80001e0 <__aeabi_uldivmod>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4b60      	ldr	r3, [pc, #384]	; (800263c <UART_SetConfig+0x4e4>)
 80024ba:	fba3 2302 	umull	r2, r3, r3, r2
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	011c      	lsls	r4, r3, #4
 80024c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80024d4:	4642      	mov	r2, r8
 80024d6:	464b      	mov	r3, r9
 80024d8:	1891      	adds	r1, r2, r2
 80024da:	61b9      	str	r1, [r7, #24]
 80024dc:	415b      	adcs	r3, r3
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e4:	4641      	mov	r1, r8
 80024e6:	1851      	adds	r1, r2, r1
 80024e8:	6139      	str	r1, [r7, #16]
 80024ea:	4649      	mov	r1, r9
 80024ec:	414b      	adcs	r3, r1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024fc:	4659      	mov	r1, fp
 80024fe:	00cb      	lsls	r3, r1, #3
 8002500:	4651      	mov	r1, sl
 8002502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002506:	4651      	mov	r1, sl
 8002508:	00ca      	lsls	r2, r1, #3
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	4603      	mov	r3, r0
 8002510:	4642      	mov	r2, r8
 8002512:	189b      	adds	r3, r3, r2
 8002514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002518:	464b      	mov	r3, r9
 800251a:	460a      	mov	r2, r1
 800251c:	eb42 0303 	adc.w	r3, r2, r3
 8002520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	67bb      	str	r3, [r7, #120]	; 0x78
 800252e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800253c:	4649      	mov	r1, r9
 800253e:	008b      	lsls	r3, r1, #2
 8002540:	4641      	mov	r1, r8
 8002542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002546:	4641      	mov	r1, r8
 8002548:	008a      	lsls	r2, r1, #2
 800254a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800254e:	f7fd fe47 	bl	80001e0 <__aeabi_uldivmod>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4611      	mov	r1, r2
 8002558:	4b38      	ldr	r3, [pc, #224]	; (800263c <UART_SetConfig+0x4e4>)
 800255a:	fba3 2301 	umull	r2, r3, r3, r1
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2264      	movs	r2, #100	; 0x64
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	1acb      	subs	r3, r1, r3
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	3332      	adds	r3, #50	; 0x32
 800256c:	4a33      	ldr	r2, [pc, #204]	; (800263c <UART_SetConfig+0x4e4>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002578:	441c      	add	r4, r3
 800257a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800257e:	2200      	movs	r2, #0
 8002580:	673b      	str	r3, [r7, #112]	; 0x70
 8002582:	677a      	str	r2, [r7, #116]	; 0x74
 8002584:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002588:	4642      	mov	r2, r8
 800258a:	464b      	mov	r3, r9
 800258c:	1891      	adds	r1, r2, r2
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	415b      	adcs	r3, r3
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002598:	4641      	mov	r1, r8
 800259a:	1851      	adds	r1, r2, r1
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	4649      	mov	r1, r9
 80025a0:	414b      	adcs	r3, r1
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025b0:	4659      	mov	r1, fp
 80025b2:	00cb      	lsls	r3, r1, #3
 80025b4:	4651      	mov	r1, sl
 80025b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025ba:	4651      	mov	r1, sl
 80025bc:	00ca      	lsls	r2, r1, #3
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	4642      	mov	r2, r8
 80025c6:	189b      	adds	r3, r3, r2
 80025c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ca:	464b      	mov	r3, r9
 80025cc:	460a      	mov	r2, r1
 80025ce:	eb42 0303 	adc.w	r3, r2, r3
 80025d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	663b      	str	r3, [r7, #96]	; 0x60
 80025de:	667a      	str	r2, [r7, #100]	; 0x64
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025ec:	4649      	mov	r1, r9
 80025ee:	008b      	lsls	r3, r1, #2
 80025f0:	4641      	mov	r1, r8
 80025f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025f6:	4641      	mov	r1, r8
 80025f8:	008a      	lsls	r2, r1, #2
 80025fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025fe:	f7fd fdef 	bl	80001e0 <__aeabi_uldivmod>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <UART_SetConfig+0x4e4>)
 8002608:	fba3 1302 	umull	r1, r3, r3, r2
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	2164      	movs	r1, #100	; 0x64
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	3332      	adds	r3, #50	; 0x32
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <UART_SetConfig+0x4e4>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	f003 020f 	and.w	r2, r3, #15
 8002626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4422      	add	r2, r4
 800262e:	609a      	str	r2, [r3, #8]
}
 8002630:	bf00      	nop
 8002632:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002636:	46bd      	mov	sp, r7
 8002638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800263c:	51eb851f 	.word	0x51eb851f

08002640 <__NVIC_SetPriority>:
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	; (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	; (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <SysTick_Handler+0x1c>)
 800269a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800269c:	f001 fe2c 	bl	80042f8 <xTaskGetSchedulerState>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d001      	beq.n	80026aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80026a6:	f002 fc17 	bl	8004ed8 <xPortSysTickHandler>
  }
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026b8:	2100      	movs	r1, #0
 80026ba:	f06f 0004 	mvn.w	r0, #4
 80026be:	f7ff ffbf 	bl	8002640 <__NVIC_SetPriority>
#endif
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ce:	f3ef 8305 	mrs	r3, IPSR
 80026d2:	603b      	str	r3, [r7, #0]
  return(result);
 80026d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80026da:	f06f 0305 	mvn.w	r3, #5
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	e00c      	b.n	80026fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <osKernelInitialize+0x44>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <osKernelInitialize+0x44>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	e002      	b.n	80026fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000128 	.word	0x20000128

08002710 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002716:	f3ef 8305 	mrs	r3, IPSR
 800271a:	603b      	str	r3, [r7, #0]
  return(result);
 800271c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002722:	f06f 0305 	mvn.w	r3, #5
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	e010      	b.n	800274c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <osKernelStart+0x48>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d109      	bne.n	8002746 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002732:	f7ff ffbf 	bl	80026b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <osKernelStart+0x48>)
 8002738:	2202      	movs	r2, #2
 800273a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800273c:	f001 f980 	bl	8003a40 <vTaskStartScheduler>
      stat = osOK;
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	e002      	b.n	800274c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800274c:	687b      	ldr	r3, [r7, #4]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000128 	.word	0x20000128

0800275c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b08e      	sub	sp, #56	; 0x38
 8002760:	af04      	add	r7, sp, #16
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800276c:	f3ef 8305 	mrs	r3, IPSR
 8002770:	617b      	str	r3, [r7, #20]
  return(result);
 8002772:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002774:	2b00      	cmp	r3, #0
 8002776:	d17e      	bne.n	8002876 <osThreadNew+0x11a>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07b      	beq.n	8002876 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002782:	2318      	movs	r3, #24
 8002784:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d045      	beq.n	8002822 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <osThreadNew+0x48>
        name = attr->name;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <osThreadNew+0x6e>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b38      	cmp	r3, #56	; 0x38
 80027bc:	d805      	bhi.n	80027ca <osThreadNew+0x6e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <osThreadNew+0x72>
        return (NULL);
 80027ca:	2300      	movs	r3, #0
 80027cc:	e054      	b.n	8002878 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00e      	beq.n	8002804 <osThreadNew+0xa8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2ba7      	cmp	r3, #167	; 0xa7
 80027ec:	d90a      	bls.n	8002804 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <osThreadNew+0xa8>
        mem = 1;
 80027fe:	2301      	movs	r3, #1
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e010      	b.n	8002826 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10c      	bne.n	8002826 <osThreadNew+0xca>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d108      	bne.n	8002826 <osThreadNew+0xca>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d104      	bne.n	8002826 <osThreadNew+0xca>
          mem = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	e001      	b.n	8002826 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d110      	bne.n	800284e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002834:	9202      	str	r2, [sp, #8]
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6a3a      	ldr	r2, [r7, #32]
 8002840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fe38 	bl	80034b8 <xTaskCreateStatic>
 8002848:	4603      	mov	r3, r0
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	e013      	b.n	8002876 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d110      	bne.n	8002876 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	b29a      	uxth	r2, r3
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fe83 	bl	8003572 <xTaskCreate>
 800286c:	4603      	mov	r3, r0
 800286e:	2b01      	cmp	r3, #1
 8002870:	d001      	beq.n	8002876 <osThreadNew+0x11a>
            hTask = NULL;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002876:	693b      	ldr	r3, [r7, #16]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800288c:	f3ef 8305 	mrs	r3, IPSR
 8002890:	60bb      	str	r3, [r7, #8]
  return(result);
 8002892:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8002898:	f06f 0305 	mvn.w	r3, #5
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e017      	b.n	80028d0 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80028a6:	f06f 0303 	mvn.w	r3, #3
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e010      	b.n	80028d0 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80028ae:	6938      	ldr	r0, [r7, #16]
 80028b0:	f001 f860 	bl	8003974 <eTaskGetState>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d005      	beq.n	80028ca <osThreadTerminate+0x4a>
      stat = osOK;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80028c2:	6938      	ldr	r0, [r7, #16]
 80028c4:	f000 ffb0 	bl	8003828 <vTaskDelete>
 80028c8:	e002      	b.n	80028d0 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80028ca:	f06f 0302 	mvn.w	r3, #2
 80028ce:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80028d0:	697b      	ldr	r3, [r7, #20]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028e2:	f3ef 8305 	mrs	r3, IPSR
 80028e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80028e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <osDelay+0x1c>
    stat = osErrorISR;
 80028ee:	f06f 0305 	mvn.w	r3, #5
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e007      	b.n	8002906 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f001 f803 	bl	800390c <vTaskDelay>
    }
  }

  return (stat);
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <vApplicationGetIdleTaskMemory+0x2c>)
 8002920:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <vApplicationGetIdleTaskMemory+0x30>)
 8002926:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	601a      	str	r2, [r3, #0]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	2000012c 	.word	0x2000012c
 8002940:	200001d4 	.word	0x200001d4

08002944 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a07      	ldr	r2, [pc, #28]	; (8002970 <vApplicationGetTimerTaskMemory+0x2c>)
 8002954:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4a06      	ldr	r2, [pc, #24]	; (8002974 <vApplicationGetTimerTaskMemory+0x30>)
 800295a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	200003d4 	.word	0x200003d4
 8002974:	2000047c 	.word	0x2000047c

08002978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f103 0208 	add.w	r2, r3, #8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f04f 32ff 	mov.w	r2, #4294967295
 8002990:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f103 0208 	add.w	r2, r3, #8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f103 0208 	add.w	r2, r3, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b085      	sub	sp, #20
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d103      	bne.n	8002a3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e00c      	b.n	8002a54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e002      	b.n	8002a48 <vListInsert+0x2e>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d2f6      	bcs.n	8002a42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	601a      	str	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6892      	ldr	r2, [r2, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6852      	ldr	r2, [r2, #4]
 8002aac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d103      	bne.n	8002ac0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	1e5a      	subs	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b0a:	f002 f953 	bl	8004db4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	68f9      	ldr	r1, [r7, #12]
 8002b18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	441a      	add	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	68f9      	ldr	r1, [r7, #12]
 8002b3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	441a      	add	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	22ff      	movs	r2, #255	; 0xff
 8002b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	22ff      	movs	r2, #255	; 0xff
 8002b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d114      	bne.n	8002b8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01a      	beq.n	8002b9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 fa01 	bl	8003f74 <xTaskRemoveFromEventList>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <xQueueGenericReset+0xcc>)
 8002b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	e009      	b.n	8002b9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3310      	adds	r3, #16
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fef2 	bl	8002978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3324      	adds	r3, #36	; 0x24
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff feed 	bl	8002978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b9e:	f002 f939 	bl	8004e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ba2:	2301      	movs	r3, #1
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	e000ed04 	.word	0xe000ed04

08002bb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08e      	sub	sp, #56	; 0x38
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <xQueueGenericCreateStatic+0x52>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <xQueueGenericCreateStatic+0x56>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <xQueueGenericCreateStatic+0x58>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	623b      	str	r3, [r7, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <xQueueGenericCreateStatic+0x7e>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <xQueueGenericCreateStatic+0x82>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <xQueueGenericCreateStatic+0x84>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	61fb      	str	r3, [r7, #28]
}
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c4e:	2350      	movs	r3, #80	; 0x50
 8002c50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b50      	cmp	r3, #80	; 0x50
 8002c56:	d00a      	beq.n	8002c6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	61bb      	str	r3, [r7, #24]
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f805 	bl	8002ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3730      	adds	r7, #48	; 0x30
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d103      	bne.n	8002cbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e002      	b.n	8002cc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cce:	2101      	movs	r1, #1
 8002cd0:	69b8      	ldr	r0, [r7, #24]
 8002cd2:	f7ff ff05 	bl	8002ae0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <xQueueGenericSend+0x32>
	__asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d16:	bf00      	nop
 8002d18:	e7fe      	b.n	8002d18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d103      	bne.n	8002d28 <xQueueGenericSend+0x40>
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <xQueueGenericSend+0x44>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <xQueueGenericSend+0x46>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <xQueueGenericSend+0x60>
	__asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d103      	bne.n	8002d56 <xQueueGenericSend+0x6e>
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <xQueueGenericSend+0x72>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <xQueueGenericSend+0x74>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	623b      	str	r3, [r7, #32]
}
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d76:	f001 fabf 	bl	80042f8 <xTaskGetSchedulerState>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <xQueueGenericSend+0x9e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <xQueueGenericSend+0xa2>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueGenericSend+0xa4>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61fb      	str	r3, [r7, #28]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002da6:	f002 f805 	bl	8004db4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <xQueueGenericSend+0xd4>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d129      	bne.n	8002e10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc2:	f000 fa0b 	bl	80031dc <prvCopyDataToQueue>
 8002dc6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d010      	beq.n	8002df2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	3324      	adds	r3, #36	; 0x24
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 f8cd 	bl	8003f74 <xTaskRemoveFromEventList>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002de0:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <xQueueGenericSend+0x1f8>)
 8002de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	e00a      	b.n	8002e08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002df8:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <xQueueGenericSend+0x1f8>)
 8002dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e08:	f002 f804 	bl	8004e14 <vPortExitCritical>
				return pdPASS;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e063      	b.n	8002ed8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e16:	f001 fffd 	bl	8004e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e05c      	b.n	8002ed8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f001 f907 	bl	800403c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e32:	f001 ffef 	bl	8004e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e36:	f000 fe73 	bl	8003b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e3a:	f001 ffbb 	bl	8004db4 <vPortEnterCritical>
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e44:	b25b      	sxtb	r3, r3
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d103      	bne.n	8002e54 <xQueueGenericSend+0x16c>
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e5a:	b25b      	sxtb	r3, r3
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d103      	bne.n	8002e6a <xQueueGenericSend+0x182>
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e6a:	f001 ffd3 	bl	8004e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e6e:	1d3a      	adds	r2, r7, #4
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 f8f6 	bl	8004068 <xTaskCheckForTimeOut>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d124      	bne.n	8002ecc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e84:	f000 faa2 	bl	80033cc <prvIsQueueFull>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d018      	beq.n	8002ec0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	3310      	adds	r3, #16
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f81c 	bl	8003ed4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e9e:	f000 fa2d 	bl	80032fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ea2:	f000 fe4b 	bl	8003b3c <xTaskResumeAll>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f47f af7c 	bne.w	8002da6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <xQueueGenericSend+0x1f8>)
 8002eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	e772      	b.n	8002da6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec2:	f000 fa1b 	bl	80032fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ec6:	f000 fe39 	bl	8003b3c <xTaskResumeAll>
 8002eca:	e76c      	b.n	8002da6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ece:	f000 fa15 	bl	80032fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ed2:	f000 fe33 	bl	8003b3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ed6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3738      	adds	r7, #56	; 0x38
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b090      	sub	sp, #64	; 0x40
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f0e:	bf00      	nop
 8002f10:	e7fe      	b.n	8002f10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <xQueueGenericSendFromISR+0x3c>
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <xQueueGenericSendFromISR+0x40>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <xQueueGenericSendFromISR+0x42>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d103      	bne.n	8002f4e <xQueueGenericSendFromISR+0x6a>
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <xQueueGenericSendFromISR+0x6e>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <xQueueGenericSendFromISR+0x70>
 8002f52:	2300      	movs	r3, #0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10a      	bne.n	8002f6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	623b      	str	r3, [r7, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	e7fe      	b.n	8002f6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f6e:	f002 f803 	bl	8004f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f72:	f3ef 8211 	mrs	r2, BASEPRI
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	61fa      	str	r2, [r7, #28]
 8002f88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d302      	bcc.n	8002fa0 <xQueueGenericSendFromISR+0xbc>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d12f      	bne.n	8003000 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fb6:	f000 f911 	bl	80031dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc2:	d112      	bne.n	8002fea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d016      	beq.n	8002ffa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	3324      	adds	r3, #36	; 0x24
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 ffcf 	bl	8003f74 <xTaskRemoveFromEventList>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e007      	b.n	8002ffa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	b25a      	sxtb	r2, r3
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002ffe:	e001      	b.n	8003004 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003000:	2300      	movs	r3, #0
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800300e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003012:	4618      	mov	r0, r3
 8003014:	3740      	adds	r7, #64	; 0x40
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003028:	2300      	movs	r3, #0
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <xQueueReceive+0x30>
	__asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	623b      	str	r3, [r7, #32]
}
 8003048:	bf00      	nop
 800304a:	e7fe      	b.n	800304a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <xQueueReceive+0x3e>
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <xQueueReceive+0x42>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <xQueueReceive+0x44>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <xQueueReceive+0x5e>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	61fb      	str	r3, [r7, #28]
}
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800307a:	f001 f93d 	bl	80042f8 <xTaskGetSchedulerState>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d102      	bne.n	800308a <xQueueReceive+0x6e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <xQueueReceive+0x72>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueReceive+0x74>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xQueueReceive+0x8e>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	61bb      	str	r3, [r7, #24]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030aa:	f001 fe83 	bl	8004db4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01f      	beq.n	80030fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030be:	f000 f8f7 	bl	80032b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	1e5a      	subs	r2, r3, #1
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00f      	beq.n	80030f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	3310      	adds	r3, #16
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 ff4c 	bl	8003f74 <xTaskRemoveFromEventList>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030e2:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <xQueueReceive+0x1bc>)
 80030e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030f2:	f001 fe8f 	bl	8004e14 <vPortExitCritical>
				return pdPASS;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e069      	b.n	80031ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003100:	f001 fe88 	bl	8004e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003104:	2300      	movs	r3, #0
 8003106:	e062      	b.n	80031ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800310e:	f107 0310 	add.w	r3, r7, #16
 8003112:	4618      	mov	r0, r3
 8003114:	f000 ff92 	bl	800403c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003118:	2301      	movs	r3, #1
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800311c:	f001 fe7a 	bl	8004e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003120:	f000 fcfe 	bl	8003b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003124:	f001 fe46 	bl	8004db4 <vPortEnterCritical>
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800312e:	b25b      	sxtb	r3, r3
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d103      	bne.n	800313e <xQueueReceive+0x122>
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003144:	b25b      	sxtb	r3, r3
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d103      	bne.n	8003154 <xQueueReceive+0x138>
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003154:	f001 fe5e 	bl	8004e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003158:	1d3a      	adds	r2, r7, #4
 800315a:	f107 0310 	add.w	r3, r7, #16
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f000 ff81 	bl	8004068 <xTaskCheckForTimeOut>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d123      	bne.n	80031b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800316c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800316e:	f000 f917 	bl	80033a0 <prvIsQueueEmpty>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d017      	beq.n	80031a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	3324      	adds	r3, #36	; 0x24
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fea7 	bl	8003ed4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003188:	f000 f8b8 	bl	80032fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800318c:	f000 fcd6 	bl	8003b3c <xTaskResumeAll>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d189      	bne.n	80030aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <xQueueReceive+0x1bc>)
 8003198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	e780      	b.n	80030aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031aa:	f000 f8a7 	bl	80032fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031ae:	f000 fcc5 	bl	8003b3c <xTaskResumeAll>
 80031b2:	e77a      	b.n	80030aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b6:	f000 f8a1 	bl	80032fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ba:	f000 fcbf 	bl	8003b3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c0:	f000 f8ee 	bl	80033a0 <prvIsQueueEmpty>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f43f af6f 	beq.w	80030aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3730      	adds	r7, #48	; 0x30
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10d      	bne.n	8003216 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d14d      	bne.n	800329e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f894 	bl	8004334 <xTaskPriorityDisinherit>
 800320c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	e043      	b.n	800329e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d119      	bne.n	8003250 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6858      	ldr	r0, [r3, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	461a      	mov	r2, r3
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	f002 fb97 	bl	800595a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	441a      	add	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	429a      	cmp	r2, r3
 8003244:	d32b      	bcc.n	800329e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	e026      	b.n	800329e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68d8      	ldr	r0, [r3, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	461a      	mov	r2, r3
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	f002 fb7d 	bl	800595a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	425b      	negs	r3, r3
 800326a:	441a      	add	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d207      	bcs.n	800328c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	425b      	negs	r3, r3
 8003286:	441a      	add	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d105      	bne.n	800329e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	3b01      	subs	r3, #1
 800329c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032a6:	697b      	ldr	r3, [r7, #20]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d018      	beq.n	80032f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	441a      	add	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d303      	bcc.n	80032e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68d9      	ldr	r1, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	461a      	mov	r2, r3
 80032ee:	6838      	ldr	r0, [r7, #0]
 80032f0:	f002 fb33 	bl	800595a <memcpy>
	}
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003304:	f001 fd56 	bl	8004db4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800330e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003310:	e011      	b.n	8003336 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3324      	adds	r3, #36	; 0x24
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fe28 	bl	8003f74 <xTaskRemoveFromEventList>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800332a:	f000 feff 	bl	800412c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	3b01      	subs	r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	dce9      	bgt.n	8003312 <prvUnlockQueue+0x16>
 800333e:	e000      	b.n	8003342 <prvUnlockQueue+0x46>
					break;
 8003340:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800334a:	f001 fd63 	bl	8004e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800334e:	f001 fd31 	bl	8004db4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003358:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800335a:	e011      	b.n	8003380 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3310      	adds	r3, #16
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fe03 	bl	8003f74 <xTaskRemoveFromEventList>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003374:	f000 feda 	bl	800412c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003378:	7bbb      	ldrb	r3, [r7, #14]
 800337a:	3b01      	subs	r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003384:	2b00      	cmp	r3, #0
 8003386:	dce9      	bgt.n	800335c <prvUnlockQueue+0x60>
 8003388:	e000      	b.n	800338c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800338a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	22ff      	movs	r2, #255	; 0xff
 8003390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003394:	f001 fd3e 	bl	8004e14 <vPortExitCritical>
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033a8:	f001 fd04 	bl	8004db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033b4:	2301      	movs	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e001      	b.n	80033be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033be:	f001 fd29 	bl	8004e14 <vPortExitCritical>

	return xReturn;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033d4:	f001 fcee 	bl	8004db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d102      	bne.n	80033ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e001      	b.n	80033ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ee:	f001 fd11 	bl	8004e14 <vPortExitCritical>

	return xReturn;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e014      	b.n	8003436 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800340c:	4a0f      	ldr	r2, [pc, #60]	; (800344c <vQueueAddToRegistry+0x50>)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003418:	490c      	ldr	r1, [pc, #48]	; (800344c <vQueueAddToRegistry+0x50>)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <vQueueAddToRegistry+0x50>)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800342e:	e006      	b.n	800343e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3301      	adds	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b07      	cmp	r3, #7
 800343a:	d9e7      	bls.n	800340c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	2000087c 	.word	0x2000087c

08003450 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003460:	f001 fca8 	bl	8004db4 <vPortEnterCritical>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800346a:	b25b      	sxtb	r3, r3
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d103      	bne.n	800347a <vQueueWaitForMessageRestricted+0x2a>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003480:	b25b      	sxtb	r3, r3
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d103      	bne.n	8003490 <vQueueWaitForMessageRestricted+0x40>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003490:	f001 fcc0 	bl	8004e14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3324      	adds	r3, #36	; 0x24
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fd39 	bl	8003f1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f7ff ff26 	bl	80032fc <prvUnlockQueue>
	}
 80034b0:	bf00      	nop
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08e      	sub	sp, #56	; 0x38
 80034bc:	af04      	add	r7, sp, #16
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	623b      	str	r3, [r7, #32]
}
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xTaskCreateStatic+0x46>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	61fb      	str	r3, [r7, #28]
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034fe:	23a8      	movs	r3, #168	; 0xa8
 8003500:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2ba8      	cmp	r3, #168	; 0xa8
 8003506:	d00a      	beq.n	800351e <xTaskCreateStatic+0x66>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61bb      	str	r3, [r7, #24]
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800351e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01e      	beq.n	8003564 <xTaskCreateStatic+0xac>
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01b      	beq.n	8003564 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003534:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	2202      	movs	r2, #2
 800353a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800353e:	2300      	movs	r3, #0
 8003540:	9303      	str	r3, [sp, #12]
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	9302      	str	r3, [sp, #8]
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f850 	bl	80035fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800355c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800355e:	f000 f8f3 	bl	8003748 <prvAddNewTaskToReadyList>
 8003562:	e001      	b.n	8003568 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003568:	697b      	ldr	r3, [r7, #20]
	}
 800356a:	4618      	mov	r0, r3
 800356c:	3728      	adds	r7, #40	; 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003572:	b580      	push	{r7, lr}
 8003574:	b08c      	sub	sp, #48	; 0x30
 8003576:	af04      	add	r7, sp, #16
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4618      	mov	r0, r3
 8003588:	f001 fd36 	bl	8004ff8 <pvPortMalloc>
 800358c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00e      	beq.n	80035b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003594:	20a8      	movs	r0, #168	; 0xa8
 8003596:	f001 fd2f 	bl	8004ff8 <pvPortMalloc>
 800359a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
 80035a8:	e005      	b.n	80035b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f001 fdf0 	bl	8005190 <vPortFree>
 80035b0:	e001      	b.n	80035b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d017      	beq.n	80035ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	2300      	movs	r3, #0
 80035c8:	9303      	str	r3, [sp, #12]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	9302      	str	r3, [sp, #8]
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f80e 	bl	80035fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035e0:	69f8      	ldr	r0, [r7, #28]
 80035e2:	f000 f8b1 	bl	8003748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e002      	b.n	80035f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035f2:	69bb      	ldr	r3, [r7, #24]
	}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	461a      	mov	r2, r3
 8003614:	21a5      	movs	r1, #165	; 0xa5
 8003616:	f002 f8cf 	bl	80057b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003624:	3b01      	subs	r3, #1
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f023 0307 	bic.w	r3, r3, #7
 8003632:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <prvInitialiseNewTask+0x58>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	617b      	str	r3, [r7, #20]
}
 8003650:	bf00      	nop
 8003652:	e7fe      	b.n	8003652 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01f      	beq.n	800369a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	e012      	b.n	8003686 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	7819      	ldrb	r1, [r3, #0]
 8003668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	3334      	adds	r3, #52	; 0x34
 8003670:	460a      	mov	r2, r1
 8003672:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	3301      	adds	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2b0f      	cmp	r3, #15
 800368a:	d9e9      	bls.n	8003660 <prvInitialiseNewTask+0x64>
 800368c:	e000      	b.n	8003690 <prvInitialiseNewTask+0x94>
			{
				break;
 800368e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003698:	e003      	b.n	80036a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	2b37      	cmp	r3, #55	; 0x37
 80036a6:	d901      	bls.n	80036ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036a8:	2337      	movs	r3, #55	; 0x37
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	2200      	movs	r2, #0
 80036bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	3304      	adds	r3, #4
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff f978 	bl	80029b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	3318      	adds	r3, #24
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff f973 	bl	80029b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	3354      	adds	r3, #84	; 0x54
 80036fc:	224c      	movs	r2, #76	; 0x4c
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f002 f859 	bl	80057b8 <memset>
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	4a0c      	ldr	r2, [pc, #48]	; (800373c <prvInitialiseNewTask+0x140>)
 800370a:	659a      	str	r2, [r3, #88]	; 0x58
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <prvInitialiseNewTask+0x144>)
 8003710:	65da      	str	r2, [r3, #92]	; 0x5c
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <prvInitialiseNewTask+0x148>)
 8003716:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	69b8      	ldr	r0, [r7, #24]
 800371e:	f001 fa19 	bl	8004b54 <pxPortInitialiseStack>
 8003722:	4602      	mov	r2, r0
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003732:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003734:	bf00      	nop
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20004b10 	.word	0x20004b10
 8003740:	20004b78 	.word	0x20004b78
 8003744:	20004be0 	.word	0x20004be0

08003748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003750:	f001 fb30 	bl	8004db4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003754:	4b2d      	ldr	r3, [pc, #180]	; (800380c <prvAddNewTaskToReadyList+0xc4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	4a2c      	ldr	r2, [pc, #176]	; (800380c <prvAddNewTaskToReadyList+0xc4>)
 800375c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800375e:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <prvAddNewTaskToReadyList+0xc8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003766:	4a2a      	ldr	r2, [pc, #168]	; (8003810 <prvAddNewTaskToReadyList+0xc8>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <prvAddNewTaskToReadyList+0xc4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d110      	bne.n	8003796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003774:	f000 fcfe 	bl	8004174 <prvInitialiseTaskLists>
 8003778:	e00d      	b.n	8003796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <prvAddNewTaskToReadyList+0xcc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003782:	4b23      	ldr	r3, [pc, #140]	; (8003810 <prvAddNewTaskToReadyList+0xc8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	429a      	cmp	r2, r3
 800378e:	d802      	bhi.n	8003796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003790:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <prvAddNewTaskToReadyList+0xc8>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <prvAddNewTaskToReadyList+0xd0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <prvAddNewTaskToReadyList+0xd0>)
 800379e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <prvAddNewTaskToReadyList+0xd0>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	4b1b      	ldr	r3, [pc, #108]	; (800381c <prvAddNewTaskToReadyList+0xd4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d903      	bls.n	80037bc <prvAddNewTaskToReadyList+0x74>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	4a18      	ldr	r2, [pc, #96]	; (800381c <prvAddNewTaskToReadyList+0xd4>)
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4a15      	ldr	r2, [pc, #84]	; (8003820 <prvAddNewTaskToReadyList+0xd8>)
 80037ca:	441a      	add	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f7ff f8fd 	bl	80029d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037d8:	f001 fb1c 	bl	8004e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <prvAddNewTaskToReadyList+0xcc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00e      	beq.n	8003802 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <prvAddNewTaskToReadyList+0xc8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d207      	bcs.n	8003802 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <prvAddNewTaskToReadyList+0xdc>)
 80037f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000d90 	.word	0x20000d90
 8003810:	200008bc 	.word	0x200008bc
 8003814:	20000d9c 	.word	0x20000d9c
 8003818:	20000dac 	.word	0x20000dac
 800381c:	20000d98 	.word	0x20000d98
 8003820:	200008c0 	.word	0x200008c0
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003830:	f001 fac0 	bl	8004db4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <vTaskDelete+0x18>
 800383a:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <vTaskDelete+0xc4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e000      	b.n	8003842 <vTaskDelete+0x1a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3304      	adds	r3, #4
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff f91f 	bl	8002a8c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3318      	adds	r3, #24
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff f916 	bl	8002a8c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003860:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <vTaskDelete+0xc8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <vTaskDelete+0xc8>)
 8003868:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800386a:	4b20      	ldr	r3, [pc, #128]	; (80038ec <vTaskDelete+0xc4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d10b      	bne.n	800388c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3304      	adds	r3, #4
 8003878:	4619      	mov	r1, r3
 800387a:	481e      	ldr	r0, [pc, #120]	; (80038f4 <vTaskDelete+0xcc>)
 800387c:	f7ff f8a9 	bl	80029d2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <vTaskDelete+0xd0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <vTaskDelete+0xd0>)
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e009      	b.n	80038a0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <vTaskDelete+0xd4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3b01      	subs	r3, #1
 8003892:	4a1a      	ldr	r2, [pc, #104]	; (80038fc <vTaskDelete+0xd4>)
 8003894:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fcda 	bl	8004250 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800389c:	f000 fd0c 	bl	80042b8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80038a0:	f001 fab8 	bl	8004e14 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80038a4:	4b16      	ldr	r3, [pc, #88]	; (8003900 <vTaskDelete+0xd8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01b      	beq.n	80038e4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <vTaskDelete+0xc4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d116      	bne.n	80038e4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <vTaskDelete+0xdc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <vTaskDelete+0xac>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60bb      	str	r3, [r7, #8]
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <vTaskDelete+0xe0>)
 80038d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200008bc 	.word	0x200008bc
 80038f0:	20000dac 	.word	0x20000dac
 80038f4:	20000d64 	.word	0x20000d64
 80038f8:	20000d78 	.word	0x20000d78
 80038fc:	20000d90 	.word	0x20000d90
 8003900:	20000d9c 	.word	0x20000d9c
 8003904:	20000db8 	.word	0x20000db8
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d017      	beq.n	800394e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <vTaskDelay+0x60>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <vTaskDelay+0x30>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	60bb      	str	r3, [r7, #8]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800393c:	f000 f8f0 	bl	8003b20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003940:	2100      	movs	r1, #0
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fd64 	bl	8004410 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003948:	f000 f8f8 	bl	8003b3c <xTaskResumeAll>
 800394c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <vTaskDelay+0x64>)
 8003956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000db8 	.word	0x20000db8
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <eTaskGetState+0x28>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	60bb      	str	r3, [r7, #8]
}
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800399c:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <eTaskGetState+0xb8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d102      	bne.n	80039ac <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80039a6:	2300      	movs	r3, #0
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e03a      	b.n	8003a22 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80039ac:	f001 fa02 	bl	8004db4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80039b6:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <eTaskGetState+0xbc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80039bc:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <eTaskGetState+0xc0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80039c2:	f001 fa27 	bl	8004e14 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d003      	beq.n	80039d6 <eTaskGetState+0x62>
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d102      	bne.n	80039dc <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80039d6:	2302      	movs	r3, #2
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e022      	b.n	8003a22 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <eTaskGetState+0xc4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d112      	bne.n	8003a0a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d102      	bne.n	80039fe <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80039f8:	2302      	movs	r3, #2
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e011      	b.n	8003a22 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80039fe:	2303      	movs	r3, #3
 8003a00:	77fb      	strb	r3, [r7, #31]
 8003a02:	e00e      	b.n	8003a22 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003a04:	2302      	movs	r3, #2
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e00b      	b.n	8003a22 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <eTaskGetState+0xc8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d002      	beq.n	8003a18 <eTaskGetState+0xa4>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003a18:	2304      	movs	r3, #4
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e001      	b.n	8003a22 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003a22:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	200008bc 	.word	0x200008bc
 8003a30:	20000d48 	.word	0x20000d48
 8003a34:	20000d4c 	.word	0x20000d4c
 8003a38:	20000d7c 	.word	0x20000d7c
 8003a3c:	20000d64 	.word	0x20000d64

08003a40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a4e:	463a      	mov	r2, r7
 8003a50:	1d39      	adds	r1, r7, #4
 8003a52:	f107 0308 	add.w	r3, r7, #8
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe ff5a 	bl	8002910 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a5c:	6839      	ldr	r1, [r7, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	9202      	str	r2, [sp, #8]
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	2300      	movs	r3, #0
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	460a      	mov	r2, r1
 8003a6e:	4924      	ldr	r1, [pc, #144]	; (8003b00 <vTaskStartScheduler+0xc0>)
 8003a70:	4824      	ldr	r0, [pc, #144]	; (8003b04 <vTaskStartScheduler+0xc4>)
 8003a72:	f7ff fd21 	bl	80034b8 <xTaskCreateStatic>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4a23      	ldr	r2, [pc, #140]	; (8003b08 <vTaskStartScheduler+0xc8>)
 8003a7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a7c:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <vTaskStartScheduler+0xc8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e001      	b.n	8003a8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d102      	bne.n	8003a9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a94:	f000 fd10 	bl	80044b8 <xTimerCreateTimerTask>
 8003a98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d11b      	bne.n	8003ad8 <vTaskStartScheduler+0x98>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	613b      	str	r3, [r7, #16]
}
 8003ab2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <vTaskStartScheduler+0xcc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3354      	adds	r3, #84	; 0x54
 8003aba:	4a15      	ldr	r2, [pc, #84]	; (8003b10 <vTaskStartScheduler+0xd0>)
 8003abc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <vTaskStartScheduler+0xd4>)
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ac6:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <vTaskStartScheduler+0xd8>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <vTaskStartScheduler+0xdc>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ad2:	f001 f8cd 	bl	8004c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ad6:	e00e      	b.n	8003af6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d10a      	bne.n	8003af6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	60fb      	str	r3, [r7, #12]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <vTaskStartScheduler+0xb4>
}
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	08005e1c 	.word	0x08005e1c
 8003b04:	08004145 	.word	0x08004145
 8003b08:	20000db4 	.word	0x20000db4
 8003b0c:	200008bc 	.word	0x200008bc
 8003b10:	20000068 	.word	0x20000068
 8003b14:	20000db0 	.word	0x20000db0
 8003b18:	20000d9c 	.word	0x20000d9c
 8003b1c:	20000d94 	.word	0x20000d94

08003b20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <vTaskSuspendAll+0x18>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	4a03      	ldr	r2, [pc, #12]	; (8003b38 <vTaskSuspendAll+0x18>)
 8003b2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	20000db8 	.word	0x20000db8

08003b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b4a:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <xTaskResumeAll+0x118>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	603b      	str	r3, [r7, #0]
}
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b68:	f001 f924 	bl	8004db4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b6c:	4b39      	ldr	r3, [pc, #228]	; (8003c54 <xTaskResumeAll+0x118>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	4a38      	ldr	r2, [pc, #224]	; (8003c54 <xTaskResumeAll+0x118>)
 8003b74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b76:	4b37      	ldr	r3, [pc, #220]	; (8003c54 <xTaskResumeAll+0x118>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d162      	bne.n	8003c44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b7e:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <xTaskResumeAll+0x11c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d05e      	beq.n	8003c44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b86:	e02f      	b.n	8003be8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b88:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <xTaskResumeAll+0x120>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3318      	adds	r3, #24
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fe ff79 	bl	8002a8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe ff74 	bl	8002a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <xTaskResumeAll+0x124>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d903      	bls.n	8003bb8 <xTaskResumeAll+0x7c>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4a2a      	ldr	r2, [pc, #168]	; (8003c60 <xTaskResumeAll+0x124>)
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <xTaskResumeAll+0x128>)
 8003bc6:	441a      	add	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f7fe feff 	bl	80029d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	4b23      	ldr	r3, [pc, #140]	; (8003c68 <xTaskResumeAll+0x12c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003be2:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <xTaskResumeAll+0x130>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003be8:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <xTaskResumeAll+0x120>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1cb      	bne.n	8003b88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bf6:	f000 fb5f 	bl	80042b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <xTaskResumeAll+0x134>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d010      	beq.n	8003c28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c06:	f000 f847 	bl	8003c98 <xTaskIncrementTick>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <xTaskResumeAll+0x130>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f1      	bne.n	8003c06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c22:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <xTaskResumeAll+0x134>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c28:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <xTaskResumeAll+0x130>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <xTaskResumeAll+0x138>)
 8003c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c44:	f001 f8e6 	bl	8004e14 <vPortExitCritical>

	return xAlreadyYielded;
 8003c48:	68bb      	ldr	r3, [r7, #8]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000db8 	.word	0x20000db8
 8003c58:	20000d90 	.word	0x20000d90
 8003c5c:	20000d50 	.word	0x20000d50
 8003c60:	20000d98 	.word	0x20000d98
 8003c64:	200008c0 	.word	0x200008c0
 8003c68:	200008bc 	.word	0x200008bc
 8003c6c:	20000da4 	.word	0x20000da4
 8003c70:	20000da0 	.word	0x20000da0
 8003c74:	e000ed04 	.word	0xe000ed04

08003c78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <xTaskGetTickCount+0x1c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c84:	687b      	ldr	r3, [r7, #4]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000d94 	.word	0x20000d94

08003c98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ca2:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <xTaskIncrementTick+0x148>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 808f 	bne.w	8003dca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cac:	4b4d      	ldr	r3, [pc, #308]	; (8003de4 <xTaskIncrementTick+0x14c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cb4:	4a4b      	ldr	r2, [pc, #300]	; (8003de4 <xTaskIncrementTick+0x14c>)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d120      	bne.n	8003d02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cc0:	4b49      	ldr	r3, [pc, #292]	; (8003de8 <xTaskIncrementTick+0x150>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	603b      	str	r3, [r7, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <xTaskIncrementTick+0x46>
 8003ce0:	4b41      	ldr	r3, [pc, #260]	; (8003de8 <xTaskIncrementTick+0x150>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4b41      	ldr	r3, [pc, #260]	; (8003dec <xTaskIncrementTick+0x154>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a3f      	ldr	r2, [pc, #252]	; (8003de8 <xTaskIncrementTick+0x150>)
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4a3f      	ldr	r2, [pc, #252]	; (8003dec <xTaskIncrementTick+0x154>)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <xTaskIncrementTick+0x158>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	4a3d      	ldr	r2, [pc, #244]	; (8003df0 <xTaskIncrementTick+0x158>)
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	f000 fadb 	bl	80042b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d02:	4b3c      	ldr	r3, [pc, #240]	; (8003df4 <xTaskIncrementTick+0x15c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d349      	bcc.n	8003da0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d0c:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <xTaskIncrementTick+0x150>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d16:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <xTaskIncrementTick+0x15c>)
 8003d18:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1c:	601a      	str	r2, [r3, #0]
					break;
 8003d1e:	e03f      	b.n	8003da0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d20:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <xTaskIncrementTick+0x150>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d203      	bcs.n	8003d40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d38:	4a2e      	ldr	r2, [pc, #184]	; (8003df4 <xTaskIncrementTick+0x15c>)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d3e:	e02f      	b.n	8003da0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	3304      	adds	r3, #4
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fe fea1 	bl	8002a8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	3318      	adds	r3, #24
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fe98 	bl	8002a8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <xTaskIncrementTick+0x160>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d903      	bls.n	8003d70 <xTaskIncrementTick+0xd8>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <xTaskIncrementTick+0x160>)
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4a1f      	ldr	r2, [pc, #124]	; (8003dfc <xTaskIncrementTick+0x164>)
 8003d7e:	441a      	add	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f7fe fe23 	bl	80029d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <xTaskIncrementTick+0x168>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d3b8      	bcc.n	8003d0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9e:	e7b5      	b.n	8003d0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003da0:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <xTaskIncrementTick+0x168>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da6:	4915      	ldr	r1, [pc, #84]	; (8003dfc <xTaskIncrementTick+0x164>)
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d901      	bls.n	8003dbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003db8:	2301      	movs	r3, #1
 8003dba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <xTaskIncrementTick+0x16c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e004      	b.n	8003dd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <xTaskIncrementTick+0x170>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	4a0d      	ldr	r2, [pc, #52]	; (8003e08 <xTaskIncrementTick+0x170>)
 8003dd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003dd4:	697b      	ldr	r3, [r7, #20]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000db8 	.word	0x20000db8
 8003de4:	20000d94 	.word	0x20000d94
 8003de8:	20000d48 	.word	0x20000d48
 8003dec:	20000d4c 	.word	0x20000d4c
 8003df0:	20000da8 	.word	0x20000da8
 8003df4:	20000db0 	.word	0x20000db0
 8003df8:	20000d98 	.word	0x20000d98
 8003dfc:	200008c0 	.word	0x200008c0
 8003e00:	200008bc 	.word	0x200008bc
 8003e04:	20000da4 	.word	0x20000da4
 8003e08:	20000da0 	.word	0x20000da0

08003e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e12:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <vTaskSwitchContext+0xb0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e1a:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <vTaskSwitchContext+0xb4>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e20:	e046      	b.n	8003eb0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <vTaskSwitchContext+0xb4>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e28:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <vTaskSwitchContext+0xb8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	e010      	b.n	8003e52 <vTaskSwitchContext+0x46>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <vTaskSwitchContext+0x40>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	607b      	str	r3, [r7, #4]
}
 8003e48:	bf00      	nop
 8003e4a:	e7fe      	b.n	8003e4a <vTaskSwitchContext+0x3e>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	491d      	ldr	r1, [pc, #116]	; (8003ec8 <vTaskSwitchContext+0xbc>)
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0e4      	beq.n	8003e30 <vTaskSwitchContext+0x24>
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <vTaskSwitchContext+0xbc>)
 8003e72:	4413      	add	r3, r2
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	3308      	adds	r3, #8
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d104      	bne.n	8003e96 <vTaskSwitchContext+0x8a>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <vTaskSwitchContext+0xc0>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <vTaskSwitchContext+0xb8>)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <vTaskSwitchContext+0xc0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3354      	adds	r3, #84	; 0x54
 8003eac:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <vTaskSwitchContext+0xc4>)
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20000db8 	.word	0x20000db8
 8003ec0:	20000da4 	.word	0x20000da4
 8003ec4:	20000d98 	.word	0x20000d98
 8003ec8:	200008c0 	.word	0x200008c0
 8003ecc:	200008bc 	.word	0x200008bc
 8003ed0:	20000068 	.word	0x20000068

08003ed4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	60fb      	str	r3, [r7, #12]
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <vTaskPlaceOnEventList+0x44>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3318      	adds	r3, #24
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fe fd89 	bl	8002a1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f08:	2101      	movs	r1, #1
 8003f0a:	6838      	ldr	r0, [r7, #0]
 8003f0c:	f000 fa80 	bl	8004410 <prvAddCurrentTaskToDelayedList>
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200008bc 	.word	0x200008bc

08003f1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	617b      	str	r3, [r7, #20]
}
 8003f40:	bf00      	nop
 8003f42:	e7fe      	b.n	8003f42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3318      	adds	r3, #24
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7fe fd40 	bl	80029d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f58:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	68b8      	ldr	r0, [r7, #8]
 8003f62:	f000 fa55 	bl	8004410 <prvAddCurrentTaskToDelayedList>
	}
 8003f66:	bf00      	nop
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200008bc 	.word	0x200008bc

08003f74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60fb      	str	r3, [r7, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe fd71 	bl	8002a8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003faa:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <xTaskRemoveFromEventList+0xb0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11d      	bne.n	8003fee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fd68 	bl	8002a8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <xTaskRemoveFromEventList+0xb4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d903      	bls.n	8003fd0 <xTaskRemoveFromEventList+0x5c>
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	4a16      	ldr	r2, [pc, #88]	; (8004028 <xTaskRemoveFromEventList+0xb4>)
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4a13      	ldr	r2, [pc, #76]	; (800402c <xTaskRemoveFromEventList+0xb8>)
 8003fde:	441a      	add	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f7fe fcf3 	bl	80029d2 <vListInsertEnd>
 8003fec:	e005      	b.n	8003ffa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	480e      	ldr	r0, [pc, #56]	; (8004030 <xTaskRemoveFromEventList+0xbc>)
 8003ff6:	f7fe fcec 	bl	80029d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <xTaskRemoveFromEventList+0xc0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	429a      	cmp	r2, r3
 8004006:	d905      	bls.n	8004014 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <xTaskRemoveFromEventList+0xc4>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e001      	b.n	8004018 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004018:	697b      	ldr	r3, [r7, #20]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000db8 	.word	0x20000db8
 8004028:	20000d98 	.word	0x20000d98
 800402c:	200008c0 	.word	0x200008c0
 8004030:	20000d50 	.word	0x20000d50
 8004034:	200008bc 	.word	0x200008bc
 8004038:	20000da4 	.word	0x20000da4

0800403c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <vTaskInternalSetTimeOutState+0x24>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <vTaskInternalSetTimeOutState+0x28>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	605a      	str	r2, [r3, #4]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	20000da8 	.word	0x20000da8
 8004064:	20000d94 	.word	0x20000d94

08004068 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	613b      	str	r3, [r7, #16]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	60fb      	str	r3, [r7, #12]
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040aa:	f000 fe83 	bl	8004db4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040ae:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <xTaskCheckForTimeOut+0xbc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d102      	bne.n	80040ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e023      	b.n	8004116 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <xTaskCheckForTimeOut+0xc0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d007      	beq.n	80040ea <xTaskCheckForTimeOut+0x82>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	e015      	b.n	8004116 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d20b      	bcs.n	800410c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	1ad2      	subs	r2, r2, r3
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ff9b 	bl	800403c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	e004      	b.n	8004116 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004112:	2301      	movs	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004116:	f000 fe7d 	bl	8004e14 <vPortExitCritical>

	return xReturn;
 800411a:	69fb      	ldr	r3, [r7, #28]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000d94 	.word	0x20000d94
 8004128:	20000da8 	.word	0x20000da8

0800412c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <vTaskMissedYield+0x14>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]
}
 8004136:	bf00      	nop
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	20000da4 	.word	0x20000da4

08004144 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800414c:	f000 f852 	bl	80041f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <prvIdleTask+0x28>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d9f9      	bls.n	800414c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <prvIdleTask+0x2c>)
 800415a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004168:	e7f0      	b.n	800414c <prvIdleTask+0x8>
 800416a:	bf00      	nop
 800416c:	200008c0 	.word	0x200008c0
 8004170:	e000ed04 	.word	0xe000ed04

08004174 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	e00c      	b.n	800419a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <prvInitialiseTaskLists+0x60>)
 800418c:	4413      	add	r3, r2
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe fbf2 	bl	8002978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3301      	adds	r3, #1
 8004198:	607b      	str	r3, [r7, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b37      	cmp	r3, #55	; 0x37
 800419e:	d9ef      	bls.n	8004180 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041a0:	480d      	ldr	r0, [pc, #52]	; (80041d8 <prvInitialiseTaskLists+0x64>)
 80041a2:	f7fe fbe9 	bl	8002978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041a6:	480d      	ldr	r0, [pc, #52]	; (80041dc <prvInitialiseTaskLists+0x68>)
 80041a8:	f7fe fbe6 	bl	8002978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041ac:	480c      	ldr	r0, [pc, #48]	; (80041e0 <prvInitialiseTaskLists+0x6c>)
 80041ae:	f7fe fbe3 	bl	8002978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041b2:	480c      	ldr	r0, [pc, #48]	; (80041e4 <prvInitialiseTaskLists+0x70>)
 80041b4:	f7fe fbe0 	bl	8002978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041b8:	480b      	ldr	r0, [pc, #44]	; (80041e8 <prvInitialiseTaskLists+0x74>)
 80041ba:	f7fe fbdd 	bl	8002978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <prvInitialiseTaskLists+0x78>)
 80041c0:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <prvInitialiseTaskLists+0x64>)
 80041c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <prvInitialiseTaskLists+0x7c>)
 80041c6:	4a05      	ldr	r2, [pc, #20]	; (80041dc <prvInitialiseTaskLists+0x68>)
 80041c8:	601a      	str	r2, [r3, #0]
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200008c0 	.word	0x200008c0
 80041d8:	20000d20 	.word	0x20000d20
 80041dc:	20000d34 	.word	0x20000d34
 80041e0:	20000d50 	.word	0x20000d50
 80041e4:	20000d64 	.word	0x20000d64
 80041e8:	20000d7c 	.word	0x20000d7c
 80041ec:	20000d48 	.word	0x20000d48
 80041f0:	20000d4c 	.word	0x20000d4c

080041f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041fa:	e019      	b.n	8004230 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041fc:	f000 fdda 	bl	8004db4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004200:	4b10      	ldr	r3, [pc, #64]	; (8004244 <prvCheckTasksWaitingTermination+0x50>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fc3d 	bl	8002a8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <prvCheckTasksWaitingTermination+0x54>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3b01      	subs	r3, #1
 8004218:	4a0b      	ldr	r2, [pc, #44]	; (8004248 <prvCheckTasksWaitingTermination+0x54>)
 800421a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <prvCheckTasksWaitingTermination+0x58>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3b01      	subs	r3, #1
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <prvCheckTasksWaitingTermination+0x58>)
 8004224:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004226:	f000 fdf5 	bl	8004e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f810 	bl	8004250 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <prvCheckTasksWaitingTermination+0x58>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e1      	bne.n	80041fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000d64 	.word	0x20000d64
 8004248:	20000d90 	.word	0x20000d90
 800424c:	20000d78 	.word	0x20000d78

08004250 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3354      	adds	r3, #84	; 0x54
 800425c:	4618      	mov	r0, r3
 800425e:	f001 fac3 	bl	80057e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004268:	2b00      	cmp	r3, #0
 800426a:	d108      	bne.n	800427e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	4618      	mov	r0, r3
 8004272:	f000 ff8d 	bl	8005190 <vPortFree>
				vPortFree( pxTCB );
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 ff8a 	bl	8005190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800427c:	e018      	b.n	80042b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004284:	2b01      	cmp	r3, #1
 8004286:	d103      	bne.n	8004290 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 ff81 	bl	8005190 <vPortFree>
	}
 800428e:	e00f      	b.n	80042b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004296:	2b02      	cmp	r3, #2
 8004298:	d00a      	beq.n	80042b0 <prvDeleteTCB+0x60>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	60fb      	str	r3, [r7, #12]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <prvDeleteTCB+0x5e>
	}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <prvResetNextTaskUnblockTime+0x38>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <prvResetNextTaskUnblockTime+0x3c>)
 80042ca:	f04f 32ff 	mov.w	r2, #4294967295
 80042ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042d0:	e008      	b.n	80042e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <prvResetNextTaskUnblockTime+0x38>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <prvResetNextTaskUnblockTime+0x3c>)
 80042e2:	6013      	str	r3, [r2, #0]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	20000d48 	.word	0x20000d48
 80042f4:	20000db0 	.word	0x20000db0

080042f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <xTaskGetSchedulerState+0x34>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004306:	2301      	movs	r3, #1
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	e008      	b.n	800431e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <xTaskGetSchedulerState+0x38>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004314:	2302      	movs	r3, #2
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	e001      	b.n	800431e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800431e:	687b      	ldr	r3, [r7, #4]
	}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	20000d9c 	.word	0x20000d9c
 8004330:	20000db8 	.word	0x20000db8

08004334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d056      	beq.n	80043f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800434a:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <xTaskPriorityDisinherit+0xd0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	429a      	cmp	r2, r3
 8004352:	d00a      	beq.n	800436a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	60bb      	str	r3, [r7, #8]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438c:	1e5a      	subs	r2, r3, #1
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	429a      	cmp	r2, r3
 800439c:	d02c      	beq.n	80043f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d128      	bne.n	80043f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe fb6e 	bl	8002a8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <xTaskPriorityDisinherit+0xd4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d903      	bls.n	80043d8 <xTaskPriorityDisinherit+0xa4>
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	4a0c      	ldr	r2, [pc, #48]	; (8004408 <xTaskPriorityDisinherit+0xd4>)
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4a09      	ldr	r2, [pc, #36]	; (800440c <xTaskPriorityDisinherit+0xd8>)
 80043e6:	441a      	add	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f7fe faef 	bl	80029d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043f4:	2301      	movs	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043f8:	697b      	ldr	r3, [r7, #20]
	}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200008bc 	.word	0x200008bc
 8004408:	20000d98 	.word	0x20000d98
 800440c:	200008c0 	.word	0x200008c0

08004410 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004420:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3304      	adds	r3, #4
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fb30 	bl	8002a8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004432:	d10a      	bne.n	800444a <prvAddCurrentTaskToDelayedList+0x3a>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3304      	adds	r3, #4
 8004440:	4619      	mov	r1, r3
 8004442:	4819      	ldr	r0, [pc, #100]	; (80044a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004444:	f7fe fac5 	bl	80029d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004448:	e026      	b.n	8004498 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	429a      	cmp	r2, r3
 8004460:	d209      	bcs.n	8004476 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f7fe fad3 	bl	8002a1a <vListInsert>
}
 8004474:	e010      	b.n	8004498 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004476:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4610      	mov	r0, r2
 8004484:	f7fe fac9 	bl	8002a1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	d202      	bcs.n	8004498 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004492:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6013      	str	r3, [r2, #0]
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000d94 	.word	0x20000d94
 80044a4:	200008bc 	.word	0x200008bc
 80044a8:	20000d7c 	.word	0x20000d7c
 80044ac:	20000d4c 	.word	0x20000d4c
 80044b0:	20000d48 	.word	0x20000d48
 80044b4:	20000db0 	.word	0x20000db0

080044b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044c2:	f000 fb07 	bl	8004ad4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044c6:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <xTimerCreateTimerTask+0x80>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d021      	beq.n	8004512 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044d6:	1d3a      	adds	r2, r7, #4
 80044d8:	f107 0108 	add.w	r1, r7, #8
 80044dc:	f107 030c 	add.w	r3, r7, #12
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fa2f 	bl	8002944 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	9202      	str	r2, [sp, #8]
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	2302      	movs	r3, #2
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2300      	movs	r3, #0
 80044f6:	460a      	mov	r2, r1
 80044f8:	4910      	ldr	r1, [pc, #64]	; (800453c <xTimerCreateTimerTask+0x84>)
 80044fa:	4811      	ldr	r0, [pc, #68]	; (8004540 <xTimerCreateTimerTask+0x88>)
 80044fc:	f7fe ffdc 	bl	80034b8 <xTaskCreateStatic>
 8004500:	4603      	mov	r3, r0
 8004502:	4a10      	ldr	r2, [pc, #64]	; (8004544 <xTimerCreateTimerTask+0x8c>)
 8004504:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <xTimerCreateTimerTask+0x8c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800450e:	2301      	movs	r3, #1
 8004510:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	613b      	str	r3, [r7, #16]
}
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800452e:	697b      	ldr	r3, [r7, #20]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000dec 	.word	0x20000dec
 800453c:	08005e24 	.word	0x08005e24
 8004540:	0800467d 	.word	0x0800467d
 8004544:	20000df0 	.word	0x20000df0

08004548 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	623b      	str	r3, [r7, #32]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004576:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <xTimerGenericCommand+0x98>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d02a      	beq.n	80045d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b05      	cmp	r3, #5
 800458e:	dc18      	bgt.n	80045c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004590:	f7ff feb2 	bl	80042f8 <xTaskGetSchedulerState>
 8004594:	4603      	mov	r3, r0
 8004596:	2b02      	cmp	r3, #2
 8004598:	d109      	bne.n	80045ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <xTimerGenericCommand+0x98>)
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	f107 0110 	add.w	r1, r7, #16
 80045a2:	2300      	movs	r3, #0
 80045a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a6:	f7fe fb9f 	bl	8002ce8 <xQueueGenericSend>
 80045aa:	6278      	str	r0, [r7, #36]	; 0x24
 80045ac:	e012      	b.n	80045d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045ae:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <xTimerGenericCommand+0x98>)
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	f107 0110 	add.w	r1, r7, #16
 80045b6:	2300      	movs	r3, #0
 80045b8:	2200      	movs	r2, #0
 80045ba:	f7fe fb95 	bl	8002ce8 <xQueueGenericSend>
 80045be:	6278      	str	r0, [r7, #36]	; 0x24
 80045c0:	e008      	b.n	80045d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045c2:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <xTimerGenericCommand+0x98>)
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	f107 0110 	add.w	r1, r7, #16
 80045ca:	2300      	movs	r3, #0
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	f7fe fc89 	bl	8002ee4 <xQueueGenericSendFromISR>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3728      	adds	r7, #40	; 0x28
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000dec 	.word	0x20000dec

080045e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ee:	4b22      	ldr	r3, [pc, #136]	; (8004678 <prvProcessExpiredTimer+0x94>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fa45 	bl	8002a8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d022      	beq.n	8004656 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	699a      	ldr	r2, [r3, #24]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	18d1      	adds	r1, r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	6978      	ldr	r0, [r7, #20]
 800461e:	f000 f8d1 	bl	80047c4 <prvInsertTimerInActiveList>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01f      	beq.n	8004668 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004628:	2300      	movs	r3, #0
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	2300      	movs	r3, #0
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	2100      	movs	r1, #0
 8004632:	6978      	ldr	r0, [r7, #20]
 8004634:	f7ff ff88 	bl	8004548 <xTimerGenericCommand>
 8004638:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d113      	bne.n	8004668 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	60fb      	str	r3, [r7, #12]
}
 8004652:	bf00      	nop
 8004654:	e7fe      	b.n	8004654 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	b2da      	uxtb	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	6978      	ldr	r0, [r7, #20]
 800466e:	4798      	blx	r3
}
 8004670:	bf00      	nop
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000de4 	.word	0x20000de4

0800467c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004684:	f107 0308 	add.w	r3, r7, #8
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f857 	bl	800473c <prvGetNextExpireTime>
 800468e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4619      	mov	r1, r3
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f803 	bl	80046a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800469a:	f000 f8d5 	bl	8004848 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800469e:	e7f1      	b.n	8004684 <prvTimerTask+0x8>

080046a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046aa:	f7ff fa39 	bl	8003b20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046ae:	f107 0308 	add.w	r3, r7, #8
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 f866 	bl	8004784 <prvSampleTimeNow>
 80046b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d130      	bne.n	8004722 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <prvProcessTimerOrBlockTask+0x3c>
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d806      	bhi.n	80046dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046ce:	f7ff fa35 	bl	8003b3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046d2:	68f9      	ldr	r1, [r7, #12]
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ff85 	bl	80045e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046da:	e024      	b.n	8004726 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046e2:	4b13      	ldr	r3, [pc, #76]	; (8004730 <prvProcessTimerOrBlockTask+0x90>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <prvProcessTimerOrBlockTask+0x50>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <prvProcessTimerOrBlockTask+0x52>
 80046f0:	2300      	movs	r3, #0
 80046f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <prvProcessTimerOrBlockTask+0x94>)
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	4619      	mov	r1, r3
 8004702:	f7fe fea5 	bl	8003450 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004706:	f7ff fa19 	bl	8003b3c <xTaskResumeAll>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <prvProcessTimerOrBlockTask+0x98>)
 8004712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
}
 8004720:	e001      	b.n	8004726 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004722:	f7ff fa0b 	bl	8003b3c <xTaskResumeAll>
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000de8 	.word	0x20000de8
 8004734:	20000dec 	.word	0x20000dec
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004744:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <prvGetNextExpireTime+0x44>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <prvGetNextExpireTime+0x16>
 800474e:	2201      	movs	r2, #1
 8004750:	e000      	b.n	8004754 <prvGetNextExpireTime+0x18>
 8004752:	2200      	movs	r2, #0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <prvGetNextExpireTime+0x44>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	e001      	b.n	8004770 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004770:	68fb      	ldr	r3, [r7, #12]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000de4 	.word	0x20000de4

08004784 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800478c:	f7ff fa74 	bl	8003c78 <xTaskGetTickCount>
 8004790:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <prvSampleTimeNow+0x3c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	429a      	cmp	r2, r3
 800479a:	d205      	bcs.n	80047a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800479c:	f000 f936 	bl	8004a0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	e002      	b.n	80047ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047ae:	4a04      	ldr	r2, [pc, #16]	; (80047c0 <prvSampleTimeNow+0x3c>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047b4:	68fb      	ldr	r3, [r7, #12]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000df4 	.word	0x20000df4

080047c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d812      	bhi.n	8004810 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	1ad2      	subs	r2, r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d302      	bcc.n	80047fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e01b      	b.n	8004836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <prvInsertTimerInActiveList+0x7c>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f7fe f906 	bl	8002a1a <vListInsert>
 800480e:	e012      	b.n	8004836 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d206      	bcs.n	8004826 <prvInsertTimerInActiveList+0x62>
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d302      	bcc.n	8004826 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004820:	2301      	movs	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	e007      	b.n	8004836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <prvInsertTimerInActiveList+0x80>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f7fe f8f2 	bl	8002a1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004836:	697b      	ldr	r3, [r7, #20]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000de8 	.word	0x20000de8
 8004844:	20000de4 	.word	0x20000de4

08004848 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08e      	sub	sp, #56	; 0x38
 800484c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800484e:	e0ca      	b.n	80049e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	da18      	bge.n	8004888 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	3304      	adds	r3, #4
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	61fb      	str	r3, [r7, #28]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800487e:	6850      	ldr	r0, [r2, #4]
 8004880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004882:	6892      	ldr	r2, [r2, #8]
 8004884:	4611      	mov	r1, r2
 8004886:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f2c0 80ab 	blt.w	80049e6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	3304      	adds	r3, #4
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe f8f3 	bl	8002a8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048a6:	463b      	mov	r3, r7
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff ff6b 	bl	8004784 <prvSampleTimeNow>
 80048ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b09      	cmp	r3, #9
 80048b4:	f200 8096 	bhi.w	80049e4 <prvProcessReceivedCommands+0x19c>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <prvProcessReceivedCommands+0x78>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048e9 	.word	0x080048e9
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	080048e9 	.word	0x080048e9
 80048cc:	0800495d 	.word	0x0800495d
 80048d0:	08004971 	.word	0x08004971
 80048d4:	080049bb 	.word	0x080049bb
 80048d8:	080048e9 	.word	0x080048e9
 80048dc:	080048e9 	.word	0x080048e9
 80048e0:	0800495d 	.word	0x0800495d
 80048e4:	08004971 	.word	0x08004971
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	18d1      	adds	r1, r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004908:	f7ff ff5c 	bl	80047c4 <prvInsertTimerInActiveList>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d069      	beq.n	80049e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004918:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d05e      	beq.n	80049e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	441a      	add	r2, r3
 8004930:	2300      	movs	r3, #0
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	2300      	movs	r3, #0
 8004936:	2100      	movs	r1, #0
 8004938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800493a:	f7ff fe05 	bl	8004548 <xTimerGenericCommand>
 800493e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d14f      	bne.n	80049e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	61bb      	str	r3, [r7, #24]
}
 8004958:	bf00      	nop
 800495a:	e7fe      	b.n	800495a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	b2da      	uxtb	r2, r3
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800496e:	e03a      	b.n	80049e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	b2da      	uxtb	r2, r3
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	617b      	str	r3, [r7, #20]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	18d1      	adds	r1, r2, r3
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b4:	f7ff ff06 	bl	80047c4 <prvInsertTimerInActiveList>
					break;
 80049b8:	e015      	b.n	80049e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80049c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ca:	f000 fbe1 	bl	8005190 <vPortFree>
 80049ce:	e00a      	b.n	80049e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049e2:	e000      	b.n	80049e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80049e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <prvProcessReceivedCommands+0x1c0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	1d39      	adds	r1, r7, #4
 80049ec:	2200      	movs	r2, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fb14 	bl	800301c <xQueueReceive>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f47f af2a 	bne.w	8004850 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	3730      	adds	r7, #48	; 0x30
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000dec 	.word	0x20000dec

08004a0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a12:	e048      	b.n	8004aa6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a14:	4b2d      	ldr	r3, [pc, #180]	; (8004acc <prvSwitchTimerLists+0xc0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a1e:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <prvSwitchTimerLists+0xc0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe f82d 	bl	8002a8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d02e      	beq.n	8004aa6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4413      	add	r3, r2
 8004a50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d90e      	bls.n	8004a78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a66:	4b19      	ldr	r3, [pc, #100]	; (8004acc <prvSwitchTimerLists+0xc0>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f7fd ffd2 	bl	8002a1a <vListInsert>
 8004a76:	e016      	b.n	8004aa6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	2100      	movs	r1, #0
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff fd60 	bl	8004548 <xTimerGenericCommand>
 8004a88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	603b      	str	r3, [r7, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aa6:	4b09      	ldr	r3, [pc, #36]	; (8004acc <prvSwitchTimerLists+0xc0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1b1      	bne.n	8004a14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <prvSwitchTimerLists+0xc0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <prvSwitchTimerLists+0xc4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a04      	ldr	r2, [pc, #16]	; (8004acc <prvSwitchTimerLists+0xc0>)
 8004abc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004abe:	4a04      	ldr	r2, [pc, #16]	; (8004ad0 <prvSwitchTimerLists+0xc4>)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000de4 	.word	0x20000de4
 8004ad0:	20000de8 	.word	0x20000de8

08004ad4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ada:	f000 f96b 	bl	8004db4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ade:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <prvCheckForValidListAndQueue+0x60>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d120      	bne.n	8004b28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ae6:	4814      	ldr	r0, [pc, #80]	; (8004b38 <prvCheckForValidListAndQueue+0x64>)
 8004ae8:	f7fd ff46 	bl	8002978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004aec:	4813      	ldr	r0, [pc, #76]	; (8004b3c <prvCheckForValidListAndQueue+0x68>)
 8004aee:	f7fd ff43 	bl	8002978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004af2:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <prvCheckForValidListAndQueue+0x6c>)
 8004af4:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <prvCheckForValidListAndQueue+0x64>)
 8004af6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <prvCheckForValidListAndQueue+0x70>)
 8004afa:	4a10      	ldr	r2, [pc, #64]	; (8004b3c <prvCheckForValidListAndQueue+0x68>)
 8004afc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004afe:	2300      	movs	r3, #0
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <prvCheckForValidListAndQueue+0x74>)
 8004b04:	4a11      	ldr	r2, [pc, #68]	; (8004b4c <prvCheckForValidListAndQueue+0x78>)
 8004b06:	2110      	movs	r1, #16
 8004b08:	200a      	movs	r0, #10
 8004b0a:	f7fe f851 	bl	8002bb0 <xQueueGenericCreateStatic>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <prvCheckForValidListAndQueue+0x60>)
 8004b12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <prvCheckForValidListAndQueue+0x60>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <prvCheckForValidListAndQueue+0x60>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	490b      	ldr	r1, [pc, #44]	; (8004b50 <prvCheckForValidListAndQueue+0x7c>)
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe fc6a 	bl	80033fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b28:	f000 f974 	bl	8004e14 <vPortExitCritical>
}
 8004b2c:	bf00      	nop
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000dec 	.word	0x20000dec
 8004b38:	20000dbc 	.word	0x20000dbc
 8004b3c:	20000dd0 	.word	0x20000dd0
 8004b40:	20000de4 	.word	0x20000de4
 8004b44:	20000de8 	.word	0x20000de8
 8004b48:	20000e98 	.word	0x20000e98
 8004b4c:	20000df8 	.word	0x20000df8
 8004b50:	08005e2c 	.word	0x08005e2c

08004b54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3b04      	subs	r3, #4
 8004b64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b04      	subs	r3, #4
 8004b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f023 0201 	bic.w	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3b04      	subs	r3, #4
 8004b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b84:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <pxPortInitialiseStack+0x64>)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3b14      	subs	r3, #20
 8004b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3b04      	subs	r3, #4
 8004b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f06f 0202 	mvn.w	r2, #2
 8004ba2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3b20      	subs	r3, #32
 8004ba8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	08004bbd 	.word	0x08004bbd

08004bbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <prvTaskExitError+0x54>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d00a      	beq.n	8004be6 <prvTaskExitError+0x2a>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	60fb      	str	r3, [r7, #12]
}
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <prvTaskExitError+0x28>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60bb      	str	r3, [r7, #8]
}
 8004bf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bfa:	bf00      	nop
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0fc      	beq.n	8004bfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	2000000c 	.word	0x2000000c
	...

08004c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <pxCurrentTCBConst2>)
 8004c22:	6819      	ldr	r1, [r3, #0]
 8004c24:	6808      	ldr	r0, [r1, #0]
 8004c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2a:	f380 8809 	msr	PSP, r0
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8811 	msr	BASEPRI, r0
 8004c3a:	4770      	bx	lr
 8004c3c:	f3af 8000 	nop.w

08004c40 <pxCurrentTCBConst2>:
 8004c40:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c48:	4808      	ldr	r0, [pc, #32]	; (8004c6c <prvPortStartFirstTask+0x24>)
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	6800      	ldr	r0, [r0, #0]
 8004c4e:	f380 8808 	msr	MSP, r0
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8814 	msr	CONTROL, r0
 8004c5a:	b662      	cpsie	i
 8004c5c:	b661      	cpsie	f
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	df00      	svc	0
 8004c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c6a:	bf00      	nop
 8004c6c:	e000ed08 	.word	0xe000ed08

08004c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c76:	4b46      	ldr	r3, [pc, #280]	; (8004d90 <xPortStartScheduler+0x120>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a46      	ldr	r2, [pc, #280]	; (8004d94 <xPortStartScheduler+0x124>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10a      	bne.n	8004c96 <xPortStartScheduler+0x26>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	613b      	str	r3, [r7, #16]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c96:	4b3e      	ldr	r3, [pc, #248]	; (8004d90 <xPortStartScheduler+0x120>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a3f      	ldr	r2, [pc, #252]	; (8004d98 <xPortStartScheduler+0x128>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10a      	bne.n	8004cb6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	60fb      	str	r3, [r7, #12]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cb6:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <xPortStartScheduler+0x12c>)
 8004cb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	22ff      	movs	r2, #255	; 0xff
 8004cc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <xPortStartScheduler+0x130>)
 8004cdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cde:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <xPortStartScheduler+0x134>)
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ce4:	e009      	b.n	8004cfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ce6:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <xPortStartScheduler+0x134>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	4a2d      	ldr	r2, [pc, #180]	; (8004da4 <xPortStartScheduler+0x134>)
 8004cee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d0ef      	beq.n	8004ce6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d06:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <xPortStartScheduler+0x134>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f1c3 0307 	rsb	r3, r3, #7
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d00a      	beq.n	8004d28 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60bb      	str	r3, [r7, #8]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d28:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <xPortStartScheduler+0x134>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <xPortStartScheduler+0x134>)
 8004d30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d32:	4b1c      	ldr	r3, [pc, #112]	; (8004da4 <xPortStartScheduler+0x134>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <xPortStartScheduler+0x134>)
 8004d3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d46:	4b18      	ldr	r3, [pc, #96]	; (8004da8 <xPortStartScheduler+0x138>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <xPortStartScheduler+0x138>)
 8004d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <xPortStartScheduler+0x138>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <xPortStartScheduler+0x138>)
 8004d58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d5e:	f000 f8dd 	bl	8004f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <xPortStartScheduler+0x13c>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d68:	f000 f8fc 	bl	8004f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <xPortStartScheduler+0x140>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0f      	ldr	r2, [pc, #60]	; (8004db0 <xPortStartScheduler+0x140>)
 8004d72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d78:	f7ff ff66 	bl	8004c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d7c:	f7ff f846 	bl	8003e0c <vTaskSwitchContext>
	prvTaskExitError();
 8004d80:	f7ff ff1c 	bl	8004bbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	e000ed00 	.word	0xe000ed00
 8004d94:	410fc271 	.word	0x410fc271
 8004d98:	410fc270 	.word	0x410fc270
 8004d9c:	e000e400 	.word	0xe000e400
 8004da0:	20000ee8 	.word	0x20000ee8
 8004da4:	20000eec 	.word	0x20000eec
 8004da8:	e000ed20 	.word	0xe000ed20
 8004dac:	2000000c 	.word	0x2000000c
 8004db0:	e000ef34 	.word	0xe000ef34

08004db4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	607b      	str	r3, [r7, #4]
}
 8004dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <vPortEnterCritical+0x58>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	4a0d      	ldr	r2, [pc, #52]	; (8004e0c <vPortEnterCritical+0x58>)
 8004dd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <vPortEnterCritical+0x58>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d10f      	bne.n	8004e00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <vPortEnterCritical+0x5c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	603b      	str	r3, [r7, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <vPortEnterCritical+0x4a>
	}
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	2000000c 	.word	0x2000000c
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <vPortExitCritical+0x50>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <vPortExitCritical+0x24>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	607b      	str	r3, [r7, #4]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <vPortExitCritical+0x50>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <vPortExitCritical+0x50>)
 8004e40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e42:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <vPortExitCritical+0x50>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d105      	bne.n	8004e56 <vPortExitCritical+0x42>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f383 8811 	msr	BASEPRI, r3
}
 8004e54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	2000000c 	.word	0x2000000c
	...

08004e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e70:	f3ef 8009 	mrs	r0, PSP
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <pxCurrentTCBConst>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	f01e 0f10 	tst.w	lr, #16
 8004e80:	bf08      	it	eq
 8004e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e94:	f380 8811 	msr	BASEPRI, r0
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f7fe ffb4 	bl	8003e0c <vTaskSwitchContext>
 8004ea4:	f04f 0000 	mov.w	r0, #0
 8004ea8:	f380 8811 	msr	BASEPRI, r0
 8004eac:	bc09      	pop	{r0, r3}
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	6808      	ldr	r0, [r1, #0]
 8004eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb6:	f01e 0f10 	tst.w	lr, #16
 8004eba:	bf08      	it	eq
 8004ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ec0:	f380 8809 	msr	PSP, r0
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst>:
 8004ed0:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
}
 8004ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ef2:	f7fe fed1 	bl	8003c98 <xTaskIncrementTick>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <xPortSysTickHandler+0x40>)
 8004efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f383 8811 	msr	BASEPRI, r3
}
 8004f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <vPortSetupTimerInterrupt+0x34>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <vPortSetupTimerInterrupt+0x38>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <vPortSetupTimerInterrupt+0x3c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <vPortSetupTimerInterrupt+0x40>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <vPortSetupTimerInterrupt+0x44>)
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <vPortSetupTimerInterrupt+0x34>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010
 8004f54:	e000e018 	.word	0xe000e018
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	10624dd3 	.word	0x10624dd3
 8004f60:	e000e014 	.word	0xe000e014

08004f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f74 <vPortEnableVFP+0x10>
 8004f68:	6801      	ldr	r1, [r0, #0]
 8004f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f6e:	6001      	str	r1, [r0, #0]
 8004f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f72:	bf00      	nop
 8004f74:	e000ed88 	.word	0xe000ed88

08004f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f7e:	f3ef 8305 	mrs	r3, IPSR
 8004f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d914      	bls.n	8004fb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f8a:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <vPortValidateInterruptPriority+0x70>)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f94:	4b15      	ldr	r3, [pc, #84]	; (8004fec <vPortValidateInterruptPriority+0x74>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	7afa      	ldrb	r2, [r7, #11]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d20a      	bcs.n	8004fb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	607b      	str	r3, [r7, #4]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <vPortValidateInterruptPriority+0x78>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <vPortValidateInterruptPriority+0x7c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d90a      	bls.n	8004fda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	603b      	str	r3, [r7, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <vPortValidateInterruptPriority+0x60>
	}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	e000e3f0 	.word	0xe000e3f0
 8004fec:	20000ee8 	.word	0x20000ee8
 8004ff0:	e000ed0c 	.word	0xe000ed0c
 8004ff4:	20000eec 	.word	0x20000eec

08004ff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005004:	f7fe fd8c 	bl	8003b20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005008:	4b5b      	ldr	r3, [pc, #364]	; (8005178 <pvPortMalloc+0x180>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005010:	f000 f920 	bl	8005254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005014:	4b59      	ldr	r3, [pc, #356]	; (800517c <pvPortMalloc+0x184>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	f040 8093 	bne.w	8005148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01d      	beq.n	8005064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005028:	2208      	movs	r2, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4413      	add	r3, r2
 800502e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	2b00      	cmp	r3, #0
 8005038:	d014      	beq.n	8005064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f023 0307 	bic.w	r3, r3, #7
 8005040:	3308      	adds	r3, #8
 8005042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <pvPortMalloc+0x6c>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	617b      	str	r3, [r7, #20]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d06e      	beq.n	8005148 <pvPortMalloc+0x150>
 800506a:	4b45      	ldr	r3, [pc, #276]	; (8005180 <pvPortMalloc+0x188>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d869      	bhi.n	8005148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005074:	4b43      	ldr	r3, [pc, #268]	; (8005184 <pvPortMalloc+0x18c>)
 8005076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005078:	4b42      	ldr	r3, [pc, #264]	; (8005184 <pvPortMalloc+0x18c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800507e:	e004      	b.n	800508a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d903      	bls.n	800509c <pvPortMalloc+0xa4>
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f1      	bne.n	8005080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800509c:	4b36      	ldr	r3, [pc, #216]	; (8005178 <pvPortMalloc+0x180>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d050      	beq.n	8005148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2208      	movs	r2, #8
 80050ac:	4413      	add	r3, r2
 80050ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1ad2      	subs	r2, r2, r3
 80050c0:	2308      	movs	r3, #8
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d91f      	bls.n	8005108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <pvPortMalloc+0xf8>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	613b      	str	r3, [r7, #16]
}
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005102:	69b8      	ldr	r0, [r7, #24]
 8005104:	f000 f908 	bl	8005318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005108:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <pvPortMalloc+0x188>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <pvPortMalloc+0x188>)
 8005114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <pvPortMalloc+0x188>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <pvPortMalloc+0x190>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d203      	bcs.n	800512a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005122:	4b17      	ldr	r3, [pc, #92]	; (8005180 <pvPortMalloc+0x188>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a18      	ldr	r2, [pc, #96]	; (8005188 <pvPortMalloc+0x190>)
 8005128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	4b13      	ldr	r3, [pc, #76]	; (800517c <pvPortMalloc+0x184>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	431a      	orrs	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <pvPortMalloc+0x194>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	4a11      	ldr	r2, [pc, #68]	; (800518c <pvPortMalloc+0x194>)
 8005146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005148:	f7fe fcf8 	bl	8003b3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <pvPortMalloc+0x174>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60fb      	str	r3, [r7, #12]
}
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <pvPortMalloc+0x172>
	return pvReturn;
 800516c:	69fb      	ldr	r3, [r7, #28]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3728      	adds	r7, #40	; 0x28
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20004af8 	.word	0x20004af8
 800517c:	20004b0c 	.word	0x20004b0c
 8005180:	20004afc 	.word	0x20004afc
 8005184:	20004af0 	.word	0x20004af0
 8005188:	20004b00 	.word	0x20004b00
 800518c:	20004b04 	.word	0x20004b04

08005190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d04d      	beq.n	800523e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051a2:	2308      	movs	r3, #8
 80051a4:	425b      	negs	r3, r3
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4413      	add	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	4b24      	ldr	r3, [pc, #144]	; (8005248 <vPortFree+0xb8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <vPortFree+0x44>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	60fb      	str	r3, [r7, #12]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <vPortFree+0x62>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60bb      	str	r3, [r7, #8]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <vPortFree+0xb8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01e      	beq.n	800523e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d11a      	bne.n	800523e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <vPortFree+0xb8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005218:	f7fe fc82 	bl	8003b20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <vPortFree+0xbc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4413      	add	r3, r2
 8005226:	4a09      	ldr	r2, [pc, #36]	; (800524c <vPortFree+0xbc>)
 8005228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800522a:	6938      	ldr	r0, [r7, #16]
 800522c:	f000 f874 	bl	8005318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <vPortFree+0xc0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3301      	adds	r3, #1
 8005236:	4a06      	ldr	r2, [pc, #24]	; (8005250 <vPortFree+0xc0>)
 8005238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800523a:	f7fe fc7f 	bl	8003b3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800523e:	bf00      	nop
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20004b0c 	.word	0x20004b0c
 800524c:	20004afc 	.word	0x20004afc
 8005250:	20004b08 	.word	0x20004b08

08005254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800525a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800525e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005260:	4b27      	ldr	r3, [pc, #156]	; (8005300 <prvHeapInit+0xac>)
 8005262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3307      	adds	r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0307 	bic.w	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <prvHeapInit+0xac>)
 8005284:	4413      	add	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800528c:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <prvHeapInit+0xb0>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <prvHeapInit+0xb0>)
 8005294:	2200      	movs	r2, #0
 8005296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4413      	add	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052a0:	2208      	movs	r2, #8
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <prvHeapInit+0xb4>)
 80052b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <prvHeapInit+0xb4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2200      	movs	r2, #0
 80052bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <prvHeapInit+0xb4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <prvHeapInit+0xb4>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4a0a      	ldr	r2, [pc, #40]	; (800530c <prvHeapInit+0xb8>)
 80052e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <prvHeapInit+0xbc>)
 80052ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052ec:	4b09      	ldr	r3, [pc, #36]	; (8005314 <prvHeapInit+0xc0>)
 80052ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052f2:	601a      	str	r2, [r3, #0]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20000ef0 	.word	0x20000ef0
 8005304:	20004af0 	.word	0x20004af0
 8005308:	20004af8 	.word	0x20004af8
 800530c:	20004b00 	.word	0x20004b00
 8005310:	20004afc 	.word	0x20004afc
 8005314:	20004b0c 	.word	0x20004b0c

08005318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005320:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <prvInsertBlockIntoFreeList+0xac>)
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e002      	b.n	800532c <prvInsertBlockIntoFreeList+0x14>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d8f7      	bhi.n	8005326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	d108      	bne.n	800535a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	441a      	add	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	441a      	add	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d118      	bne.n	80053a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d00d      	beq.n	8005396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e008      	b.n	80053a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005396:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e003      	b.n	80053a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d002      	beq.n	80053b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20004af0 	.word	0x20004af0
 80053c8:	20004af8 	.word	0x20004af8

080053cc <std>:
 80053cc:	2300      	movs	r3, #0
 80053ce:	b510      	push	{r4, lr}
 80053d0:	4604      	mov	r4, r0
 80053d2:	e9c0 3300 	strd	r3, r3, [r0]
 80053d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053da:	6083      	str	r3, [r0, #8]
 80053dc:	8181      	strh	r1, [r0, #12]
 80053de:	6643      	str	r3, [r0, #100]	; 0x64
 80053e0:	81c2      	strh	r2, [r0, #14]
 80053e2:	6183      	str	r3, [r0, #24]
 80053e4:	4619      	mov	r1, r3
 80053e6:	2208      	movs	r2, #8
 80053e8:	305c      	adds	r0, #92	; 0x5c
 80053ea:	f000 f9e5 	bl	80057b8 <memset>
 80053ee:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <std+0x58>)
 80053f0:	6263      	str	r3, [r4, #36]	; 0x24
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <std+0x5c>)
 80053f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80053f6:	4b0d      	ldr	r3, [pc, #52]	; (800542c <std+0x60>)
 80053f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053fa:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <std+0x64>)
 80053fc:	6323      	str	r3, [r4, #48]	; 0x30
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <std+0x68>)
 8005400:	6224      	str	r4, [r4, #32]
 8005402:	429c      	cmp	r4, r3
 8005404:	d006      	beq.n	8005414 <std+0x48>
 8005406:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800540a:	4294      	cmp	r4, r2
 800540c:	d002      	beq.n	8005414 <std+0x48>
 800540e:	33d0      	adds	r3, #208	; 0xd0
 8005410:	429c      	cmp	r4, r3
 8005412:	d105      	bne.n	8005420 <std+0x54>
 8005414:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800541c:	f000 ba9a 	b.w	8005954 <__retarget_lock_init_recursive>
 8005420:	bd10      	pop	{r4, pc}
 8005422:	bf00      	nop
 8005424:	08005609 	.word	0x08005609
 8005428:	0800562b 	.word	0x0800562b
 800542c:	08005663 	.word	0x08005663
 8005430:	08005687 	.word	0x08005687
 8005434:	20004b10 	.word	0x20004b10

08005438 <stdio_exit_handler>:
 8005438:	4a02      	ldr	r2, [pc, #8]	; (8005444 <stdio_exit_handler+0xc>)
 800543a:	4903      	ldr	r1, [pc, #12]	; (8005448 <stdio_exit_handler+0x10>)
 800543c:	4803      	ldr	r0, [pc, #12]	; (800544c <stdio_exit_handler+0x14>)
 800543e:	f000 b869 	b.w	8005514 <_fwalk_sglue>
 8005442:	bf00      	nop
 8005444:	20000010 	.word	0x20000010
 8005448:	08005c75 	.word	0x08005c75
 800544c:	2000001c 	.word	0x2000001c

08005450 <cleanup_stdio>:
 8005450:	6841      	ldr	r1, [r0, #4]
 8005452:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <cleanup_stdio+0x34>)
 8005454:	4299      	cmp	r1, r3
 8005456:	b510      	push	{r4, lr}
 8005458:	4604      	mov	r4, r0
 800545a:	d001      	beq.n	8005460 <cleanup_stdio+0x10>
 800545c:	f000 fc0a 	bl	8005c74 <_fflush_r>
 8005460:	68a1      	ldr	r1, [r4, #8]
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <cleanup_stdio+0x38>)
 8005464:	4299      	cmp	r1, r3
 8005466:	d002      	beq.n	800546e <cleanup_stdio+0x1e>
 8005468:	4620      	mov	r0, r4
 800546a:	f000 fc03 	bl	8005c74 <_fflush_r>
 800546e:	68e1      	ldr	r1, [r4, #12]
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <cleanup_stdio+0x3c>)
 8005472:	4299      	cmp	r1, r3
 8005474:	d004      	beq.n	8005480 <cleanup_stdio+0x30>
 8005476:	4620      	mov	r0, r4
 8005478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800547c:	f000 bbfa 	b.w	8005c74 <_fflush_r>
 8005480:	bd10      	pop	{r4, pc}
 8005482:	bf00      	nop
 8005484:	20004b10 	.word	0x20004b10
 8005488:	20004b78 	.word	0x20004b78
 800548c:	20004be0 	.word	0x20004be0

08005490 <global_stdio_init.part.0>:
 8005490:	b510      	push	{r4, lr}
 8005492:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <global_stdio_init.part.0+0x30>)
 8005494:	4c0b      	ldr	r4, [pc, #44]	; (80054c4 <global_stdio_init.part.0+0x34>)
 8005496:	4a0c      	ldr	r2, [pc, #48]	; (80054c8 <global_stdio_init.part.0+0x38>)
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	4620      	mov	r0, r4
 800549c:	2200      	movs	r2, #0
 800549e:	2104      	movs	r1, #4
 80054a0:	f7ff ff94 	bl	80053cc <std>
 80054a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80054a8:	2201      	movs	r2, #1
 80054aa:	2109      	movs	r1, #9
 80054ac:	f7ff ff8e 	bl	80053cc <std>
 80054b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80054b4:	2202      	movs	r2, #2
 80054b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ba:	2112      	movs	r1, #18
 80054bc:	f7ff bf86 	b.w	80053cc <std>
 80054c0:	20004c48 	.word	0x20004c48
 80054c4:	20004b10 	.word	0x20004b10
 80054c8:	08005439 	.word	0x08005439

080054cc <__sfp_lock_acquire>:
 80054cc:	4801      	ldr	r0, [pc, #4]	; (80054d4 <__sfp_lock_acquire+0x8>)
 80054ce:	f000 ba42 	b.w	8005956 <__retarget_lock_acquire_recursive>
 80054d2:	bf00      	nop
 80054d4:	20004c51 	.word	0x20004c51

080054d8 <__sfp_lock_release>:
 80054d8:	4801      	ldr	r0, [pc, #4]	; (80054e0 <__sfp_lock_release+0x8>)
 80054da:	f000 ba3d 	b.w	8005958 <__retarget_lock_release_recursive>
 80054de:	bf00      	nop
 80054e0:	20004c51 	.word	0x20004c51

080054e4 <__sinit>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	4604      	mov	r4, r0
 80054e8:	f7ff fff0 	bl	80054cc <__sfp_lock_acquire>
 80054ec:	6a23      	ldr	r3, [r4, #32]
 80054ee:	b11b      	cbz	r3, 80054f8 <__sinit+0x14>
 80054f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f4:	f7ff bff0 	b.w	80054d8 <__sfp_lock_release>
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <__sinit+0x28>)
 80054fa:	6223      	str	r3, [r4, #32]
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <__sinit+0x2c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f5      	bne.n	80054f0 <__sinit+0xc>
 8005504:	f7ff ffc4 	bl	8005490 <global_stdio_init.part.0>
 8005508:	e7f2      	b.n	80054f0 <__sinit+0xc>
 800550a:	bf00      	nop
 800550c:	08005451 	.word	0x08005451
 8005510:	20004c48 	.word	0x20004c48

08005514 <_fwalk_sglue>:
 8005514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005518:	4607      	mov	r7, r0
 800551a:	4688      	mov	r8, r1
 800551c:	4614      	mov	r4, r2
 800551e:	2600      	movs	r6, #0
 8005520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005524:	f1b9 0901 	subs.w	r9, r9, #1
 8005528:	d505      	bpl.n	8005536 <_fwalk_sglue+0x22>
 800552a:	6824      	ldr	r4, [r4, #0]
 800552c:	2c00      	cmp	r4, #0
 800552e:	d1f7      	bne.n	8005520 <_fwalk_sglue+0xc>
 8005530:	4630      	mov	r0, r6
 8005532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005536:	89ab      	ldrh	r3, [r5, #12]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d907      	bls.n	800554c <_fwalk_sglue+0x38>
 800553c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005540:	3301      	adds	r3, #1
 8005542:	d003      	beq.n	800554c <_fwalk_sglue+0x38>
 8005544:	4629      	mov	r1, r5
 8005546:	4638      	mov	r0, r7
 8005548:	47c0      	blx	r8
 800554a:	4306      	orrs	r6, r0
 800554c:	3568      	adds	r5, #104	; 0x68
 800554e:	e7e9      	b.n	8005524 <_fwalk_sglue+0x10>

08005550 <_puts_r>:
 8005550:	6a03      	ldr	r3, [r0, #32]
 8005552:	b570      	push	{r4, r5, r6, lr}
 8005554:	6884      	ldr	r4, [r0, #8]
 8005556:	4605      	mov	r5, r0
 8005558:	460e      	mov	r6, r1
 800555a:	b90b      	cbnz	r3, 8005560 <_puts_r+0x10>
 800555c:	f7ff ffc2 	bl	80054e4 <__sinit>
 8005560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005562:	07db      	lsls	r3, r3, #31
 8005564:	d405      	bmi.n	8005572 <_puts_r+0x22>
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	0598      	lsls	r0, r3, #22
 800556a:	d402      	bmi.n	8005572 <_puts_r+0x22>
 800556c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800556e:	f000 f9f2 	bl	8005956 <__retarget_lock_acquire_recursive>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	0719      	lsls	r1, r3, #28
 8005576:	d513      	bpl.n	80055a0 <_puts_r+0x50>
 8005578:	6923      	ldr	r3, [r4, #16]
 800557a:	b18b      	cbz	r3, 80055a0 <_puts_r+0x50>
 800557c:	3e01      	subs	r6, #1
 800557e:	68a3      	ldr	r3, [r4, #8]
 8005580:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005584:	3b01      	subs	r3, #1
 8005586:	60a3      	str	r3, [r4, #8]
 8005588:	b9e9      	cbnz	r1, 80055c6 <_puts_r+0x76>
 800558a:	2b00      	cmp	r3, #0
 800558c:	da2e      	bge.n	80055ec <_puts_r+0x9c>
 800558e:	4622      	mov	r2, r4
 8005590:	210a      	movs	r1, #10
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f87b 	bl	800568e <__swbuf_r>
 8005598:	3001      	adds	r0, #1
 800559a:	d007      	beq.n	80055ac <_puts_r+0x5c>
 800559c:	250a      	movs	r5, #10
 800559e:	e007      	b.n	80055b0 <_puts_r+0x60>
 80055a0:	4621      	mov	r1, r4
 80055a2:	4628      	mov	r0, r5
 80055a4:	f000 f8b0 	bl	8005708 <__swsetup_r>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d0e7      	beq.n	800557c <_puts_r+0x2c>
 80055ac:	f04f 35ff 	mov.w	r5, #4294967295
 80055b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055b2:	07da      	lsls	r2, r3, #31
 80055b4:	d405      	bmi.n	80055c2 <_puts_r+0x72>
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	059b      	lsls	r3, r3, #22
 80055ba:	d402      	bmi.n	80055c2 <_puts_r+0x72>
 80055bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055be:	f000 f9cb 	bl	8005958 <__retarget_lock_release_recursive>
 80055c2:	4628      	mov	r0, r5
 80055c4:	bd70      	pop	{r4, r5, r6, pc}
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	da04      	bge.n	80055d4 <_puts_r+0x84>
 80055ca:	69a2      	ldr	r2, [r4, #24]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	dc06      	bgt.n	80055de <_puts_r+0x8e>
 80055d0:	290a      	cmp	r1, #10
 80055d2:	d004      	beq.n	80055de <_puts_r+0x8e>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	6022      	str	r2, [r4, #0]
 80055da:	7019      	strb	r1, [r3, #0]
 80055dc:	e7cf      	b.n	800557e <_puts_r+0x2e>
 80055de:	4622      	mov	r2, r4
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 f854 	bl	800568e <__swbuf_r>
 80055e6:	3001      	adds	r0, #1
 80055e8:	d1c9      	bne.n	800557e <_puts_r+0x2e>
 80055ea:	e7df      	b.n	80055ac <_puts_r+0x5c>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	250a      	movs	r5, #10
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	6022      	str	r2, [r4, #0]
 80055f4:	701d      	strb	r5, [r3, #0]
 80055f6:	e7db      	b.n	80055b0 <_puts_r+0x60>

080055f8 <puts>:
 80055f8:	4b02      	ldr	r3, [pc, #8]	; (8005604 <puts+0xc>)
 80055fa:	4601      	mov	r1, r0
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	f7ff bfa7 	b.w	8005550 <_puts_r>
 8005602:	bf00      	nop
 8005604:	20000068 	.word	0x20000068

08005608 <__sread>:
 8005608:	b510      	push	{r4, lr}
 800560a:	460c      	mov	r4, r1
 800560c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005610:	f000 f952 	bl	80058b8 <_read_r>
 8005614:	2800      	cmp	r0, #0
 8005616:	bfab      	itete	ge
 8005618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800561a:	89a3      	ldrhlt	r3, [r4, #12]
 800561c:	181b      	addge	r3, r3, r0
 800561e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005622:	bfac      	ite	ge
 8005624:	6563      	strge	r3, [r4, #84]	; 0x54
 8005626:	81a3      	strhlt	r3, [r4, #12]
 8005628:	bd10      	pop	{r4, pc}

0800562a <__swrite>:
 800562a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562e:	461f      	mov	r7, r3
 8005630:	898b      	ldrh	r3, [r1, #12]
 8005632:	05db      	lsls	r3, r3, #23
 8005634:	4605      	mov	r5, r0
 8005636:	460c      	mov	r4, r1
 8005638:	4616      	mov	r6, r2
 800563a:	d505      	bpl.n	8005648 <__swrite+0x1e>
 800563c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005640:	2302      	movs	r3, #2
 8005642:	2200      	movs	r2, #0
 8005644:	f000 f926 	bl	8005894 <_lseek_r>
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800564e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005652:	81a3      	strh	r3, [r4, #12]
 8005654:	4632      	mov	r2, r6
 8005656:	463b      	mov	r3, r7
 8005658:	4628      	mov	r0, r5
 800565a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800565e:	f000 b93d 	b.w	80058dc <_write_r>

08005662 <__sseek>:
 8005662:	b510      	push	{r4, lr}
 8005664:	460c      	mov	r4, r1
 8005666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566a:	f000 f913 	bl	8005894 <_lseek_r>
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	bf15      	itete	ne
 8005674:	6560      	strne	r0, [r4, #84]	; 0x54
 8005676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800567a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800567e:	81a3      	strheq	r3, [r4, #12]
 8005680:	bf18      	it	ne
 8005682:	81a3      	strhne	r3, [r4, #12]
 8005684:	bd10      	pop	{r4, pc}

08005686 <__sclose>:
 8005686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568a:	f000 b89d 	b.w	80057c8 <_close_r>

0800568e <__swbuf_r>:
 800568e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005690:	460e      	mov	r6, r1
 8005692:	4614      	mov	r4, r2
 8005694:	4605      	mov	r5, r0
 8005696:	b118      	cbz	r0, 80056a0 <__swbuf_r+0x12>
 8005698:	6a03      	ldr	r3, [r0, #32]
 800569a:	b90b      	cbnz	r3, 80056a0 <__swbuf_r+0x12>
 800569c:	f7ff ff22 	bl	80054e4 <__sinit>
 80056a0:	69a3      	ldr	r3, [r4, #24]
 80056a2:	60a3      	str	r3, [r4, #8]
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	071a      	lsls	r2, r3, #28
 80056a8:	d525      	bpl.n	80056f6 <__swbuf_r+0x68>
 80056aa:	6923      	ldr	r3, [r4, #16]
 80056ac:	b31b      	cbz	r3, 80056f6 <__swbuf_r+0x68>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	6922      	ldr	r2, [r4, #16]
 80056b2:	1a98      	subs	r0, r3, r2
 80056b4:	6963      	ldr	r3, [r4, #20]
 80056b6:	b2f6      	uxtb	r6, r6
 80056b8:	4283      	cmp	r3, r0
 80056ba:	4637      	mov	r7, r6
 80056bc:	dc04      	bgt.n	80056c8 <__swbuf_r+0x3a>
 80056be:	4621      	mov	r1, r4
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 fad7 	bl	8005c74 <_fflush_r>
 80056c6:	b9e0      	cbnz	r0, 8005702 <__swbuf_r+0x74>
 80056c8:	68a3      	ldr	r3, [r4, #8]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	60a3      	str	r3, [r4, #8]
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	6022      	str	r2, [r4, #0]
 80056d4:	701e      	strb	r6, [r3, #0]
 80056d6:	6962      	ldr	r2, [r4, #20]
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	429a      	cmp	r2, r3
 80056dc:	d004      	beq.n	80056e8 <__swbuf_r+0x5a>
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	07db      	lsls	r3, r3, #31
 80056e2:	d506      	bpl.n	80056f2 <__swbuf_r+0x64>
 80056e4:	2e0a      	cmp	r6, #10
 80056e6:	d104      	bne.n	80056f2 <__swbuf_r+0x64>
 80056e8:	4621      	mov	r1, r4
 80056ea:	4628      	mov	r0, r5
 80056ec:	f000 fac2 	bl	8005c74 <_fflush_r>
 80056f0:	b938      	cbnz	r0, 8005702 <__swbuf_r+0x74>
 80056f2:	4638      	mov	r0, r7
 80056f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f6:	4621      	mov	r1, r4
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 f805 	bl	8005708 <__swsetup_r>
 80056fe:	2800      	cmp	r0, #0
 8005700:	d0d5      	beq.n	80056ae <__swbuf_r+0x20>
 8005702:	f04f 37ff 	mov.w	r7, #4294967295
 8005706:	e7f4      	b.n	80056f2 <__swbuf_r+0x64>

08005708 <__swsetup_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4b2a      	ldr	r3, [pc, #168]	; (80057b4 <__swsetup_r+0xac>)
 800570c:	4605      	mov	r5, r0
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	460c      	mov	r4, r1
 8005712:	b118      	cbz	r0, 800571c <__swsetup_r+0x14>
 8005714:	6a03      	ldr	r3, [r0, #32]
 8005716:	b90b      	cbnz	r3, 800571c <__swsetup_r+0x14>
 8005718:	f7ff fee4 	bl	80054e4 <__sinit>
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005722:	0718      	lsls	r0, r3, #28
 8005724:	d422      	bmi.n	800576c <__swsetup_r+0x64>
 8005726:	06d9      	lsls	r1, r3, #27
 8005728:	d407      	bmi.n	800573a <__swsetup_r+0x32>
 800572a:	2309      	movs	r3, #9
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	e034      	b.n	80057a4 <__swsetup_r+0x9c>
 800573a:	0758      	lsls	r0, r3, #29
 800573c:	d512      	bpl.n	8005764 <__swsetup_r+0x5c>
 800573e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005740:	b141      	cbz	r1, 8005754 <__swsetup_r+0x4c>
 8005742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005746:	4299      	cmp	r1, r3
 8005748:	d002      	beq.n	8005750 <__swsetup_r+0x48>
 800574a:	4628      	mov	r0, r5
 800574c:	f000 f914 	bl	8005978 <_free_r>
 8005750:	2300      	movs	r3, #0
 8005752:	6363      	str	r3, [r4, #52]	; 0x34
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	2300      	movs	r3, #0
 800575e:	6063      	str	r3, [r4, #4]
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	f043 0308 	orr.w	r3, r3, #8
 800576a:	81a3      	strh	r3, [r4, #12]
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	b94b      	cbnz	r3, 8005784 <__swsetup_r+0x7c>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800577a:	d003      	beq.n	8005784 <__swsetup_r+0x7c>
 800577c:	4621      	mov	r1, r4
 800577e:	4628      	mov	r0, r5
 8005780:	f000 fac6 	bl	8005d10 <__smakebuf_r>
 8005784:	89a0      	ldrh	r0, [r4, #12]
 8005786:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800578a:	f010 0301 	ands.w	r3, r0, #1
 800578e:	d00a      	beq.n	80057a6 <__swsetup_r+0x9e>
 8005790:	2300      	movs	r3, #0
 8005792:	60a3      	str	r3, [r4, #8]
 8005794:	6963      	ldr	r3, [r4, #20]
 8005796:	425b      	negs	r3, r3
 8005798:	61a3      	str	r3, [r4, #24]
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	b943      	cbnz	r3, 80057b0 <__swsetup_r+0xa8>
 800579e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057a2:	d1c4      	bne.n	800572e <__swsetup_r+0x26>
 80057a4:	bd38      	pop	{r3, r4, r5, pc}
 80057a6:	0781      	lsls	r1, r0, #30
 80057a8:	bf58      	it	pl
 80057aa:	6963      	ldrpl	r3, [r4, #20]
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	e7f4      	b.n	800579a <__swsetup_r+0x92>
 80057b0:	2000      	movs	r0, #0
 80057b2:	e7f7      	b.n	80057a4 <__swsetup_r+0x9c>
 80057b4:	20000068 	.word	0x20000068

080057b8 <memset>:
 80057b8:	4402      	add	r2, r0
 80057ba:	4603      	mov	r3, r0
 80057bc:	4293      	cmp	r3, r2
 80057be:	d100      	bne.n	80057c2 <memset+0xa>
 80057c0:	4770      	bx	lr
 80057c2:	f803 1b01 	strb.w	r1, [r3], #1
 80057c6:	e7f9      	b.n	80057bc <memset+0x4>

080057c8 <_close_r>:
 80057c8:	b538      	push	{r3, r4, r5, lr}
 80057ca:	4d06      	ldr	r5, [pc, #24]	; (80057e4 <_close_r+0x1c>)
 80057cc:	2300      	movs	r3, #0
 80057ce:	4604      	mov	r4, r0
 80057d0:	4608      	mov	r0, r1
 80057d2:	602b      	str	r3, [r5, #0]
 80057d4:	f7fb f8db 	bl	800098e <_close>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d102      	bne.n	80057e2 <_close_r+0x1a>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	b103      	cbz	r3, 80057e2 <_close_r+0x1a>
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	bd38      	pop	{r3, r4, r5, pc}
 80057e4:	20004c4c 	.word	0x20004c4c

080057e8 <_reclaim_reent>:
 80057e8:	4b29      	ldr	r3, [pc, #164]	; (8005890 <_reclaim_reent+0xa8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4283      	cmp	r3, r0
 80057ee:	b570      	push	{r4, r5, r6, lr}
 80057f0:	4604      	mov	r4, r0
 80057f2:	d04b      	beq.n	800588c <_reclaim_reent+0xa4>
 80057f4:	69c3      	ldr	r3, [r0, #28]
 80057f6:	b143      	cbz	r3, 800580a <_reclaim_reent+0x22>
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d144      	bne.n	8005888 <_reclaim_reent+0xa0>
 80057fe:	69e3      	ldr	r3, [r4, #28]
 8005800:	6819      	ldr	r1, [r3, #0]
 8005802:	b111      	cbz	r1, 800580a <_reclaim_reent+0x22>
 8005804:	4620      	mov	r0, r4
 8005806:	f000 f8b7 	bl	8005978 <_free_r>
 800580a:	6961      	ldr	r1, [r4, #20]
 800580c:	b111      	cbz	r1, 8005814 <_reclaim_reent+0x2c>
 800580e:	4620      	mov	r0, r4
 8005810:	f000 f8b2 	bl	8005978 <_free_r>
 8005814:	69e1      	ldr	r1, [r4, #28]
 8005816:	b111      	cbz	r1, 800581e <_reclaim_reent+0x36>
 8005818:	4620      	mov	r0, r4
 800581a:	f000 f8ad 	bl	8005978 <_free_r>
 800581e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005820:	b111      	cbz	r1, 8005828 <_reclaim_reent+0x40>
 8005822:	4620      	mov	r0, r4
 8005824:	f000 f8a8 	bl	8005978 <_free_r>
 8005828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800582a:	b111      	cbz	r1, 8005832 <_reclaim_reent+0x4a>
 800582c:	4620      	mov	r0, r4
 800582e:	f000 f8a3 	bl	8005978 <_free_r>
 8005832:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005834:	b111      	cbz	r1, 800583c <_reclaim_reent+0x54>
 8005836:	4620      	mov	r0, r4
 8005838:	f000 f89e 	bl	8005978 <_free_r>
 800583c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800583e:	b111      	cbz	r1, 8005846 <_reclaim_reent+0x5e>
 8005840:	4620      	mov	r0, r4
 8005842:	f000 f899 	bl	8005978 <_free_r>
 8005846:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005848:	b111      	cbz	r1, 8005850 <_reclaim_reent+0x68>
 800584a:	4620      	mov	r0, r4
 800584c:	f000 f894 	bl	8005978 <_free_r>
 8005850:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005852:	b111      	cbz	r1, 800585a <_reclaim_reent+0x72>
 8005854:	4620      	mov	r0, r4
 8005856:	f000 f88f 	bl	8005978 <_free_r>
 800585a:	6a23      	ldr	r3, [r4, #32]
 800585c:	b1b3      	cbz	r3, 800588c <_reclaim_reent+0xa4>
 800585e:	4620      	mov	r0, r4
 8005860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005864:	4718      	bx	r3
 8005866:	5949      	ldr	r1, [r1, r5]
 8005868:	b941      	cbnz	r1, 800587c <_reclaim_reent+0x94>
 800586a:	3504      	adds	r5, #4
 800586c:	69e3      	ldr	r3, [r4, #28]
 800586e:	2d80      	cmp	r5, #128	; 0x80
 8005870:	68d9      	ldr	r1, [r3, #12]
 8005872:	d1f8      	bne.n	8005866 <_reclaim_reent+0x7e>
 8005874:	4620      	mov	r0, r4
 8005876:	f000 f87f 	bl	8005978 <_free_r>
 800587a:	e7c0      	b.n	80057fe <_reclaim_reent+0x16>
 800587c:	680e      	ldr	r6, [r1, #0]
 800587e:	4620      	mov	r0, r4
 8005880:	f000 f87a 	bl	8005978 <_free_r>
 8005884:	4631      	mov	r1, r6
 8005886:	e7ef      	b.n	8005868 <_reclaim_reent+0x80>
 8005888:	2500      	movs	r5, #0
 800588a:	e7ef      	b.n	800586c <_reclaim_reent+0x84>
 800588c:	bd70      	pop	{r4, r5, r6, pc}
 800588e:	bf00      	nop
 8005890:	20000068 	.word	0x20000068

08005894 <_lseek_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4d07      	ldr	r5, [pc, #28]	; (80058b4 <_lseek_r+0x20>)
 8005898:	4604      	mov	r4, r0
 800589a:	4608      	mov	r0, r1
 800589c:	4611      	mov	r1, r2
 800589e:	2200      	movs	r2, #0
 80058a0:	602a      	str	r2, [r5, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f7fb f89a 	bl	80009dc <_lseek>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_lseek_r+0x1e>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_lseek_r+0x1e>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	20004c4c 	.word	0x20004c4c

080058b8 <_read_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4d07      	ldr	r5, [pc, #28]	; (80058d8 <_read_r+0x20>)
 80058bc:	4604      	mov	r4, r0
 80058be:	4608      	mov	r0, r1
 80058c0:	4611      	mov	r1, r2
 80058c2:	2200      	movs	r2, #0
 80058c4:	602a      	str	r2, [r5, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f7fb f844 	bl	8000954 <_read>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_read_r+0x1e>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_read_r+0x1e>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	20004c4c 	.word	0x20004c4c

080058dc <_write_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4d07      	ldr	r5, [pc, #28]	; (80058fc <_write_r+0x20>)
 80058e0:	4604      	mov	r4, r0
 80058e2:	4608      	mov	r0, r1
 80058e4:	4611      	mov	r1, r2
 80058e6:	2200      	movs	r2, #0
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7fa fdf6 	bl	80004dc <_write>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_write_r+0x1e>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_write_r+0x1e>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	20004c4c 	.word	0x20004c4c

08005900 <__errno>:
 8005900:	4b01      	ldr	r3, [pc, #4]	; (8005908 <__errno+0x8>)
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20000068 	.word	0x20000068

0800590c <__libc_init_array>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	4d0d      	ldr	r5, [pc, #52]	; (8005944 <__libc_init_array+0x38>)
 8005910:	4c0d      	ldr	r4, [pc, #52]	; (8005948 <__libc_init_array+0x3c>)
 8005912:	1b64      	subs	r4, r4, r5
 8005914:	10a4      	asrs	r4, r4, #2
 8005916:	2600      	movs	r6, #0
 8005918:	42a6      	cmp	r6, r4
 800591a:	d109      	bne.n	8005930 <__libc_init_array+0x24>
 800591c:	4d0b      	ldr	r5, [pc, #44]	; (800594c <__libc_init_array+0x40>)
 800591e:	4c0c      	ldr	r4, [pc, #48]	; (8005950 <__libc_init_array+0x44>)
 8005920:	f000 fa64 	bl	8005dec <_init>
 8005924:	1b64      	subs	r4, r4, r5
 8005926:	10a4      	asrs	r4, r4, #2
 8005928:	2600      	movs	r6, #0
 800592a:	42a6      	cmp	r6, r4
 800592c:	d105      	bne.n	800593a <__libc_init_array+0x2e>
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	f855 3b04 	ldr.w	r3, [r5], #4
 8005934:	4798      	blx	r3
 8005936:	3601      	adds	r6, #1
 8005938:	e7ee      	b.n	8005918 <__libc_init_array+0xc>
 800593a:	f855 3b04 	ldr.w	r3, [r5], #4
 800593e:	4798      	blx	r3
 8005940:	3601      	adds	r6, #1
 8005942:	e7f2      	b.n	800592a <__libc_init_array+0x1e>
 8005944:	08005e78 	.word	0x08005e78
 8005948:	08005e78 	.word	0x08005e78
 800594c:	08005e78 	.word	0x08005e78
 8005950:	08005e7c 	.word	0x08005e7c

08005954 <__retarget_lock_init_recursive>:
 8005954:	4770      	bx	lr

08005956 <__retarget_lock_acquire_recursive>:
 8005956:	4770      	bx	lr

08005958 <__retarget_lock_release_recursive>:
 8005958:	4770      	bx	lr

0800595a <memcpy>:
 800595a:	440a      	add	r2, r1
 800595c:	4291      	cmp	r1, r2
 800595e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005962:	d100      	bne.n	8005966 <memcpy+0xc>
 8005964:	4770      	bx	lr
 8005966:	b510      	push	{r4, lr}
 8005968:	f811 4b01 	ldrb.w	r4, [r1], #1
 800596c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005970:	4291      	cmp	r1, r2
 8005972:	d1f9      	bne.n	8005968 <memcpy+0xe>
 8005974:	bd10      	pop	{r4, pc}
	...

08005978 <_free_r>:
 8005978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800597a:	2900      	cmp	r1, #0
 800597c:	d044      	beq.n	8005a08 <_free_r+0x90>
 800597e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005982:	9001      	str	r0, [sp, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f1a1 0404 	sub.w	r4, r1, #4
 800598a:	bfb8      	it	lt
 800598c:	18e4      	addlt	r4, r4, r3
 800598e:	f000 f8df 	bl	8005b50 <__malloc_lock>
 8005992:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <_free_r+0x94>)
 8005994:	9801      	ldr	r0, [sp, #4]
 8005996:	6813      	ldr	r3, [r2, #0]
 8005998:	b933      	cbnz	r3, 80059a8 <_free_r+0x30>
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	6014      	str	r4, [r2, #0]
 800599e:	b003      	add	sp, #12
 80059a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059a4:	f000 b8da 	b.w	8005b5c <__malloc_unlock>
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d908      	bls.n	80059be <_free_r+0x46>
 80059ac:	6825      	ldr	r5, [r4, #0]
 80059ae:	1961      	adds	r1, r4, r5
 80059b0:	428b      	cmp	r3, r1
 80059b2:	bf01      	itttt	eq
 80059b4:	6819      	ldreq	r1, [r3, #0]
 80059b6:	685b      	ldreq	r3, [r3, #4]
 80059b8:	1949      	addeq	r1, r1, r5
 80059ba:	6021      	streq	r1, [r4, #0]
 80059bc:	e7ed      	b.n	800599a <_free_r+0x22>
 80059be:	461a      	mov	r2, r3
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	b10b      	cbz	r3, 80059c8 <_free_r+0x50>
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	d9fa      	bls.n	80059be <_free_r+0x46>
 80059c8:	6811      	ldr	r1, [r2, #0]
 80059ca:	1855      	adds	r5, r2, r1
 80059cc:	42a5      	cmp	r5, r4
 80059ce:	d10b      	bne.n	80059e8 <_free_r+0x70>
 80059d0:	6824      	ldr	r4, [r4, #0]
 80059d2:	4421      	add	r1, r4
 80059d4:	1854      	adds	r4, r2, r1
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	6011      	str	r1, [r2, #0]
 80059da:	d1e0      	bne.n	800599e <_free_r+0x26>
 80059dc:	681c      	ldr	r4, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	6053      	str	r3, [r2, #4]
 80059e2:	440c      	add	r4, r1
 80059e4:	6014      	str	r4, [r2, #0]
 80059e6:	e7da      	b.n	800599e <_free_r+0x26>
 80059e8:	d902      	bls.n	80059f0 <_free_r+0x78>
 80059ea:	230c      	movs	r3, #12
 80059ec:	6003      	str	r3, [r0, #0]
 80059ee:	e7d6      	b.n	800599e <_free_r+0x26>
 80059f0:	6825      	ldr	r5, [r4, #0]
 80059f2:	1961      	adds	r1, r4, r5
 80059f4:	428b      	cmp	r3, r1
 80059f6:	bf04      	itt	eq
 80059f8:	6819      	ldreq	r1, [r3, #0]
 80059fa:	685b      	ldreq	r3, [r3, #4]
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	bf04      	itt	eq
 8005a00:	1949      	addeq	r1, r1, r5
 8005a02:	6021      	streq	r1, [r4, #0]
 8005a04:	6054      	str	r4, [r2, #4]
 8005a06:	e7ca      	b.n	800599e <_free_r+0x26>
 8005a08:	b003      	add	sp, #12
 8005a0a:	bd30      	pop	{r4, r5, pc}
 8005a0c:	20004c54 	.word	0x20004c54

08005a10 <sbrk_aligned>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	4e0e      	ldr	r6, [pc, #56]	; (8005a4c <sbrk_aligned+0x3c>)
 8005a14:	460c      	mov	r4, r1
 8005a16:	6831      	ldr	r1, [r6, #0]
 8005a18:	4605      	mov	r5, r0
 8005a1a:	b911      	cbnz	r1, 8005a22 <sbrk_aligned+0x12>
 8005a1c:	f000 f9d6 	bl	8005dcc <_sbrk_r>
 8005a20:	6030      	str	r0, [r6, #0]
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	f000 f9d1 	bl	8005dcc <_sbrk_r>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d00a      	beq.n	8005a44 <sbrk_aligned+0x34>
 8005a2e:	1cc4      	adds	r4, r0, #3
 8005a30:	f024 0403 	bic.w	r4, r4, #3
 8005a34:	42a0      	cmp	r0, r4
 8005a36:	d007      	beq.n	8005a48 <sbrk_aligned+0x38>
 8005a38:	1a21      	subs	r1, r4, r0
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 f9c6 	bl	8005dcc <_sbrk_r>
 8005a40:	3001      	adds	r0, #1
 8005a42:	d101      	bne.n	8005a48 <sbrk_aligned+0x38>
 8005a44:	f04f 34ff 	mov.w	r4, #4294967295
 8005a48:	4620      	mov	r0, r4
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	20004c58 	.word	0x20004c58

08005a50 <_malloc_r>:
 8005a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a54:	1ccd      	adds	r5, r1, #3
 8005a56:	f025 0503 	bic.w	r5, r5, #3
 8005a5a:	3508      	adds	r5, #8
 8005a5c:	2d0c      	cmp	r5, #12
 8005a5e:	bf38      	it	cc
 8005a60:	250c      	movcc	r5, #12
 8005a62:	2d00      	cmp	r5, #0
 8005a64:	4607      	mov	r7, r0
 8005a66:	db01      	blt.n	8005a6c <_malloc_r+0x1c>
 8005a68:	42a9      	cmp	r1, r5
 8005a6a:	d905      	bls.n	8005a78 <_malloc_r+0x28>
 8005a6c:	230c      	movs	r3, #12
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	2600      	movs	r6, #0
 8005a72:	4630      	mov	r0, r6
 8005a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b4c <_malloc_r+0xfc>
 8005a7c:	f000 f868 	bl	8005b50 <__malloc_lock>
 8005a80:	f8d8 3000 	ldr.w	r3, [r8]
 8005a84:	461c      	mov	r4, r3
 8005a86:	bb5c      	cbnz	r4, 8005ae0 <_malloc_r+0x90>
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f7ff ffc0 	bl	8005a10 <sbrk_aligned>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	4604      	mov	r4, r0
 8005a94:	d155      	bne.n	8005b42 <_malloc_r+0xf2>
 8005a96:	f8d8 4000 	ldr.w	r4, [r8]
 8005a9a:	4626      	mov	r6, r4
 8005a9c:	2e00      	cmp	r6, #0
 8005a9e:	d145      	bne.n	8005b2c <_malloc_r+0xdc>
 8005aa0:	2c00      	cmp	r4, #0
 8005aa2:	d048      	beq.n	8005b36 <_malloc_r+0xe6>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	eb04 0903 	add.w	r9, r4, r3
 8005aae:	f000 f98d 	bl	8005dcc <_sbrk_r>
 8005ab2:	4581      	cmp	r9, r0
 8005ab4:	d13f      	bne.n	8005b36 <_malloc_r+0xe6>
 8005ab6:	6821      	ldr	r1, [r4, #0]
 8005ab8:	1a6d      	subs	r5, r5, r1
 8005aba:	4629      	mov	r1, r5
 8005abc:	4638      	mov	r0, r7
 8005abe:	f7ff ffa7 	bl	8005a10 <sbrk_aligned>
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	d037      	beq.n	8005b36 <_malloc_r+0xe6>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	442b      	add	r3, r5
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d038      	beq.n	8005b46 <_malloc_r+0xf6>
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	42a2      	cmp	r2, r4
 8005ad8:	d12b      	bne.n	8005b32 <_malloc_r+0xe2>
 8005ada:	2200      	movs	r2, #0
 8005adc:	605a      	str	r2, [r3, #4]
 8005ade:	e00f      	b.n	8005b00 <_malloc_r+0xb0>
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	1b52      	subs	r2, r2, r5
 8005ae4:	d41f      	bmi.n	8005b26 <_malloc_r+0xd6>
 8005ae6:	2a0b      	cmp	r2, #11
 8005ae8:	d917      	bls.n	8005b1a <_malloc_r+0xca>
 8005aea:	1961      	adds	r1, r4, r5
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	6025      	str	r5, [r4, #0]
 8005af0:	bf18      	it	ne
 8005af2:	6059      	strne	r1, [r3, #4]
 8005af4:	6863      	ldr	r3, [r4, #4]
 8005af6:	bf08      	it	eq
 8005af8:	f8c8 1000 	streq.w	r1, [r8]
 8005afc:	5162      	str	r2, [r4, r5]
 8005afe:	604b      	str	r3, [r1, #4]
 8005b00:	4638      	mov	r0, r7
 8005b02:	f104 060b 	add.w	r6, r4, #11
 8005b06:	f000 f829 	bl	8005b5c <__malloc_unlock>
 8005b0a:	f026 0607 	bic.w	r6, r6, #7
 8005b0e:	1d23      	adds	r3, r4, #4
 8005b10:	1af2      	subs	r2, r6, r3
 8005b12:	d0ae      	beq.n	8005a72 <_malloc_r+0x22>
 8005b14:	1b9b      	subs	r3, r3, r6
 8005b16:	50a3      	str	r3, [r4, r2]
 8005b18:	e7ab      	b.n	8005a72 <_malloc_r+0x22>
 8005b1a:	42a3      	cmp	r3, r4
 8005b1c:	6862      	ldr	r2, [r4, #4]
 8005b1e:	d1dd      	bne.n	8005adc <_malloc_r+0x8c>
 8005b20:	f8c8 2000 	str.w	r2, [r8]
 8005b24:	e7ec      	b.n	8005b00 <_malloc_r+0xb0>
 8005b26:	4623      	mov	r3, r4
 8005b28:	6864      	ldr	r4, [r4, #4]
 8005b2a:	e7ac      	b.n	8005a86 <_malloc_r+0x36>
 8005b2c:	4634      	mov	r4, r6
 8005b2e:	6876      	ldr	r6, [r6, #4]
 8005b30:	e7b4      	b.n	8005a9c <_malloc_r+0x4c>
 8005b32:	4613      	mov	r3, r2
 8005b34:	e7cc      	b.n	8005ad0 <_malloc_r+0x80>
 8005b36:	230c      	movs	r3, #12
 8005b38:	603b      	str	r3, [r7, #0]
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	f000 f80e 	bl	8005b5c <__malloc_unlock>
 8005b40:	e797      	b.n	8005a72 <_malloc_r+0x22>
 8005b42:	6025      	str	r5, [r4, #0]
 8005b44:	e7dc      	b.n	8005b00 <_malloc_r+0xb0>
 8005b46:	605b      	str	r3, [r3, #4]
 8005b48:	deff      	udf	#255	; 0xff
 8005b4a:	bf00      	nop
 8005b4c:	20004c54 	.word	0x20004c54

08005b50 <__malloc_lock>:
 8005b50:	4801      	ldr	r0, [pc, #4]	; (8005b58 <__malloc_lock+0x8>)
 8005b52:	f7ff bf00 	b.w	8005956 <__retarget_lock_acquire_recursive>
 8005b56:	bf00      	nop
 8005b58:	20004c50 	.word	0x20004c50

08005b5c <__malloc_unlock>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	; (8005b64 <__malloc_unlock+0x8>)
 8005b5e:	f7ff befb 	b.w	8005958 <__retarget_lock_release_recursive>
 8005b62:	bf00      	nop
 8005b64:	20004c50 	.word	0x20004c50

08005b68 <__sflush_r>:
 8005b68:	898a      	ldrh	r2, [r1, #12]
 8005b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6e:	4605      	mov	r5, r0
 8005b70:	0710      	lsls	r0, r2, #28
 8005b72:	460c      	mov	r4, r1
 8005b74:	d458      	bmi.n	8005c28 <__sflush_r+0xc0>
 8005b76:	684b      	ldr	r3, [r1, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dc05      	bgt.n	8005b88 <__sflush_r+0x20>
 8005b7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dc02      	bgt.n	8005b88 <__sflush_r+0x20>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	d0f9      	beq.n	8005b82 <__sflush_r+0x1a>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b94:	682f      	ldr	r7, [r5, #0]
 8005b96:	6a21      	ldr	r1, [r4, #32]
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	d032      	beq.n	8005c02 <__sflush_r+0x9a>
 8005b9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	075a      	lsls	r2, r3, #29
 8005ba2:	d505      	bpl.n	8005bb0 <__sflush_r+0x48>
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	1ac0      	subs	r0, r0, r3
 8005ba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005baa:	b10b      	cbz	r3, 8005bb0 <__sflush_r+0x48>
 8005bac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bae:	1ac0      	subs	r0, r0, r3
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bb6:	6a21      	ldr	r1, [r4, #32]
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b0      	blx	r6
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	89a3      	ldrh	r3, [r4, #12]
 8005bc0:	d106      	bne.n	8005bd0 <__sflush_r+0x68>
 8005bc2:	6829      	ldr	r1, [r5, #0]
 8005bc4:	291d      	cmp	r1, #29
 8005bc6:	d82b      	bhi.n	8005c20 <__sflush_r+0xb8>
 8005bc8:	4a29      	ldr	r2, [pc, #164]	; (8005c70 <__sflush_r+0x108>)
 8005bca:	410a      	asrs	r2, r1
 8005bcc:	07d6      	lsls	r6, r2, #31
 8005bce:	d427      	bmi.n	8005c20 <__sflush_r+0xb8>
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	6062      	str	r2, [r4, #4]
 8005bd4:	04d9      	lsls	r1, r3, #19
 8005bd6:	6922      	ldr	r2, [r4, #16]
 8005bd8:	6022      	str	r2, [r4, #0]
 8005bda:	d504      	bpl.n	8005be6 <__sflush_r+0x7e>
 8005bdc:	1c42      	adds	r2, r0, #1
 8005bde:	d101      	bne.n	8005be4 <__sflush_r+0x7c>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	b903      	cbnz	r3, 8005be6 <__sflush_r+0x7e>
 8005be4:	6560      	str	r0, [r4, #84]	; 0x54
 8005be6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005be8:	602f      	str	r7, [r5, #0]
 8005bea:	2900      	cmp	r1, #0
 8005bec:	d0c9      	beq.n	8005b82 <__sflush_r+0x1a>
 8005bee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bf2:	4299      	cmp	r1, r3
 8005bf4:	d002      	beq.n	8005bfc <__sflush_r+0x94>
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f7ff febe 	bl	8005978 <_free_r>
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	6360      	str	r0, [r4, #52]	; 0x34
 8005c00:	e7c0      	b.n	8005b84 <__sflush_r+0x1c>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b0      	blx	r6
 8005c08:	1c41      	adds	r1, r0, #1
 8005c0a:	d1c8      	bne.n	8005b9e <__sflush_r+0x36>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0c5      	beq.n	8005b9e <__sflush_r+0x36>
 8005c12:	2b1d      	cmp	r3, #29
 8005c14:	d001      	beq.n	8005c1a <__sflush_r+0xb2>
 8005c16:	2b16      	cmp	r3, #22
 8005c18:	d101      	bne.n	8005c1e <__sflush_r+0xb6>
 8005c1a:	602f      	str	r7, [r5, #0]
 8005c1c:	e7b1      	b.n	8005b82 <__sflush_r+0x1a>
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	e7ad      	b.n	8005b84 <__sflush_r+0x1c>
 8005c28:	690f      	ldr	r7, [r1, #16]
 8005c2a:	2f00      	cmp	r7, #0
 8005c2c:	d0a9      	beq.n	8005b82 <__sflush_r+0x1a>
 8005c2e:	0793      	lsls	r3, r2, #30
 8005c30:	680e      	ldr	r6, [r1, #0]
 8005c32:	bf08      	it	eq
 8005c34:	694b      	ldreq	r3, [r1, #20]
 8005c36:	600f      	str	r7, [r1, #0]
 8005c38:	bf18      	it	ne
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	eba6 0807 	sub.w	r8, r6, r7
 8005c40:	608b      	str	r3, [r1, #8]
 8005c42:	f1b8 0f00 	cmp.w	r8, #0
 8005c46:	dd9c      	ble.n	8005b82 <__sflush_r+0x1a>
 8005c48:	6a21      	ldr	r1, [r4, #32]
 8005c4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c4c:	4643      	mov	r3, r8
 8005c4e:	463a      	mov	r2, r7
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b0      	blx	r6
 8005c54:	2800      	cmp	r0, #0
 8005c56:	dc06      	bgt.n	8005c66 <__sflush_r+0xfe>
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	e78e      	b.n	8005b84 <__sflush_r+0x1c>
 8005c66:	4407      	add	r7, r0
 8005c68:	eba8 0800 	sub.w	r8, r8, r0
 8005c6c:	e7e9      	b.n	8005c42 <__sflush_r+0xda>
 8005c6e:	bf00      	nop
 8005c70:	dfbffffe 	.word	0xdfbffffe

08005c74 <_fflush_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	4605      	mov	r5, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b913      	cbnz	r3, 8005c84 <_fflush_r+0x10>
 8005c7e:	2500      	movs	r5, #0
 8005c80:	4628      	mov	r0, r5
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	b118      	cbz	r0, 8005c8e <_fflush_r+0x1a>
 8005c86:	6a03      	ldr	r3, [r0, #32]
 8005c88:	b90b      	cbnz	r3, 8005c8e <_fflush_r+0x1a>
 8005c8a:	f7ff fc2b 	bl	80054e4 <__sinit>
 8005c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f3      	beq.n	8005c7e <_fflush_r+0xa>
 8005c96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c98:	07d0      	lsls	r0, r2, #31
 8005c9a:	d404      	bmi.n	8005ca6 <_fflush_r+0x32>
 8005c9c:	0599      	lsls	r1, r3, #22
 8005c9e:	d402      	bmi.n	8005ca6 <_fflush_r+0x32>
 8005ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ca2:	f7ff fe58 	bl	8005956 <__retarget_lock_acquire_recursive>
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	4621      	mov	r1, r4
 8005caa:	f7ff ff5d 	bl	8005b68 <__sflush_r>
 8005cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cb0:	07da      	lsls	r2, r3, #31
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	d4e4      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	059b      	lsls	r3, r3, #22
 8005cba:	d4e1      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cbe:	f7ff fe4b 	bl	8005958 <__retarget_lock_release_recursive>
 8005cc2:	e7dd      	b.n	8005c80 <_fflush_r+0xc>

08005cc4 <__swhatbuf_r>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	b096      	sub	sp, #88	; 0x58
 8005cd0:	4615      	mov	r5, r2
 8005cd2:	461e      	mov	r6, r3
 8005cd4:	da0d      	bge.n	8005cf2 <__swhatbuf_r+0x2e>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cdc:	f04f 0100 	mov.w	r1, #0
 8005ce0:	bf0c      	ite	eq
 8005ce2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005ce6:	2340      	movne	r3, #64	; 0x40
 8005ce8:	2000      	movs	r0, #0
 8005cea:	6031      	str	r1, [r6, #0]
 8005cec:	602b      	str	r3, [r5, #0]
 8005cee:	b016      	add	sp, #88	; 0x58
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	466a      	mov	r2, sp
 8005cf4:	f000 f848 	bl	8005d88 <_fstat_r>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	dbec      	blt.n	8005cd6 <__swhatbuf_r+0x12>
 8005cfc:	9901      	ldr	r1, [sp, #4]
 8005cfe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d02:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d06:	4259      	negs	r1, r3
 8005d08:	4159      	adcs	r1, r3
 8005d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d0e:	e7eb      	b.n	8005ce8 <__swhatbuf_r+0x24>

08005d10 <__smakebuf_r>:
 8005d10:	898b      	ldrh	r3, [r1, #12]
 8005d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d14:	079d      	lsls	r5, r3, #30
 8005d16:	4606      	mov	r6, r0
 8005d18:	460c      	mov	r4, r1
 8005d1a:	d507      	bpl.n	8005d2c <__smakebuf_r+0x1c>
 8005d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	2301      	movs	r3, #1
 8005d26:	6163      	str	r3, [r4, #20]
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	ab01      	add	r3, sp, #4
 8005d2e:	466a      	mov	r2, sp
 8005d30:	f7ff ffc8 	bl	8005cc4 <__swhatbuf_r>
 8005d34:	9900      	ldr	r1, [sp, #0]
 8005d36:	4605      	mov	r5, r0
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7ff fe89 	bl	8005a50 <_malloc_r>
 8005d3e:	b948      	cbnz	r0, 8005d54 <__smakebuf_r+0x44>
 8005d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d44:	059a      	lsls	r2, r3, #22
 8005d46:	d4ef      	bmi.n	8005d28 <__smakebuf_r+0x18>
 8005d48:	f023 0303 	bic.w	r3, r3, #3
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	e7e3      	b.n	8005d1c <__smakebuf_r+0xc>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	6020      	str	r0, [r4, #0]
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	9b00      	ldr	r3, [sp, #0]
 8005d60:	6163      	str	r3, [r4, #20]
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	6120      	str	r0, [r4, #16]
 8005d66:	b15b      	cbz	r3, 8005d80 <__smakebuf_r+0x70>
 8005d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f000 f81d 	bl	8005dac <_isatty_r>
 8005d72:	b128      	cbz	r0, 8005d80 <__smakebuf_r+0x70>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	81a3      	strh	r3, [r4, #12]
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	431d      	orrs	r5, r3
 8005d84:	81a5      	strh	r5, [r4, #12]
 8005d86:	e7cf      	b.n	8005d28 <__smakebuf_r+0x18>

08005d88 <_fstat_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4d07      	ldr	r5, [pc, #28]	; (8005da8 <_fstat_r+0x20>)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	f7fa fe06 	bl	80009a6 <_fstat>
 8005d9a:	1c43      	adds	r3, r0, #1
 8005d9c:	d102      	bne.n	8005da4 <_fstat_r+0x1c>
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	b103      	cbz	r3, 8005da4 <_fstat_r+0x1c>
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
 8005da6:	bf00      	nop
 8005da8:	20004c4c 	.word	0x20004c4c

08005dac <_isatty_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	; (8005dc8 <_isatty_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fa fe05 	bl	80009c6 <_isatty>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_isatty_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_isatty_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	20004c4c 	.word	0x20004c4c

08005dcc <_sbrk_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d06      	ldr	r5, [pc, #24]	; (8005de8 <_sbrk_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	f7fa fe0e 	bl	80009f8 <_sbrk>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_sbrk_r+0x1a>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_sbrk_r+0x1a>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20004c4c 	.word	0x20004c4c

08005dec <_init>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	bf00      	nop
 8005df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df2:	bc08      	pop	{r3}
 8005df4:	469e      	mov	lr, r3
 8005df6:	4770      	bx	lr

08005df8 <_fini>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	bf00      	nop
 8005dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfe:	bc08      	pop	{r3}
 8005e00:	469e      	mov	lr, r3
 8005e02:	4770      	bx	lr
