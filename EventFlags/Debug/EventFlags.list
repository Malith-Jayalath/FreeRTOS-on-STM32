
EventFlags.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800651c  0800651c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800651c  0800651c  0001651c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006524  08006524  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006524  08006524  00016524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800652c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf8  2000006c  08006598  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c64  08006598  00024c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c0e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003764  00000000  00000000  00038ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0003c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001063  00000000  00000000  0003d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004840  00000000  00000000  0003e9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017117  00000000  00000000  00043223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a98e  00000000  00000000  0005a33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f48  00000000  00000000  000f4cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fac10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800642c 	.word	0x0800642c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800642c 	.word	0x0800642c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_write>:
void StartTask2(void *argument);
void StartTask3(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e00a      	b.n	8000504 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	1c4b      	adds	r3, r1, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	2201      	movs	r2, #1
 80004f8:	4807      	ldr	r0, [pc, #28]	; (8000518 <_write+0x3c>)
 80004fa:	f001 fd61 	bl	8001fc0 <HAL_UART_Transmit>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf0      	blt.n	80004ee <_write+0x12>
	}
	return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000088 	.word	0x20000088

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fb40 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f83e 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8c4 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f898 	bl	8000660 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f002 f946 	bl	80027c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000534:	4a10      	ldr	r2, [pc, #64]	; (8000578 <main+0x5c>)
 8000536:	2100      	movs	r1, #0
 8000538:	4810      	ldr	r0, [pc, #64]	; (800057c <main+0x60>)
 800053a:	f002 f98b 	bl	8002854 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <main+0x64>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000544:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <main+0x68>)
 8000546:	2100      	movs	r1, #0
 8000548:	480f      	ldr	r0, [pc, #60]	; (8000588 <main+0x6c>)
 800054a:	f002 f983 	bl	8002854 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0e      	ldr	r2, [pc, #56]	; (800058c <main+0x70>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <main+0x74>)
 8000556:	2100      	movs	r1, #0
 8000558:	480e      	ldr	r0, [pc, #56]	; (8000594 <main+0x78>)
 800055a:	f002 f97b 	bl	8002854 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <main+0x7c>)
 8000562:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Event1 */
  Event1Handle = osEventFlagsNew(&Event1_attributes);
 8000564:	480d      	ldr	r0, [pc, #52]	; (800059c <main+0x80>)
 8000566:	f002 fa22 	bl	80029ae <osEventFlagsNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <main+0x84>)
 800056e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000570:	f002 f94a 	bl	8002808 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x58>
 8000576:	bf00      	nop
 8000578:	08006488 	.word	0x08006488
 800057c:	0800076d 	.word	0x0800076d
 8000580:	200000d0 	.word	0x200000d0
 8000584:	080064ac 	.word	0x080064ac
 8000588:	08000795 	.word	0x08000795
 800058c:	200000d4 	.word	0x200000d4
 8000590:	080064d0 	.word	0x080064d0
 8000594:	080007c1 	.word	0x080007c1
 8000598:	200000d8 	.word	0x200000d8
 800059c:	080064f4 	.word	0x080064f4
 80005a0:	200000dc 	.word	0x200000dc

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fc20 	bl	8005df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xb4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <SystemClock_Config+0xb4>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xb4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b1c      	ldr	r3, [pc, #112]	; (800065c <SystemClock_Config+0xb8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <SystemClock_Config+0xb8>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <SystemClock_Config+0xb8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fd85 	bl	8001124 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000620:	f000 f8e8 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f000 ffe8 	bl	8001614 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800064a:	f000 f8d3 	bl	80007f4 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_USART2_UART_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000698:	f001 fc42 	bl	8001f20 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 f8a7 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000088 	.word	0x20000088
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_GPIO_Init+0x84>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a19      	ldr	r2, [pc, #100]	; (8000738 <MX_GPIO_Init+0x84>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_GPIO_Init+0x84>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_GPIO_Init+0x84>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_GPIO_Init+0x84>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_GPIO_Init+0x84>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000708:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4619      	mov	r1, r3
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <MX_GPIO_Init+0x88>)
 800071a:	f000 fb67 	bl	8000dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2105      	movs	r1, #5
 8000722:	2028      	movs	r0, #40	; 0x28
 8000724:	f000 fb38 	bl	8000d98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000728:	2028      	movs	r0, #40	; 0x28
 800072a:	f000 fb51 	bl	8000dd0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	bf00      	nop
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40020800 	.word	0x40020800

08000740 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]
	osEventFlagsSet(Event1Handle, 0x50);
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_GPIO_EXTI_Callback+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2150      	movs	r1, #80	; 0x50
 8000750:	4618      	mov	r0, r3
 8000752:	f002 f96b 	bl	8002a2c <osEventFlagsSet>
	printf("!\r\n");
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <HAL_GPIO_EXTI_Callback+0x28>)
 8000758:	f005 fa6e 	bl	8005c38 <puts>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000dc 	.word	0x200000dc
 8000768:	08006464 	.word	0x08006464

0800076c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsWait(Event1Handle, 0x51, osFlagsWaitAll, osWaitForever);
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <StartTask1+0x20>)
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2201      	movs	r2, #1
 800077e:	2151      	movs	r1, #81	; 0x51
 8000780:	f002 f998 	bl	8002ab4 <osEventFlagsWait>
    printf("1\r\n");
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <StartTask1+0x24>)
 8000786:	f005 fa57 	bl	8005c38 <puts>
	osEventFlagsWait(Event1Handle, 0x51, osFlagsWaitAll, osWaitForever);
 800078a:	e7f3      	b.n	8000774 <StartTask1+0x8>
 800078c:	200000dc 	.word	0x200000dc
 8000790:	08006468 	.word	0x08006468

08000794 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
    osEventFlagsSet(Event1Handle, 1);
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <StartTask2+0x24>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2101      	movs	r1, #1
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 f942 	bl	8002a2c <osEventFlagsSet>
    printf("2\r\n");
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <StartTask2+0x28>)
 80007aa:	f005 fa45 	bl	8005c38 <puts>
    osDelay(3000);
 80007ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007b2:	f002 f8e1 	bl	8002978 <osDelay>
    osEventFlagsSet(Event1Handle, 1);
 80007b6:	e7f1      	b.n	800079c <StartTask2+0x8>
 80007b8:	200000dc 	.word	0x200000dc
 80007bc:	0800646c 	.word	0x0800646c

080007c0 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f002 f8d5 	bl	8002978 <osDelay>
 80007ce:	e7fb      	b.n	80007c8 <StartTask3+0x8>

080007d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e2:	f000 fa01 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40014400 	.word	0x40014400

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x54>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <HAL_MspInit+0x54>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_MspInit+0x54>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_MspInit+0x54>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	210f      	movs	r1, #15
 8000842:	f06f 0001 	mvn.w	r0, #1
 8000846:	f000 faa7 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a19      	ldr	r2, [pc, #100]	; (80008dc <HAL_UART_MspInit+0x84>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d12b      	bne.n	80008d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_UART_MspInit+0x88>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_UART_MspInit+0x88>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_UART_MspInit+0x88>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_UART_MspInit+0x88>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <HAL_UART_MspInit+0x88>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_UART_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008b2:	230c      	movs	r3, #12
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c2:	2307      	movs	r3, #7
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <HAL_UART_MspInit+0x8c>)
 80008ce:	f000 fa8d 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000

080008e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <HAL_InitTick+0xd0>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	4a2d      	ldr	r2, [pc, #180]	; (80009b8 <HAL_InitTick+0xd0>)
 8000902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000906:	6453      	str	r3, [r2, #68]	; 0x44
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <HAL_InitTick+0xd0>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000914:	f107 020c 	add.w	r2, r7, #12
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f001 f858 	bl	80019d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000924:	f001 f842 	bl	80019ac <HAL_RCC_GetPCLK2Freq>
 8000928:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092c:	4a23      	ldr	r2, [pc, #140]	; (80009bc <HAL_InitTick+0xd4>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0c9b      	lsrs	r3, r3, #18
 8000934:	3b01      	subs	r3, #1
 8000936:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <HAL_InitTick+0xd8>)
 800093a:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <HAL_InitTick+0xdc>)
 800093c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <HAL_InitTick+0xd8>)
 8000940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000944:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000946:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <HAL_InitTick+0xd8>)
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_InitTick+0xd8>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_InitTick+0xd8>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_InitTick+0xd8>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800095e:	4818      	ldr	r0, [pc, #96]	; (80009c0 <HAL_InitTick+0xd8>)
 8000960:	f001 f86a 	bl	8001a38 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800096a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800096e:	2b00      	cmp	r3, #0
 8000970:	d11b      	bne.n	80009aa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000972:	4813      	ldr	r0, [pc, #76]	; (80009c0 <HAL_InitTick+0xd8>)
 8000974:	f001 f8ba 	bl	8001aec <HAL_TIM_Base_Start_IT>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800097e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000982:	2b00      	cmp	r3, #0
 8000984:	d111      	bne.n	80009aa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000986:	2019      	movs	r0, #25
 8000988:	f000 fa22 	bl	8000dd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d808      	bhi.n	80009a4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000992:	2200      	movs	r2, #0
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	2019      	movs	r0, #25
 8000998:	f000 f9fe 	bl	8000d98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_InitTick+0xe0>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	e002      	b.n	80009aa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3730      	adds	r7, #48	; 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	200000e0 	.word	0x200000e0
 80009c4:	40014400 	.word	0x40014400
 80009c8:	20000004 	.word	0x20000004

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009fe:	f001 f8d7 	bl	8001bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000e0 	.word	0x200000e0

08000a0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000a10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a14:	f000 fb6e 	bl	80010f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e00a      	b.n	8000a44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a2e:	f3af 8000 	nop.w
 8000a32:	4601      	mov	r1, r0
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	60ba      	str	r2, [r7, #8]
 8000a3a:	b2ca      	uxtb	r2, r1
 8000a3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf0      	blt.n	8000a2e <_read+0x12>
  }

  return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_isatty>:

int _isatty(int file)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f005 fa26 	bl	8005f40 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20020000 	.word	0x20020000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	20000128 	.word	0x20000128
 8000b28:	20004c68 	.word	0x20004c68

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b54:	f7ff ffea 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f005 f9e5 	bl	8005f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fccb 	bl	800051c <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b94:	0800652c 	.word	0x0800652c
  ldr r2, =_sbss
 8000b98:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b9c:	20004c64 	.word	0x20004c64

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f8d8 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f7ff fe88 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe12 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	2000012c 	.word	0x2000012c

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	2000012c 	.word	0x2000012c

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f7ff ffb1 	bl	8000d1c <NVIC_EncodePriority>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff80 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff54 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e159      	b.n	80010bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8148 	bne.w	80010b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d005      	beq.n	8000e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d130      	bne.n	8000ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80a2 	beq.w	80010b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a56      	ldr	r2, [pc, #344]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b54      	ldr	r3, [pc, #336]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8e:	4a52      	ldr	r2, [pc, #328]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a49      	ldr	r2, [pc, #292]	; (80010dc <HAL_GPIO_Init+0x2f0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x202>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a48      	ldr	r2, [pc, #288]	; (80010e0 <HAL_GPIO_Init+0x2f4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x1fe>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <HAL_GPIO_Init+0x2f8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x1fa>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a46      	ldr	r2, [pc, #280]	; (80010e8 <HAL_GPIO_Init+0x2fc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x1f6>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a45      	ldr	r2, [pc, #276]	; (80010ec <HAL_GPIO_Init+0x300>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x1f2>
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fde:	2307      	movs	r3, #7
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	4935      	ldr	r1, [pc, #212]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105c:	4a24      	ldr	r2, [pc, #144]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001086:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_GPIO_Init+0x304>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	f67f aea2 	bls.w	8000e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40013c00 	.word	0x40013c00

080010f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	4013      	ands	r3, r2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d006      	beq.n	8001118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fb14 	bl	8000740 <HAL_GPIO_EXTI_Callback>
  }
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40013c00 	.word	0x40013c00

08001124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e267      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d075      	beq.n	800122e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001142:	4b88      	ldr	r3, [pc, #544]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b04      	cmp	r3, #4
 800114c:	d00c      	beq.n	8001168 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	4b85      	ldr	r3, [pc, #532]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001156:	2b08      	cmp	r3, #8
 8001158:	d112      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115a:	4b82      	ldr	r3, [pc, #520]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001166:	d10b      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	4b7e      	ldr	r3, [pc, #504]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d05b      	beq.n	800122c <HAL_RCC_OscConfig+0x108>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d157      	bne.n	800122c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e242      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d106      	bne.n	8001198 <HAL_RCC_OscConfig+0x74>
 800118a:	4b76      	ldr	r3, [pc, #472]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a75      	ldr	r2, [pc, #468]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e01d      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x98>
 80011a2:	4b70      	ldr	r3, [pc, #448]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6f      	ldr	r2, [pc, #444]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b6d      	ldr	r3, [pc, #436]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6c      	ldr	r2, [pc, #432]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e00b      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 80011bc:	4b69      	ldr	r3, [pc, #420]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a68      	ldr	r2, [pc, #416]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a65      	ldr	r2, [pc, #404]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fd18 	bl	8000c10 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fd14 	bl	8000c10 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e207      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b5b      	ldr	r3, [pc, #364]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0xc0>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fd04 	bl	8000c10 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fd00 	bl	8000c10 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1f3      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	4b51      	ldr	r3, [pc, #324]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0xe8>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d063      	beq.n	8001302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800123a:	4b4a      	ldr	r3, [pc, #296]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001246:	4b47      	ldr	r3, [pc, #284]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800124e:	2b08      	cmp	r3, #8
 8001250:	d11c      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001252:	4b44      	ldr	r3, [pc, #272]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125e:	4b41      	ldr	r3, [pc, #260]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e1c7      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4937      	ldr	r1, [pc, #220]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	e03a      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_RCC_OscConfig+0x244>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fcb9 	bl	8000c10 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fcb5 	bl	8000c10 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1a8      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4925      	ldr	r1, [pc, #148]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_OscConfig+0x244>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fc98 	bl	8000c10 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fc94 	bl	8000c10 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e187      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d036      	beq.n	800137c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d016      	beq.n	8001344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_RCC_OscConfig+0x248>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff fc78 	bl	8000c10 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fc74 	bl	8000c10 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e167      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x200>
 8001342:	e01b      	b.n	800137c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_RCC_OscConfig+0x248>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134a:	f7ff fc61 	bl	8000c10 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	e00e      	b.n	8001370 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001352:	f7ff fc5d 	bl	8000c10 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d907      	bls.n	8001370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e150      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
 8001364:	40023800 	.word	0x40023800
 8001368:	42470000 	.word	0x42470000
 800136c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1ea      	bne.n	8001352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8097 	beq.w	80014b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138e:	4b81      	ldr	r3, [pc, #516]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10f      	bne.n	80013ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a7c      	ldr	r2, [pc, #496]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ba:	4b77      	ldr	r3, [pc, #476]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c6:	4b74      	ldr	r3, [pc, #464]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a73      	ldr	r2, [pc, #460]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fc1d 	bl	8000c10 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff fc19 	bl	8000c10 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e10c      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4b6a      	ldr	r3, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x2ea>
 8001400:	4b64      	ldr	r3, [pc, #400]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a63      	ldr	r2, [pc, #396]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
 800140c:	e01c      	b.n	8001448 <HAL_RCC_OscConfig+0x324>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x30c>
 8001416:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	4a5e      	ldr	r2, [pc, #376]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6713      	str	r3, [r2, #112]	; 0x70
 8001422:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0x324>
 8001430:	4b58      	ldr	r3, [pc, #352]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a57      	ldr	r2, [pc, #348]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
 800143c:	4b55      	ldr	r3, [pc, #340]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001440:	4a54      	ldr	r2, [pc, #336]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d015      	beq.n	800147c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fbde 	bl	8000c10 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001456:	e00a      	b.n	800146e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff fbda 	bl	8000c10 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0cb      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0ee      	beq.n	8001458 <HAL_RCC_OscConfig+0x334>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff fbc8 	bl	8000c10 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fbc4 	bl	8000c10 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0b5      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149a:	4b3e      	ldr	r3, [pc, #248]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ee      	bne.n	8001484 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ac:	4b39      	ldr	r3, [pc, #228]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a38      	ldr	r2, [pc, #224]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80a1 	beq.w	8001604 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d05c      	beq.n	8001588 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d141      	bne.n	800155a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_RCC_OscConfig+0x478>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb98 	bl	8000c10 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fb94 	bl	8000c10 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e087      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	3b01      	subs	r3, #1
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	491b      	ldr	r1, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x478>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fb6d 	bl	8000c10 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fb69 	bl	8000c10 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e05c      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x416>
 8001558:	e054      	b.n	8001604 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_RCC_OscConfig+0x478>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fb56 	bl	8000c10 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fb52 	bl	8000c10 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e045      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x444>
 8001586:	e03d      	b.n	8001604 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e038      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000
 800159c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x4ec>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d028      	beq.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d121      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d11a      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d8:	4293      	cmp	r3, r2
 80015da:	d111      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	3b01      	subs	r3, #1
 80015ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cc      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d90c      	bls.n	8001650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001672:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494d      	ldr	r1, [pc, #308]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d044      	beq.n	8001734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e06f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e067      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 0203 	bic.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4934      	ldr	r1, [pc, #208]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff fa84 	bl	8000c10 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff fa80 	bl	8000c10 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e04f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 020c 	and.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	429a      	cmp	r2, r3
 8001732:	d1eb      	bne.n	800170c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20c      	bcs.n	800175c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4916      	ldr	r1, [pc, #88]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490e      	ldr	r1, [pc, #56]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f821 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	490a      	ldr	r1, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	5ccb      	ldrb	r3, [r1, r3]
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f894 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00
 80017d0:	40023800 	.word	0x40023800
 80017d4:	08006504 	.word	0x08006504
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	b090      	sub	sp, #64	; 0x40
 80017e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d00d      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x40>
 8001804:	2b08      	cmp	r3, #8
 8001806:	f200 80a1 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x16c>
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x34>
 800180e:	2b04      	cmp	r3, #4
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x3a>
 8001812:	e09b      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_GetSysClockFreq+0x184>)
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001818:	e09b      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800181e:	e098      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001820:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182a:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d028      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	2200      	movs	r2, #0
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	627a      	str	r2, [r7, #36]	; 0x24
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001848:	2100      	movs	r1, #0
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800184c:	fb03 f201 	mul.w	r2, r3, r1
 8001850:	2300      	movs	r3, #0
 8001852:	fb00 f303 	mul.w	r3, r0, r3
 8001856:	4413      	add	r3, r2
 8001858:	4a43      	ldr	r2, [pc, #268]	; (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800185a:	fba0 1202 	umull	r1, r2, r0, r2
 800185e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001860:	460a      	mov	r2, r1
 8001862:	62ba      	str	r2, [r7, #40]	; 0x28
 8001864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001866:	4413      	add	r3, r2
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	2200      	movs	r2, #0
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	61fa      	str	r2, [r7, #28]
 8001872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800187a:	f7fe fcb1 	bl	80001e0 <__aeabi_uldivmod>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4613      	mov	r3, r2
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001886:	e053      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	2200      	movs	r2, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	617a      	str	r2, [r7, #20]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800189a:	f04f 0b00 	mov.w	fp, #0
 800189e:	4652      	mov	r2, sl
 80018a0:	465b      	mov	r3, fp
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0159      	lsls	r1, r3, #5
 80018ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b0:	0150      	lsls	r0, r2, #5
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	ebb2 080a 	subs.w	r8, r2, sl
 80018ba:	eb63 090b 	sbc.w	r9, r3, fp
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018d2:	ebb2 0408 	subs.w	r4, r2, r8
 80018d6:	eb63 0509 	sbc.w	r5, r3, r9
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	00eb      	lsls	r3, r5, #3
 80018e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e8:	00e2      	lsls	r2, r4, #3
 80018ea:	4614      	mov	r4, r2
 80018ec:	461d      	mov	r5, r3
 80018ee:	eb14 030a 	adds.w	r3, r4, sl
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	eb45 030b 	adc.w	r3, r5, fp
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001906:	4629      	mov	r1, r5
 8001908:	028b      	lsls	r3, r1, #10
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001910:	4621      	mov	r1, r4
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	2200      	movs	r2, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	60fa      	str	r2, [r7, #12]
 8001920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001924:	f7fe fc5c 	bl	80001e0 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_GetSysClockFreq+0x184>)
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001954:	4618      	mov	r0, r3
 8001956:	3740      	adds	r7, #64	; 0x40
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	017d7840 	.word	0x017d7840

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_RCC_GetHCLKFreq+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001988:	f7ff fff0 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08006514 	.word	0x08006514

080019ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b0:	f7ff ffdc 	bl	800196c <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	0b5b      	lsrs	r3, r3, #13
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	; (80019d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	08006514 	.word	0x08006514

080019d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	220f      	movs	r2, #15
 80019e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0203 	and.w	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_GetClockConfig+0x5c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <HAL_RCC_GetClockConfig+0x60>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0207 	and.w	r2, r3, #7
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	601a      	str	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e041      	b.n	8001ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f839 	bl	8001ad6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3304      	adds	r3, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f000 f9b2 	bl	8001de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d001      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e044      	b.n	8001b8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1e      	ldr	r2, [pc, #120]	; (8001b9c <HAL_TIM_Base_Start_IT+0xb0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d018      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x6c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2e:	d013      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x6c>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1a      	ldr	r2, [pc, #104]	; (8001ba0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00e      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x6c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d009      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x6c>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d004      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x6c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a16      	ldr	r2, [pc, #88]	; (8001bac <HAL_TIM_Base_Start_IT+0xc0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d111      	bne.n	8001b7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d010      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7a:	e007      	b.n	8001b8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	40000800 	.word	0x40000800
 8001ba8:	40000c00 	.word	0x40000c00
 8001bac:	40014000 	.word	0x40014000

08001bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d020      	beq.n	8001c14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01b      	beq.n	8001c14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0202 	mvn.w	r2, #2
 8001be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8d2 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c00:	e005      	b.n	8001c0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8c4 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8d5 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d020      	beq.n	8001c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01b      	beq.n	8001c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0204 	mvn.w	r2, #4
 8001c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2202      	movs	r2, #2
 8001c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8ac 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c4c:	e005      	b.n	8001c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f89e 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8af 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d020      	beq.n	8001cac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01b      	beq.n	8001cac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0208 	mvn.w	r2, #8
 8001c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2204      	movs	r2, #4
 8001c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f886 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f878 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f889 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d020      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01b      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0210 	mvn.w	r2, #16
 8001cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f860 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f852 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f863 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00c      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0201 	mvn.w	r2, #1
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7fe fd5a 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8e6 	bl	8001f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00c      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f834 	bl	8001dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00c      	beq.n	8001d88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0220 	mvn.w	r2, #32
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8b8 	bl	8001ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3a      	ldr	r2, [pc, #232]	; (8001edc <TIM_Base_SetConfig+0xfc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00f      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfe:	d00b      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a37      	ldr	r2, [pc, #220]	; (8001ee0 <TIM_Base_SetConfig+0x100>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d007      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a36      	ldr	r2, [pc, #216]	; (8001ee4 <TIM_Base_SetConfig+0x104>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a35      	ldr	r2, [pc, #212]	; (8001ee8 <TIM_Base_SetConfig+0x108>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d108      	bne.n	8001e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a2b      	ldr	r2, [pc, #172]	; (8001edc <TIM_Base_SetConfig+0xfc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01b      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d017      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <TIM_Base_SetConfig+0x100>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <TIM_Base_SetConfig+0x104>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00f      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <TIM_Base_SetConfig+0x108>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00b      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a25      	ldr	r2, [pc, #148]	; (8001eec <TIM_Base_SetConfig+0x10c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <TIM_Base_SetConfig+0x110>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <TIM_Base_SetConfig+0x114>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d108      	bne.n	8001e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <TIM_Base_SetConfig+0xfc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f023 0201 	bic.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40014000 	.word	0x40014000
 8001ef0:	40014400 	.word	0x40014400
 8001ef4:	40014800 	.word	0x40014800

08001ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e042      	b.n	8001fb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fc86 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	; 0x24
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f973 	bl	8002250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d175      	bne.n	80020cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_UART_Transmit+0x2c>
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e06e      	b.n	80020ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2221      	movs	r2, #33	; 0x21
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ffe:	f7fe fe07 	bl	8000c10 <HAL_GetTick>
 8002002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	88fa      	ldrh	r2, [r7, #6]
 8002008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	88fa      	ldrh	r2, [r7, #6]
 800200e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002018:	d108      	bne.n	800202c <HAL_UART_Transmit+0x6c>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d104      	bne.n	800202c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	e003      	b.n	8002034 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002034:	e02e      	b.n	8002094 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f848 	bl	80020d6 <UART_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e03a      	b.n	80020ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10b      	bne.n	8002076 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800206c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	3302      	adds	r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	e007      	b.n	8002086 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3301      	adds	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1cb      	bne.n	8002036 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2200      	movs	r2, #0
 80020a6:	2140      	movs	r1, #64	; 0x40
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f814 	bl	80020d6 <UART_WaitOnFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e006      	b.n	80020ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e000      	b.n	80020ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020cc:	2302      	movs	r3, #2
  }
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e6:	e03b      	b.n	8002160 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ee:	d037      	beq.n	8002160 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f0:	f7fe fd8e 	bl	8000c10 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	6a3a      	ldr	r2, [r7, #32]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d302      	bcc.n	8002106 <UART_WaitOnFlagUntilTimeout+0x30>
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e03a      	b.n	8002180 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d023      	beq.n	8002160 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b80      	cmp	r3, #128	; 0x80
 800211c:	d020      	beq.n	8002160 <UART_WaitOnFlagUntilTimeout+0x8a>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b40      	cmp	r3, #64	; 0x40
 8002122:	d01d      	beq.n	8002160 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b08      	cmp	r3, #8
 8002130:	d116      	bne.n	8002160 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f81d 	bl	8002188 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2208      	movs	r2, #8
 8002152:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e00f      	b.n	8002180 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4013      	ands	r3, r2
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	429a      	cmp	r2, r3
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	429a      	cmp	r2, r3
 800217c:	d0b4      	beq.n	80020e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002188:	b480      	push	{r7}
 800218a:	b095      	sub	sp, #84	; 0x54
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	330c      	adds	r3, #12
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219a:	e853 3f00 	ldrex	r3, [r3]
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80021a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	330c      	adds	r3, #12
 80021ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021b0:	643a      	str	r2, [r7, #64]	; 0x40
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021b8:	e841 2300 	strex	r3, r2, [r1]
 80021bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e5      	bne.n	8002190 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3314      	adds	r3, #20
 80021ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	e853 3f00 	ldrex	r3, [r3]
 80021d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	64bb      	str	r3, [r7, #72]	; 0x48
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3314      	adds	r3, #20
 80021e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ec:	e841 2300 	strex	r3, r2, [r1]
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e5      	bne.n	80021c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d119      	bne.n	8002234 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	330c      	adds	r3, #12
 8002206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	e853 3f00 	ldrex	r3, [r3]
 800220e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f023 0310 	bic.w	r3, r3, #16
 8002216:	647b      	str	r3, [r7, #68]	; 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	330c      	adds	r3, #12
 800221e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002220:	61ba      	str	r2, [r7, #24]
 8002222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002224:	6979      	ldr	r1, [r7, #20]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	e841 2300 	strex	r3, r2, [r1]
 800222c:	613b      	str	r3, [r7, #16]
   return(result);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e5      	bne.n	8002200 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002242:	bf00      	nop
 8002244:	3754      	adds	r7, #84	; 0x54
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002254:	b0c0      	sub	sp, #256	; 0x100
 8002256:	af00      	add	r7, sp, #0
 8002258:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226c:	68d9      	ldr	r1, [r3, #12]
 800226e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	ea40 0301 	orr.w	r3, r0, r1
 8002278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800227a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	431a      	orrs	r2, r3
 8002288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	431a      	orrs	r2, r3
 8002290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800229c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80022a8:	f021 010c 	bic.w	r1, r1, #12
 80022ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022b6:	430b      	orrs	r3, r1
 80022b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ca:	6999      	ldr	r1, [r3, #24]
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	ea40 0301 	orr.w	r3, r0, r1
 80022d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b8f      	ldr	r3, [pc, #572]	; (800251c <UART_SetConfig+0x2cc>)
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d005      	beq.n	80022f0 <UART_SetConfig+0xa0>
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b8d      	ldr	r3, [pc, #564]	; (8002520 <UART_SetConfig+0x2d0>)
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d104      	bne.n	80022fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022f0:	f7ff fb5c 	bl	80019ac <HAL_RCC_GetPCLK2Freq>
 80022f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022f8:	e003      	b.n	8002302 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022fa:	f7ff fb43 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 80022fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230c:	f040 810c 	bne.w	8002528 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002314:	2200      	movs	r2, #0
 8002316:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800231a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800231e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002322:	4622      	mov	r2, r4
 8002324:	462b      	mov	r3, r5
 8002326:	1891      	adds	r1, r2, r2
 8002328:	65b9      	str	r1, [r7, #88]	; 0x58
 800232a:	415b      	adcs	r3, r3
 800232c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800232e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002332:	4621      	mov	r1, r4
 8002334:	eb12 0801 	adds.w	r8, r2, r1
 8002338:	4629      	mov	r1, r5
 800233a:	eb43 0901 	adc.w	r9, r3, r1
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800234a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800234e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002352:	4690      	mov	r8, r2
 8002354:	4699      	mov	r9, r3
 8002356:	4623      	mov	r3, r4
 8002358:	eb18 0303 	adds.w	r3, r8, r3
 800235c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002360:	462b      	mov	r3, r5
 8002362:	eb49 0303 	adc.w	r3, r9, r3
 8002366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002376:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800237a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800237e:	460b      	mov	r3, r1
 8002380:	18db      	adds	r3, r3, r3
 8002382:	653b      	str	r3, [r7, #80]	; 0x50
 8002384:	4613      	mov	r3, r2
 8002386:	eb42 0303 	adc.w	r3, r2, r3
 800238a:	657b      	str	r3, [r7, #84]	; 0x54
 800238c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002390:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002394:	f7fd ff24 	bl	80001e0 <__aeabi_uldivmod>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4b61      	ldr	r3, [pc, #388]	; (8002524 <UART_SetConfig+0x2d4>)
 800239e:	fba3 2302 	umull	r2, r3, r3, r2
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	011c      	lsls	r4, r3, #4
 80023a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023aa:	2200      	movs	r2, #0
 80023ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80023b8:	4642      	mov	r2, r8
 80023ba:	464b      	mov	r3, r9
 80023bc:	1891      	adds	r1, r2, r2
 80023be:	64b9      	str	r1, [r7, #72]	; 0x48
 80023c0:	415b      	adcs	r3, r3
 80023c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023c8:	4641      	mov	r1, r8
 80023ca:	eb12 0a01 	adds.w	sl, r2, r1
 80023ce:	4649      	mov	r1, r9
 80023d0:	eb43 0b01 	adc.w	fp, r3, r1
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023e8:	4692      	mov	sl, r2
 80023ea:	469b      	mov	fp, r3
 80023ec:	4643      	mov	r3, r8
 80023ee:	eb1a 0303 	adds.w	r3, sl, r3
 80023f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023f6:	464b      	mov	r3, r9
 80023f8:	eb4b 0303 	adc.w	r3, fp, r3
 80023fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800240c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002410:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002414:	460b      	mov	r3, r1
 8002416:	18db      	adds	r3, r3, r3
 8002418:	643b      	str	r3, [r7, #64]	; 0x40
 800241a:	4613      	mov	r3, r2
 800241c:	eb42 0303 	adc.w	r3, r2, r3
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
 8002422:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002426:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800242a:	f7fd fed9 	bl	80001e0 <__aeabi_uldivmod>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4611      	mov	r1, r2
 8002434:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <UART_SetConfig+0x2d4>)
 8002436:	fba3 2301 	umull	r2, r3, r3, r1
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2264      	movs	r2, #100	; 0x64
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	1acb      	subs	r3, r1, r3
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <UART_SetConfig+0x2d4>)
 800244c:	fba3 2302 	umull	r2, r3, r3, r2
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002458:	441c      	add	r4, r3
 800245a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800245e:	2200      	movs	r2, #0
 8002460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002464:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002468:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800246c:	4642      	mov	r2, r8
 800246e:	464b      	mov	r3, r9
 8002470:	1891      	adds	r1, r2, r2
 8002472:	63b9      	str	r1, [r7, #56]	; 0x38
 8002474:	415b      	adcs	r3, r3
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800247c:	4641      	mov	r1, r8
 800247e:	1851      	adds	r1, r2, r1
 8002480:	6339      	str	r1, [r7, #48]	; 0x30
 8002482:	4649      	mov	r1, r9
 8002484:	414b      	adcs	r3, r1
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002494:	4659      	mov	r1, fp
 8002496:	00cb      	lsls	r3, r1, #3
 8002498:	4651      	mov	r1, sl
 800249a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800249e:	4651      	mov	r1, sl
 80024a0:	00ca      	lsls	r2, r1, #3
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	4603      	mov	r3, r0
 80024a8:	4642      	mov	r2, r8
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024b0:	464b      	mov	r3, r9
 80024b2:	460a      	mov	r2, r1
 80024b4:	eb42 0303 	adc.w	r3, r2, r3
 80024b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80024cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80024d0:	460b      	mov	r3, r1
 80024d2:	18db      	adds	r3, r3, r3
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d6:	4613      	mov	r3, r2
 80024d8:	eb42 0303 	adc.w	r3, r2, r3
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024e6:	f7fd fe7b 	bl	80001e0 <__aeabi_uldivmod>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <UART_SetConfig+0x2d4>)
 80024f0:	fba3 1302 	umull	r1, r3, r3, r2
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	2164      	movs	r1, #100	; 0x64
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	3332      	adds	r3, #50	; 0x32
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <UART_SetConfig+0x2d4>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	f003 0207 	and.w	r2, r3, #7
 800250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4422      	add	r2, r4
 8002516:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002518:	e106      	b.n	8002728 <UART_SetConfig+0x4d8>
 800251a:	bf00      	nop
 800251c:	40011000 	.word	0x40011000
 8002520:	40011400 	.word	0x40011400
 8002524:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800252c:	2200      	movs	r2, #0
 800252e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002532:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002536:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800253a:	4642      	mov	r2, r8
 800253c:	464b      	mov	r3, r9
 800253e:	1891      	adds	r1, r2, r2
 8002540:	6239      	str	r1, [r7, #32]
 8002542:	415b      	adcs	r3, r3
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800254a:	4641      	mov	r1, r8
 800254c:	1854      	adds	r4, r2, r1
 800254e:	4649      	mov	r1, r9
 8002550:	eb43 0501 	adc.w	r5, r3, r1
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	00eb      	lsls	r3, r5, #3
 800255e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002562:	00e2      	lsls	r2, r4, #3
 8002564:	4614      	mov	r4, r2
 8002566:	461d      	mov	r5, r3
 8002568:	4643      	mov	r3, r8
 800256a:	18e3      	adds	r3, r4, r3
 800256c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002570:	464b      	mov	r3, r9
 8002572:	eb45 0303 	adc.w	r3, r5, r3
 8002576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800257a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002596:	4629      	mov	r1, r5
 8002598:	008b      	lsls	r3, r1, #2
 800259a:	4621      	mov	r1, r4
 800259c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025a0:	4621      	mov	r1, r4
 80025a2:	008a      	lsls	r2, r1, #2
 80025a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80025a8:	f7fd fe1a 	bl	80001e0 <__aeabi_uldivmod>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4b60      	ldr	r3, [pc, #384]	; (8002734 <UART_SetConfig+0x4e4>)
 80025b2:	fba3 2302 	umull	r2, r3, r3, r2
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	011c      	lsls	r4, r3, #4
 80025ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025be:	2200      	movs	r2, #0
 80025c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80025cc:	4642      	mov	r2, r8
 80025ce:	464b      	mov	r3, r9
 80025d0:	1891      	adds	r1, r2, r2
 80025d2:	61b9      	str	r1, [r7, #24]
 80025d4:	415b      	adcs	r3, r3
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025dc:	4641      	mov	r1, r8
 80025de:	1851      	adds	r1, r2, r1
 80025e0:	6139      	str	r1, [r7, #16]
 80025e2:	4649      	mov	r1, r9
 80025e4:	414b      	adcs	r3, r1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025f4:	4659      	mov	r1, fp
 80025f6:	00cb      	lsls	r3, r1, #3
 80025f8:	4651      	mov	r1, sl
 80025fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025fe:	4651      	mov	r1, sl
 8002600:	00ca      	lsls	r2, r1, #3
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	4603      	mov	r3, r0
 8002608:	4642      	mov	r2, r8
 800260a:	189b      	adds	r3, r3, r2
 800260c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002610:	464b      	mov	r3, r9
 8002612:	460a      	mov	r2, r1
 8002614:	eb42 0303 	adc.w	r3, r2, r3
 8002618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	67bb      	str	r3, [r7, #120]	; 0x78
 8002626:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002634:	4649      	mov	r1, r9
 8002636:	008b      	lsls	r3, r1, #2
 8002638:	4641      	mov	r1, r8
 800263a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800263e:	4641      	mov	r1, r8
 8002640:	008a      	lsls	r2, r1, #2
 8002642:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002646:	f7fd fdcb 	bl	80001e0 <__aeabi_uldivmod>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4611      	mov	r1, r2
 8002650:	4b38      	ldr	r3, [pc, #224]	; (8002734 <UART_SetConfig+0x4e4>)
 8002652:	fba3 2301 	umull	r2, r3, r3, r1
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2264      	movs	r2, #100	; 0x64
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	1acb      	subs	r3, r1, r3
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	3332      	adds	r3, #50	; 0x32
 8002664:	4a33      	ldr	r2, [pc, #204]	; (8002734 <UART_SetConfig+0x4e4>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002670:	441c      	add	r4, r3
 8002672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002676:	2200      	movs	r2, #0
 8002678:	673b      	str	r3, [r7, #112]	; 0x70
 800267a:	677a      	str	r2, [r7, #116]	; 0x74
 800267c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002680:	4642      	mov	r2, r8
 8002682:	464b      	mov	r3, r9
 8002684:	1891      	adds	r1, r2, r2
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	415b      	adcs	r3, r3
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002690:	4641      	mov	r1, r8
 8002692:	1851      	adds	r1, r2, r1
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	4649      	mov	r1, r9
 8002698:	414b      	adcs	r3, r1
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026a8:	4659      	mov	r1, fp
 80026aa:	00cb      	lsls	r3, r1, #3
 80026ac:	4651      	mov	r1, sl
 80026ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026b2:	4651      	mov	r1, sl
 80026b4:	00ca      	lsls	r2, r1, #3
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	4642      	mov	r2, r8
 80026be:	189b      	adds	r3, r3, r2
 80026c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80026c2:	464b      	mov	r3, r9
 80026c4:	460a      	mov	r2, r1
 80026c6:	eb42 0303 	adc.w	r3, r2, r3
 80026ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	663b      	str	r3, [r7, #96]	; 0x60
 80026d6:	667a      	str	r2, [r7, #100]	; 0x64
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80026e4:	4649      	mov	r1, r9
 80026e6:	008b      	lsls	r3, r1, #2
 80026e8:	4641      	mov	r1, r8
 80026ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ee:	4641      	mov	r1, r8
 80026f0:	008a      	lsls	r2, r1, #2
 80026f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026f6:	f7fd fd73 	bl	80001e0 <__aeabi_uldivmod>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <UART_SetConfig+0x4e4>)
 8002700:	fba3 1302 	umull	r1, r3, r3, r2
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	2164      	movs	r1, #100	; 0x64
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	3332      	adds	r3, #50	; 0x32
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <UART_SetConfig+0x4e4>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	f003 020f 	and.w	r2, r3, #15
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4422      	add	r2, r4
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	bf00      	nop
 800272a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800272e:	46bd      	mov	sp, r7
 8002730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002734:	51eb851f 	.word	0x51eb851f

08002738 <__NVIC_SetPriority>:
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	6039      	str	r1, [r7, #0]
 8002742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002748:	2b00      	cmp	r3, #0
 800274a:	db0a      	blt.n	8002762 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	b2da      	uxtb	r2, r3
 8002750:	490c      	ldr	r1, [pc, #48]	; (8002784 <__NVIC_SetPriority+0x4c>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	0112      	lsls	r2, r2, #4
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	440b      	add	r3, r1
 800275c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002760:	e00a      	b.n	8002778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4908      	ldr	r1, [pc, #32]	; (8002788 <__NVIC_SetPriority+0x50>)
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	3b04      	subs	r3, #4
 8002770:	0112      	lsls	r2, r2, #4
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	440b      	add	r3, r1
 8002776:	761a      	strb	r2, [r3, #24]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000e100 	.word	0xe000e100
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Handler+0x1c>)
 8002792:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002794:	f002 f89c 	bl	80048d0 <xTaskGetSchedulerState>
 8002798:	4603      	mov	r3, r0
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800279e:	f002 febb 	bl	8005518 <xPortSysTickHandler>
  }
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80027b0:	2100      	movs	r1, #0
 80027b2:	f06f 0004 	mvn.w	r0, #4
 80027b6:	f7ff ffbf 	bl	8002738 <__NVIC_SetPriority>
#endif
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c6:	f3ef 8305 	mrs	r3, IPSR
 80027ca:	603b      	str	r3, [r7, #0]
  return(result);
 80027cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80027d2:	f06f 0305 	mvn.w	r3, #5
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	e00c      	b.n	80027f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <osKernelInitialize+0x44>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <osKernelInitialize+0x44>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	e002      	b.n	80027f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027f4:	687b      	ldr	r3, [r7, #4]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000130 	.word	0x20000130

08002808 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800280e:	f3ef 8305 	mrs	r3, IPSR
 8002812:	603b      	str	r3, [r7, #0]
  return(result);
 8002814:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <osKernelStart+0x1a>
    stat = osErrorISR;
 800281a:	f06f 0305 	mvn.w	r3, #5
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	e010      	b.n	8002844 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <osKernelStart+0x48>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d109      	bne.n	800283e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800282a:	f7ff ffbf 	bl	80027ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <osKernelStart+0x48>)
 8002830:	2202      	movs	r2, #2
 8002832:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002834:	f001 fb52 	bl	8003edc <vTaskStartScheduler>
      stat = osOK;
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	e002      	b.n	8002844 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
 8002842:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002844:	687b      	ldr	r3, [r7, #4]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000130 	.word	0x20000130

08002854 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b08e      	sub	sp, #56	; 0x38
 8002858:	af04      	add	r7, sp, #16
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002864:	f3ef 8305 	mrs	r3, IPSR
 8002868:	617b      	str	r3, [r7, #20]
  return(result);
 800286a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800286c:	2b00      	cmp	r3, #0
 800286e:	d17e      	bne.n	800296e <osThreadNew+0x11a>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d07b      	beq.n	800296e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800287a:	2318      	movs	r3, #24
 800287c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d045      	beq.n	800291a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <osThreadNew+0x48>
        name = attr->name;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <osThreadNew+0x6e>
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b38      	cmp	r3, #56	; 0x38
 80028b4:	d805      	bhi.n	80028c2 <osThreadNew+0x6e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <osThreadNew+0x72>
        return (NULL);
 80028c2:	2300      	movs	r3, #0
 80028c4:	e054      	b.n	8002970 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00e      	beq.n	80028fc <osThreadNew+0xa8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2ba7      	cmp	r3, #167	; 0xa7
 80028e4:	d90a      	bls.n	80028fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <osThreadNew+0xa8>
        mem = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e010      	b.n	800291e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10c      	bne.n	800291e <osThreadNew+0xca>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <osThreadNew+0xca>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <osThreadNew+0xca>
          mem = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	e001      	b.n	800291e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d110      	bne.n	8002946 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800292c:	9202      	str	r2, [sp, #8]
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6a3a      	ldr	r2, [r7, #32]
 8002938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f001 f8e2 	bl	8003b04 <xTaskCreateStatic>
 8002940:	4603      	mov	r3, r0
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	e013      	b.n	800296e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d110      	bne.n	800296e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	b29a      	uxth	r2, r3
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f001 f92d 	bl	8003bbe <xTaskCreate>
 8002964:	4603      	mov	r3, r0
 8002966:	2b01      	cmp	r3, #1
 8002968:	d001      	beq.n	800296e <osThreadNew+0x11a>
            hTask = NULL;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800296e:	693b      	ldr	r3, [r7, #16]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002980:	f3ef 8305 	mrs	r3, IPSR
 8002984:	60bb      	str	r3, [r7, #8]
  return(result);
 8002986:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <osDelay+0x1c>
    stat = osErrorISR;
 800298c:	f06f 0305 	mvn.w	r3, #5
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e007      	b.n	80029a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f001 fa68 	bl	8003e74 <vTaskDelay>
    }
  }

  return (stat);
 80029a4:	68fb      	ldr	r3, [r7, #12]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ba:	f3ef 8305 	mrs	r3, IPSR
 80029be:	60fb      	str	r3, [r7, #12]
  return(result);
 80029c0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d12d      	bne.n	8002a22 <osEventFlagsNew+0x74>
    mem = -1;
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ca:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <osEventFlagsNew+0x3a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b1f      	cmp	r3, #31
 80029e0:	d902      	bls.n	80029e8 <osEventFlagsNew+0x3a>
        mem = 1;
 80029e2:	2301      	movs	r3, #1
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	e00c      	b.n	8002a02 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d108      	bne.n	8002a02 <osEventFlagsNew+0x54>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d104      	bne.n	8002a02 <osEventFlagsNew+0x54>
          mem = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	e001      	b.n	8002a02 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f8eb 	bl	8002be8 <xEventGroupCreateStatic>
 8002a12:	6178      	str	r0, [r7, #20]
 8002a14:	e005      	b.n	8002a22 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002a1c:	f000 f91b 	bl	8002c56 <xEventGroupCreate>
 8002a20:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002a22:	697b      	ldr	r3, [r7, #20]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <osEventFlagsSet+0x1e>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8002a4a:	f06f 0303 	mvn.w	r3, #3
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	e028      	b.n	8002aa4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a52:	f3ef 8305 	mrs	r3, IPSR
 8002a56:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a58:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01d      	beq.n	8002a9a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002a62:	f107 0308 	add.w	r3, r7, #8
 8002a66:	461a      	mov	r2, r3
 8002a68:	6839      	ldr	r1, [r7, #0]
 8002a6a:	6938      	ldr	r0, [r7, #16]
 8002a6c:	f000 fa96 	bl	8002f9c <xEventGroupSetBitsFromISR>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8002a76:	f06f 0302 	mvn.w	r3, #2
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	e012      	b.n	8002aa4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00d      	beq.n	8002aa4 <osEventFlagsSet+0x78>
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <osEventFlagsSet+0x84>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	e004      	b.n	8002aa4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	6938      	ldr	r0, [r7, #16]
 8002a9e:	f000 f9c3 	bl	8002e28 <xEventGroupSetBits>
 8002aa2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002aa4:	697b      	ldr	r3, [r7, #20]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000ed04 	.word	0xe000ed04

08002ab4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	; 0x30
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <osEventFlagsWait+0x22>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8002ad6:	f06f 0303 	mvn.w	r3, #3
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	e04b      	b.n	8002b76 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ade:	f3ef 8305 	mrs	r3, IPSR
 8002ae2:	617b      	str	r3, [r7, #20]
  return(result);
 8002ae4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8002aea:	f06f 0305 	mvn.w	r3, #5
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	e041      	b.n	8002b76 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	e001      	b.n	8002b06 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	e001      	b.n	8002b1a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	6a3a      	ldr	r2, [r7, #32]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	69b8      	ldr	r0, [r7, #24]
 8002b26:	f000 f8b1 	bl	8002c8c <xEventGroupWaitBits>
 8002b2a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d010      	beq.n	8002b58 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d019      	beq.n	8002b76 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8002b48:	f06f 0301 	mvn.w	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	e012      	b.n	8002b76 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002b50:	f06f 0302 	mvn.w	r3, #2
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	e00e      	b.n	8002b76 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8002b68:	f06f 0301 	mvn.w	r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	e002      	b.n	8002b76 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002b70:	f06f 0302 	mvn.w	r3, #2
 8002b74:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002b76:	69fb      	ldr	r3, [r7, #28]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3728      	adds	r7, #40	; 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <vApplicationGetIdleTaskMemory+0x2c>)
 8002b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4a06      	ldr	r2, [pc, #24]	; (8002bb0 <vApplicationGetIdleTaskMemory+0x30>)
 8002b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	601a      	str	r2, [r3, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000134 	.word	0x20000134
 8002bb0:	200001dc 	.word	0x200001dc

08002bb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a07      	ldr	r2, [pc, #28]	; (8002be0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002bc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4a06      	ldr	r2, [pc, #24]	; (8002be4 <vApplicationGetTimerTaskMemory+0x30>)
 8002bca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd2:	601a      	str	r2, [r3, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	200003dc 	.word	0x200003dc
 8002be4:	20000484 	.word	0x20000484

08002be8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d00a      	beq.n	8002c2c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	60fb      	str	r3, [r7, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	e7fe      	b.n	8002c2a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f9bf 	bl	8002fc4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002c4c:	697b      	ldr	r3, [r7, #20]
	}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002c5c:	2020      	movs	r0, #32
 8002c5e:	f002 fceb 	bl	8005638 <pvPortMalloc>
 8002c62:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f9a5 	bl	8002fc4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002c80:	687b      	ldr	r3, [r7, #4]
	}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b090      	sub	sp, #64	; 0x40
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xEventGroupWaitBits+0x36>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	623b      	str	r3, [r7, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <xEventGroupWaitBits+0x56>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	61fb      	str	r3, [r7, #28]
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <xEventGroupWaitBits+0x72>
	__asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	61bb      	str	r3, [r7, #24]
}
 8002cfa:	bf00      	nop
 8002cfc:	e7fe      	b.n	8002cfc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cfe:	f001 fde7 	bl	80048d0 <xTaskGetSchedulerState>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <xEventGroupWaitBits+0x82>
 8002d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <xEventGroupWaitBits+0x86>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xEventGroupWaitBits+0x88>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	617b      	str	r3, [r7, #20]
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8002d2e:	f001 f945 	bl	8003fbc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d3e:	f000 f90b 	bl	8002f58 <prvTestWaitCondition>
 8002d42:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00e      	beq.n	8002d68 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d028      	beq.n	8002daa <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	401a      	ands	r2, r3
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e020      	b.n	8002daa <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002d72:	2301      	movs	r3, #1
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
 8002d76:	e018      	b.n	8002daa <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d96:	1d18      	adds	r0, r3, #4
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002da0:	4619      	mov	r1, r3
 8002da2:	f001 fb09 	bl	80043b8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002daa:	f001 f915 	bl	8003fd8 <xTaskResumeAll>
 8002dae:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d031      	beq.n	8002e1a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <xEventGroupWaitBits+0x198>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002dcc:	f001 fe0c 	bl	80049e8 <uxTaskResetEventItemValue>
 8002dd0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d11a      	bne.n	8002e12 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8002ddc:	f002 fb0a 	bl	80053f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002dec:	f000 f8b4 	bl	8002f58 <prvTestWaitCondition>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	401a      	ands	r2, r3
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002e0e:	f002 fb21 	bl	8005454 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3740      	adds	r7, #64	; 0x40
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	e000ed04 	.word	0xe000ed04

08002e28 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08e      	sub	sp, #56	; 0x38
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002e32:	2300      	movs	r3, #0
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <xEventGroupSetBits+0x32>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	613b      	str	r3, [r7, #16]
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <xEventGroupSetBits+0x52>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	60fb      	str	r3, [r7, #12]
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	3308      	adds	r3, #8
 8002e84:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002e86:	f001 f899 	bl	8003fbc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002e9c:	e03c      	b.n	8002f18 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002eb4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ebc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d108      	bne.n	8002eda <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed8:	e008      	b.n	8002eec <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d101      	bne.n	8002eec <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f10:	f001 fb1e 	bl	8004550 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1be      	bne.n	8002e9e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	43db      	mvns	r3, r3
 8002f28:	401a      	ands	r2, r3
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002f2e:	f001 f853 	bl	8003fd8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	681b      	ldr	r3, [r3, #0]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3738      	adds	r7, #56	; 0x38
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002f48:	6839      	ldr	r1, [r7, #0]
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ff6c 	bl	8002e28 <xEventGroupSetBits>
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e007      	b.n	8002f8e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4013      	ands	r3, r2
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d101      	bne.n	8002f8e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002f8e:	697b      	ldr	r3, [r7, #20]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	68f9      	ldr	r1, [r7, #12]
 8002fae:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <xEventGroupSetBitsFromISR+0x24>)
 8002fb0:	f002 f8d4 	bl	800515c <xTimerPendFunctionCallFromISR>
 8002fb4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8002fb6:	697b      	ldr	r3, [r7, #20]
	}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	08002f3f 	.word	0x08002f3f

08002fc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f103 0208 	add.w	r2, r3, #8
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f103 0208 	add.w	r2, r3, #8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f103 0208 	add.w	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d103      	bne.n	8003086 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e00c      	b.n	80030a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3308      	adds	r3, #8
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	e002      	b.n	8003094 <vListInsert+0x2e>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	429a      	cmp	r2, r3
 800309e:	d2f6      	bcs.n	800308e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6892      	ldr	r2, [r2, #8]
 80030ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6852      	ldr	r2, [r2, #4]
 80030f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d103      	bne.n	800310c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	1e5a      	subs	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <xQueueGenericReset+0x2a>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	60bb      	str	r3, [r7, #8]
}
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003156:	f002 f94d 	bl	80053f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	441a      	add	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003186:	3b01      	subs	r3, #1
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	441a      	add	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	22ff      	movs	r2, #255	; 0xff
 800319a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	22ff      	movs	r2, #255	; 0xff
 80031a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d114      	bne.n	80031d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01a      	beq.n	80031ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3310      	adds	r3, #16
 80031b8:	4618      	mov	r0, r3
 80031ba:	f001 f965 	bl	8004488 <xTaskRemoveFromEventList>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d012      	beq.n	80031ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <xQueueGenericReset+0xcc>)
 80031c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	e009      	b.n	80031ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3310      	adds	r3, #16
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fef2 	bl	8002fc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3324      	adds	r3, #36	; 0x24
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff feed 	bl	8002fc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031ea:	f002 f933 	bl	8005454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031ee:	2301      	movs	r3, #1
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	e000ed04 	.word	0xe000ed04

080031fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08e      	sub	sp, #56	; 0x38
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003222:	bf00      	nop
 8003224:	e7fe      	b.n	8003224 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <xQueueGenericCreateStatic+0x52>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <xQueueGenericCreateStatic+0x56>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <xQueueGenericCreateStatic+0x58>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	623b      	str	r3, [r7, #32]
}
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <xQueueGenericCreateStatic+0x7e>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <xQueueGenericCreateStatic+0x82>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <xQueueGenericCreateStatic+0x84>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	61fb      	str	r3, [r7, #28]
}
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800329a:	2350      	movs	r3, #80	; 0x50
 800329c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b50      	cmp	r3, #80	; 0x50
 80032a2:	d00a      	beq.n	80032ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	61bb      	str	r3, [r7, #24]
}
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f805 	bl	80032ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3730      	adds	r7, #48	; 0x30
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e002      	b.n	800330e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800331a:	2101      	movs	r1, #1
 800331c:	69b8      	ldr	r0, [r7, #24]
 800331e:	f7ff ff05 	bl	800312c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08e      	sub	sp, #56	; 0x38
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <xQueueGenericSend+0x32>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003362:	bf00      	nop
 8003364:	e7fe      	b.n	8003364 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <xQueueGenericSend+0x40>
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <xQueueGenericSend+0x44>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <xQueueGenericSend+0x46>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <xQueueGenericSend+0x60>
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003390:	bf00      	nop
 8003392:	e7fe      	b.n	8003392 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d103      	bne.n	80033a2 <xQueueGenericSend+0x6e>
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <xQueueGenericSend+0x72>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <xQueueGenericSend+0x74>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	623b      	str	r3, [r7, #32]
}
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033c2:	f001 fa85 	bl	80048d0 <xTaskGetSchedulerState>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <xQueueGenericSend+0x9e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <xQueueGenericSend+0xa2>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <xQueueGenericSend+0xa4>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	61fb      	str	r3, [r7, #28]
}
 80033ee:	bf00      	nop
 80033f0:	e7fe      	b.n	80033f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033f2:	f001 ffff 	bl	80053f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <xQueueGenericSend+0xd4>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d129      	bne.n	800345c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800340e:	f000 fa0b 	bl	8003828 <prvCopyDataToQueue>
 8003412:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d010      	beq.n	800343e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	3324      	adds	r3, #36	; 0x24
 8003420:	4618      	mov	r0, r3
 8003422:	f001 f831 	bl	8004488 <xTaskRemoveFromEventList>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800342c:	4b3f      	ldr	r3, [pc, #252]	; (800352c <xQueueGenericSend+0x1f8>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	e00a      	b.n	8003454 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003444:	4b39      	ldr	r3, [pc, #228]	; (800352c <xQueueGenericSend+0x1f8>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003454:	f001 fffe 	bl	8005454 <vPortExitCritical>
				return pdPASS;
 8003458:	2301      	movs	r3, #1
 800345a:	e063      	b.n	8003524 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003462:	f001 fff7 	bl	8005454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003466:	2300      	movs	r3, #0
 8003468:	e05c      	b.n	8003524 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	4618      	mov	r0, r3
 8003476:	f001 f8cd 	bl	8004614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800347a:	2301      	movs	r3, #1
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800347e:	f001 ffe9 	bl	8005454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003482:	f000 fd9b 	bl	8003fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003486:	f001 ffb5 	bl	80053f4 <vPortEnterCritical>
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003490:	b25b      	sxtb	r3, r3
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d103      	bne.n	80034a0 <xQueueGenericSend+0x16c>
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034a6:	b25b      	sxtb	r3, r3
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d103      	bne.n	80034b6 <xQueueGenericSend+0x182>
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b6:	f001 ffcd 	bl	8005454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ba:	1d3a      	adds	r2, r7, #4
 80034bc:	f107 0314 	add.w	r3, r7, #20
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f8bc 	bl	8004640 <xTaskCheckForTimeOut>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d124      	bne.n	8003518 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034d0:	f000 faa2 	bl	8003a18 <prvIsQueueFull>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d018      	beq.n	800350c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	3310      	adds	r3, #16
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 ff44 	bl	8004370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ea:	f000 fa2d 	bl	8003948 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034ee:	f000 fd73 	bl	8003fd8 <xTaskResumeAll>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f47f af7c 	bne.w	80033f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80034fa:	4b0c      	ldr	r3, [pc, #48]	; (800352c <xQueueGenericSend+0x1f8>)
 80034fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	e772      	b.n	80033f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800350c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800350e:	f000 fa1b 	bl	8003948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003512:	f000 fd61 	bl	8003fd8 <xTaskResumeAll>
 8003516:	e76c      	b.n	80033f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800351a:	f000 fa15 	bl	8003948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800351e:	f000 fd5b 	bl	8003fd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003522:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003524:	4618      	mov	r0, r3
 8003526:	3738      	adds	r7, #56	; 0x38
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	e000ed04 	.word	0xe000ed04

08003530 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b090      	sub	sp, #64	; 0x40
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10a      	bne.n	800355e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800355a:	bf00      	nop
 800355c:	e7fe      	b.n	800355c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d103      	bne.n	800356c <xQueueGenericSendFromISR+0x3c>
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <xQueueGenericSendFromISR+0x40>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <xQueueGenericSendFromISR+0x42>
 8003570:	2300      	movs	r3, #0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003588:	bf00      	nop
 800358a:	e7fe      	b.n	800358a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d103      	bne.n	800359a <xQueueGenericSendFromISR+0x6a>
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <xQueueGenericSendFromISR+0x6e>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <xQueueGenericSendFromISR+0x70>
 800359e:	2300      	movs	r3, #0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	623b      	str	r3, [r7, #32]
}
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035ba:	f001 fffd 	bl	80055b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035be:	f3ef 8211 	mrs	r2, BASEPRI
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	61fa      	str	r2, [r7, #28]
 80035d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <xQueueGenericSendFromISR+0xbc>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d12f      	bne.n	800364c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003602:	f000 f911 	bl	8003828 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003606:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d112      	bne.n	8003636 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	2b00      	cmp	r3, #0
 8003616:	d016      	beq.n	8003646 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	3324      	adds	r3, #36	; 0x24
 800361c:	4618      	mov	r0, r3
 800361e:	f000 ff33 	bl	8004488 <xTaskRemoveFromEventList>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00e      	beq.n	8003646 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e007      	b.n	8003646 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003636:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800363a:	3301      	adds	r3, #1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	b25a      	sxtb	r2, r3
 8003640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003646:	2301      	movs	r3, #1
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800364a:	e001      	b.n	8003650 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800364c:	2300      	movs	r3, #0
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800365a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800365c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800365e:	4618      	mov	r0, r3
 8003660:	3740      	adds	r7, #64	; 0x40
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003674:	2300      	movs	r3, #0
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <xQueueReceive+0x30>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	623b      	str	r3, [r7, #32]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <xQueueReceive+0x3e>
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <xQueueReceive+0x42>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <xQueueReceive+0x44>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <xQueueReceive+0x5e>
	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	61fb      	str	r3, [r7, #28]
}
 80036c2:	bf00      	nop
 80036c4:	e7fe      	b.n	80036c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036c6:	f001 f903 	bl	80048d0 <xTaskGetSchedulerState>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <xQueueReceive+0x6e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <xQueueReceive+0x72>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <xQueueReceive+0x74>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xQueueReceive+0x8e>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	61bb      	str	r3, [r7, #24]
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036f6:	f001 fe7d 	bl	80053f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01f      	beq.n	8003746 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800370a:	f000 f8f7 	bl	80038fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1e5a      	subs	r2, r3, #1
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00f      	beq.n	800373e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	3310      	adds	r3, #16
 8003722:	4618      	mov	r0, r3
 8003724:	f000 feb0 	bl	8004488 <xTaskRemoveFromEventList>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800372e:	4b3d      	ldr	r3, [pc, #244]	; (8003824 <xQueueReceive+0x1bc>)
 8003730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800373e:	f001 fe89 	bl	8005454 <vPortExitCritical>
				return pdPASS;
 8003742:	2301      	movs	r3, #1
 8003744:	e069      	b.n	800381a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d103      	bne.n	8003754 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800374c:	f001 fe82 	bl	8005454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003750:	2300      	movs	r3, #0
 8003752:	e062      	b.n	800381a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800375a:	f107 0310 	add.w	r3, r7, #16
 800375e:	4618      	mov	r0, r3
 8003760:	f000 ff58 	bl	8004614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003768:	f001 fe74 	bl	8005454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800376c:	f000 fc26 	bl	8003fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003770:	f001 fe40 	bl	80053f4 <vPortEnterCritical>
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800377a:	b25b      	sxtb	r3, r3
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d103      	bne.n	800378a <xQueueReceive+0x122>
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003790:	b25b      	sxtb	r3, r3
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003796:	d103      	bne.n	80037a0 <xQueueReceive+0x138>
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037a0:	f001 fe58 	bl	8005454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037a4:	1d3a      	adds	r2, r7, #4
 80037a6:	f107 0310 	add.w	r3, r7, #16
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 ff47 	bl	8004640 <xTaskCheckForTimeOut>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d123      	bne.n	8003800 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ba:	f000 f917 	bl	80039ec <prvIsQueueEmpty>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d017      	beq.n	80037f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	3324      	adds	r3, #36	; 0x24
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fdcf 	bl	8004370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d4:	f000 f8b8 	bl	8003948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037d8:	f000 fbfe 	bl	8003fd8 <xTaskResumeAll>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d189      	bne.n	80036f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <xQueueReceive+0x1bc>)
 80037e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	e780      	b.n	80036f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f6:	f000 f8a7 	bl	8003948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037fa:	f000 fbed 	bl	8003fd8 <xTaskResumeAll>
 80037fe:	e77a      	b.n	80036f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003802:	f000 f8a1 	bl	8003948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003806:	f000 fbe7 	bl	8003fd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800380a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380c:	f000 f8ee 	bl	80039ec <prvIsQueueEmpty>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	f43f af6f 	beq.w	80036f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003818:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800381a:	4618      	mov	r0, r3
 800381c:	3730      	adds	r7, #48	; 0x30
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d14d      	bne.n	80038ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f85a 	bl	800490c <xTaskPriorityDisinherit>
 8003858:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	e043      	b.n	80038ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d119      	bne.n	800389c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6858      	ldr	r0, [r3, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	461a      	mov	r2, r3
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	f002 fb91 	bl	8005f9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	d32b      	bcc.n	80038ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	e026      	b.n	80038ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68d8      	ldr	r0, [r3, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	461a      	mov	r2, r3
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	f002 fb77 	bl	8005f9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	425b      	negs	r3, r3
 80038b6:	441a      	add	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d207      	bcs.n	80038d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	425b      	negs	r3, r3
 80038d2:	441a      	add	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d105      	bne.n	80038ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038f2:	697b      	ldr	r3, [r7, #20]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	441a      	add	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	d303      	bcc.n	8003930 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68d9      	ldr	r1, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	461a      	mov	r2, r3
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f002 fb2d 	bl	8005f9a <memcpy>
	}
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003950:	f001 fd50 	bl	80053f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800395a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800395c:	e011      	b.n	8003982 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d012      	beq.n	800398c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3324      	adds	r3, #36	; 0x24
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fd8c 	bl	8004488 <xTaskRemoveFromEventList>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003976:	f000 fec5 	bl	8004704 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	3b01      	subs	r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	dce9      	bgt.n	800395e <prvUnlockQueue+0x16>
 800398a:	e000      	b.n	800398e <prvUnlockQueue+0x46>
					break;
 800398c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	22ff      	movs	r2, #255	; 0xff
 8003992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003996:	f001 fd5d 	bl	8005454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800399a:	f001 fd2b 	bl	80053f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039a6:	e011      	b.n	80039cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d012      	beq.n	80039d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3310      	adds	r3, #16
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fd67 	bl	8004488 <xTaskRemoveFromEventList>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039c0:	f000 fea0 	bl	8004704 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039c4:	7bbb      	ldrb	r3, [r7, #14]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	dce9      	bgt.n	80039a8 <prvUnlockQueue+0x60>
 80039d4:	e000      	b.n	80039d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	22ff      	movs	r2, #255	; 0xff
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039e0:	f001 fd38 	bl	8005454 <vPortExitCritical>
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039f4:	f001 fcfe 	bl	80053f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e001      	b.n	8003a0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a0a:	f001 fd23 	bl	8005454 <vPortExitCritical>

	return xReturn;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a20:	f001 fce8 	bl	80053f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d102      	bne.n	8003a36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e001      	b.n	8003a3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a3a:	f001 fd0b 	bl	8005454 <vPortExitCritical>

	return xReturn;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e014      	b.n	8003a82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <vQueueAddToRegistry+0x50>)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a64:	490c      	ldr	r1, [pc, #48]	; (8003a98 <vQueueAddToRegistry+0x50>)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <vQueueAddToRegistry+0x50>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a7a:	e006      	b.n	8003a8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b07      	cmp	r3, #7
 8003a86:	d9e7      	bls.n	8003a58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000884 	.word	0x20000884

08003a9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003aac:	f001 fca2 	bl	80053f4 <vPortEnterCritical>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab6:	b25b      	sxtb	r3, r3
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d103      	bne.n	8003ac6 <vQueueWaitForMessageRestricted+0x2a>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d103      	bne.n	8003adc <vQueueWaitForMessageRestricted+0x40>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003adc:	f001 fcba 	bl	8005454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3324      	adds	r3, #36	; 0x24
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fc9d 	bl	8004430 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003af6:	6978      	ldr	r0, [r7, #20]
 8003af8:	f7ff ff26 	bl	8003948 <prvUnlockQueue>
	}
 8003afc:	bf00      	nop
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08e      	sub	sp, #56	; 0x38
 8003b08:	af04      	add	r7, sp, #16
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	623b      	str	r3, [r7, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <xTaskCreateStatic+0x46>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	61fb      	str	r3, [r7, #28]
}
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b4a:	23a8      	movs	r3, #168	; 0xa8
 8003b4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2ba8      	cmp	r3, #168	; 0xa8
 8003b52:	d00a      	beq.n	8003b6a <xTaskCreateStatic+0x66>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	61bb      	str	r3, [r7, #24]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01e      	beq.n	8003bb0 <xTaskCreateStatic+0xac>
 8003b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01b      	beq.n	8003bb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9303      	str	r3, [sp, #12]
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	9302      	str	r3, [sp, #8]
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f850 	bl	8003c48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003baa:	f000 f8f3 	bl	8003d94 <prvAddNewTaskToReadyList>
 8003bae:	e001      	b.n	8003bb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bb4:	697b      	ldr	r3, [r7, #20]
	}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3728      	adds	r7, #40	; 0x28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b08c      	sub	sp, #48	; 0x30
 8003bc2:	af04      	add	r7, sp, #16
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 fd30 	bl	8005638 <pvPortMalloc>
 8003bd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00e      	beq.n	8003bfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003be0:	20a8      	movs	r0, #168	; 0xa8
 8003be2:	f001 fd29 	bl	8005638 <pvPortMalloc>
 8003be6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf4:	e005      	b.n	8003c02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	f001 fdea 	bl	80057d0 <vPortFree>
 8003bfc:	e001      	b.n	8003c02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d017      	beq.n	8003c38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c10:	88fa      	ldrh	r2, [r7, #6]
 8003c12:	2300      	movs	r3, #0
 8003c14:	9303      	str	r3, [sp, #12]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	9302      	str	r3, [sp, #8]
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f80e 	bl	8003c48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c2c:	69f8      	ldr	r0, [r7, #28]
 8003c2e:	f000 f8b1 	bl	8003d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e002      	b.n	8003c3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
	}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3720      	adds	r7, #32
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	461a      	mov	r2, r3
 8003c60:	21a5      	movs	r1, #165	; 0xa5
 8003c62:	f002 f8c9 	bl	8005df8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c70:	3b01      	subs	r3, #1
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	f023 0307 	bic.w	r3, r3, #7
 8003c7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	617b      	str	r3, [r7, #20]
}
 8003c9c:	bf00      	nop
 8003c9e:	e7fe      	b.n	8003c9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01f      	beq.n	8003ce6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	e012      	b.n	8003cd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	7819      	ldrb	r1, [r3, #0]
 8003cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	3334      	adds	r3, #52	; 0x34
 8003cbc:	460a      	mov	r2, r1
 8003cbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d006      	beq.n	8003cda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	2b0f      	cmp	r3, #15
 8003cd6:	d9e9      	bls.n	8003cac <prvInitialiseNewTask+0x64>
 8003cd8:	e000      	b.n	8003cdc <prvInitialiseNewTask+0x94>
			{
				break;
 8003cda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ce4:	e003      	b.n	8003cee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	2b37      	cmp	r3, #55	; 0x37
 8003cf2:	d901      	bls.n	8003cf8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cf4:	2337      	movs	r3, #55	; 0x37
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	2200      	movs	r2, #0
 8003d08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff f978 	bl	8003004 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	3318      	adds	r3, #24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff f973 	bl	8003004 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	3354      	adds	r3, #84	; 0x54
 8003d48:	224c      	movs	r2, #76	; 0x4c
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f002 f853 	bl	8005df8 <memset>
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <prvInitialiseNewTask+0x140>)
 8003d56:	659a      	str	r2, [r3, #88]	; 0x58
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <prvInitialiseNewTask+0x144>)
 8003d5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <prvInitialiseNewTask+0x148>)
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	69b8      	ldr	r0, [r7, #24]
 8003d6a:	f001 fa17 	bl	800519c <pxPortInitialiseStack>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d80:	bf00      	nop
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20004b18 	.word	0x20004b18
 8003d8c:	20004b80 	.word	0x20004b80
 8003d90:	20004be8 	.word	0x20004be8

08003d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d9c:	f001 fb2a 	bl	80053f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003da0:	4b2d      	ldr	r3, [pc, #180]	; (8003e58 <prvAddNewTaskToReadyList+0xc4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a2c      	ldr	r2, [pc, #176]	; (8003e58 <prvAddNewTaskToReadyList+0xc4>)
 8003da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003daa:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003db2:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003db8:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <prvAddNewTaskToReadyList+0xc4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d110      	bne.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003dc0:	f000 fcc4 	bl	800474c <prvInitialiseTaskLists>
 8003dc4:	e00d      	b.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <prvAddNewTaskToReadyList+0xcc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d802      	bhi.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <prvAddNewTaskToReadyList+0xd0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	4a1e      	ldr	r2, [pc, #120]	; (8003e64 <prvAddNewTaskToReadyList+0xd0>)
 8003dea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <prvAddNewTaskToReadyList+0xd0>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <prvAddNewTaskToReadyList+0xd4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d903      	bls.n	8003e08 <prvAddNewTaskToReadyList+0x74>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <prvAddNewTaskToReadyList+0xd4>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <prvAddNewTaskToReadyList+0xd8>)
 8003e16:	441a      	add	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f7ff f8fd 	bl	800301e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e24:	f001 fb16 	bl	8005454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <prvAddNewTaskToReadyList+0xcc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00e      	beq.n	8003e4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d207      	bcs.n	8003e4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <prvAddNewTaskToReadyList+0xdc>)
 8003e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000d98 	.word	0x20000d98
 8003e5c:	200008c4 	.word	0x200008c4
 8003e60:	20000da4 	.word	0x20000da4
 8003e64:	20000db4 	.word	0x20000db4
 8003e68:	20000da0 	.word	0x20000da0
 8003e6c:	200008c8 	.word	0x200008c8
 8003e70:	e000ed04 	.word	0xe000ed04

08003e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d017      	beq.n	8003eb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <vTaskDelay+0x60>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <vTaskDelay+0x30>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	60bb      	str	r3, [r7, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	e7fe      	b.n	8003ea2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ea4:	f000 f88a 	bl	8003fbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fdb4 	bl	8004a18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003eb0:	f000 f892 	bl	8003fd8 <xTaskResumeAll>
 8003eb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d107      	bne.n	8003ecc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <vTaskDelay+0x64>)
 8003ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000dc0 	.word	0x20000dc0
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003eea:	463a      	mov	r2, r7
 8003eec:	1d39      	adds	r1, r7, #4
 8003eee:	f107 0308 	add.w	r3, r7, #8
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fe44 	bl	8002b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	9202      	str	r2, [sp, #8]
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2300      	movs	r3, #0
 8003f08:	460a      	mov	r2, r1
 8003f0a:	4924      	ldr	r1, [pc, #144]	; (8003f9c <vTaskStartScheduler+0xc0>)
 8003f0c:	4824      	ldr	r0, [pc, #144]	; (8003fa0 <vTaskStartScheduler+0xc4>)
 8003f0e:	f7ff fdf9 	bl	8003b04 <xTaskCreateStatic>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <vTaskStartScheduler+0xc8>)
 8003f16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <vTaskStartScheduler+0xc8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e001      	b.n	8003f2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d102      	bne.n	8003f36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f30:	f000 fdc6 	bl	8004ac0 <xTimerCreateTimerTask>
 8003f34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d11b      	bne.n	8003f74 <vTaskStartScheduler+0x98>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	613b      	str	r3, [r7, #16]
}
 8003f4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f50:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <vTaskStartScheduler+0xcc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3354      	adds	r3, #84	; 0x54
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <vTaskStartScheduler+0xd0>)
 8003f58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <vTaskStartScheduler+0xd4>)
 8003f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <vTaskStartScheduler+0xd8>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <vTaskStartScheduler+0xdc>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f6e:	f001 f99f 	bl	80052b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f72:	e00e      	b.n	8003f92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d10a      	bne.n	8003f92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	60fb      	str	r3, [r7, #12]
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <vTaskStartScheduler+0xb4>
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	08006470 	.word	0x08006470
 8003fa0:	0800471d 	.word	0x0800471d
 8003fa4:	20000dbc 	.word	0x20000dbc
 8003fa8:	200008c4 	.word	0x200008c4
 8003fac:	20000068 	.word	0x20000068
 8003fb0:	20000db8 	.word	0x20000db8
 8003fb4:	20000da4 	.word	0x20000da4
 8003fb8:	20000d9c 	.word	0x20000d9c

08003fbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <vTaskSuspendAll+0x18>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	4a03      	ldr	r2, [pc, #12]	; (8003fd4 <vTaskSuspendAll+0x18>)
 8003fc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	20000dc0 	.word	0x20000dc0

08003fd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fe6:	4b42      	ldr	r3, [pc, #264]	; (80040f0 <xTaskResumeAll+0x118>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <xTaskResumeAll+0x2c>
	__asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	603b      	str	r3, [r7, #0]
}
 8004000:	bf00      	nop
 8004002:	e7fe      	b.n	8004002 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004004:	f001 f9f6 	bl	80053f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004008:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <xTaskResumeAll+0x118>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3b01      	subs	r3, #1
 800400e:	4a38      	ldr	r2, [pc, #224]	; (80040f0 <xTaskResumeAll+0x118>)
 8004010:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004012:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <xTaskResumeAll+0x118>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d162      	bne.n	80040e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <xTaskResumeAll+0x11c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d05e      	beq.n	80040e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004022:	e02f      	b.n	8004084 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004024:	4b34      	ldr	r3, [pc, #208]	; (80040f8 <xTaskResumeAll+0x120>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3318      	adds	r3, #24
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff f851 	bl	80030d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff f84c 	bl	80030d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <xTaskResumeAll+0x124>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d903      	bls.n	8004054 <xTaskResumeAll+0x7c>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	4a2a      	ldr	r2, [pc, #168]	; (80040fc <xTaskResumeAll+0x124>)
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4a27      	ldr	r2, [pc, #156]	; (8004100 <xTaskResumeAll+0x128>)
 8004062:	441a      	add	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3304      	adds	r3, #4
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f7fe ffd7 	bl	800301e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4b23      	ldr	r3, [pc, #140]	; (8004104 <xTaskResumeAll+0x12c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	429a      	cmp	r2, r3
 800407c:	d302      	bcc.n	8004084 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <xTaskResumeAll+0x130>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004084:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <xTaskResumeAll+0x120>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1cb      	bne.n	8004024 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004092:	f000 fbfd 	bl	8004890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <xTaskResumeAll+0x134>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d010      	beq.n	80040c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040a2:	f000 f847 	bl	8004134 <xTaskIncrementTick>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80040ac:	4b16      	ldr	r3, [pc, #88]	; (8004108 <xTaskResumeAll+0x130>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f1      	bne.n	80040a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <xTaskResumeAll+0x134>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <xTaskResumeAll+0x130>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <xTaskResumeAll+0x138>)
 80040d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040e0:	f001 f9b8 	bl	8005454 <vPortExitCritical>

	return xAlreadyYielded;
 80040e4:	68bb      	ldr	r3, [r7, #8]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000dc0 	.word	0x20000dc0
 80040f4:	20000d98 	.word	0x20000d98
 80040f8:	20000d58 	.word	0x20000d58
 80040fc:	20000da0 	.word	0x20000da0
 8004100:	200008c8 	.word	0x200008c8
 8004104:	200008c4 	.word	0x200008c4
 8004108:	20000dac 	.word	0x20000dac
 800410c:	20000da8 	.word	0x20000da8
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <xTaskGetTickCount+0x1c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004120:	687b      	ldr	r3, [r7, #4]
}
 8004122:	4618      	mov	r0, r3
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000d9c 	.word	0x20000d9c

08004134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800413e:	4b4f      	ldr	r3, [pc, #316]	; (800427c <xTaskIncrementTick+0x148>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f040 808f 	bne.w	8004266 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004148:	4b4d      	ldr	r3, [pc, #308]	; (8004280 <xTaskIncrementTick+0x14c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004150:	4a4b      	ldr	r2, [pc, #300]	; (8004280 <xTaskIncrementTick+0x14c>)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d120      	bne.n	800419e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800415c:	4b49      	ldr	r3, [pc, #292]	; (8004284 <xTaskIncrementTick+0x150>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <xTaskIncrementTick+0x48>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	603b      	str	r3, [r7, #0]
}
 8004178:	bf00      	nop
 800417a:	e7fe      	b.n	800417a <xTaskIncrementTick+0x46>
 800417c:	4b41      	ldr	r3, [pc, #260]	; (8004284 <xTaskIncrementTick+0x150>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	4b41      	ldr	r3, [pc, #260]	; (8004288 <xTaskIncrementTick+0x154>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a3f      	ldr	r2, [pc, #252]	; (8004284 <xTaskIncrementTick+0x150>)
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4a3f      	ldr	r2, [pc, #252]	; (8004288 <xTaskIncrementTick+0x154>)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b3e      	ldr	r3, [pc, #248]	; (800428c <xTaskIncrementTick+0x158>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	4a3d      	ldr	r2, [pc, #244]	; (800428c <xTaskIncrementTick+0x158>)
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	f000 fb79 	bl	8004890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800419e:	4b3c      	ldr	r3, [pc, #240]	; (8004290 <xTaskIncrementTick+0x15c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d349      	bcc.n	800423c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041a8:	4b36      	ldr	r3, [pc, #216]	; (8004284 <xTaskIncrementTick+0x150>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d104      	bne.n	80041bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b2:	4b37      	ldr	r3, [pc, #220]	; (8004290 <xTaskIncrementTick+0x15c>)
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
 80041b8:	601a      	str	r2, [r3, #0]
					break;
 80041ba:	e03f      	b.n	800423c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041bc:	4b31      	ldr	r3, [pc, #196]	; (8004284 <xTaskIncrementTick+0x150>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d203      	bcs.n	80041dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041d4:	4a2e      	ldr	r2, [pc, #184]	; (8004290 <xTaskIncrementTick+0x15c>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041da:	e02f      	b.n	800423c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	3304      	adds	r3, #4
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe ff79 	bl	80030d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	3318      	adds	r3, #24
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe ff70 	bl	80030d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fc:	4b25      	ldr	r3, [pc, #148]	; (8004294 <xTaskIncrementTick+0x160>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d903      	bls.n	800420c <xTaskIncrementTick+0xd8>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <xTaskIncrementTick+0x160>)
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <xTaskIncrementTick+0x164>)
 800421a:	441a      	add	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f7fe fefb 	bl	800301e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <xTaskIncrementTick+0x168>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	429a      	cmp	r2, r3
 8004234:	d3b8      	bcc.n	80041a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004236:	2301      	movs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800423a:	e7b5      	b.n	80041a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <xTaskIncrementTick+0x168>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004242:	4915      	ldr	r1, [pc, #84]	; (8004298 <xTaskIncrementTick+0x164>)
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d901      	bls.n	8004258 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <xTaskIncrementTick+0x16c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004260:	2301      	movs	r3, #1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e004      	b.n	8004270 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <xTaskIncrementTick+0x170>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3301      	adds	r3, #1
 800426c:	4a0d      	ldr	r2, [pc, #52]	; (80042a4 <xTaskIncrementTick+0x170>)
 800426e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004270:	697b      	ldr	r3, [r7, #20]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000dc0 	.word	0x20000dc0
 8004280:	20000d9c 	.word	0x20000d9c
 8004284:	20000d50 	.word	0x20000d50
 8004288:	20000d54 	.word	0x20000d54
 800428c:	20000db0 	.word	0x20000db0
 8004290:	20000db8 	.word	0x20000db8
 8004294:	20000da0 	.word	0x20000da0
 8004298:	200008c8 	.word	0x200008c8
 800429c:	200008c4 	.word	0x200008c4
 80042a0:	20000dac 	.word	0x20000dac
 80042a4:	20000da8 	.word	0x20000da8

080042a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ae:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <vTaskSwitchContext+0xb0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <vTaskSwitchContext+0xb4>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042bc:	e046      	b.n	800434c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80042be:	4b27      	ldr	r3, [pc, #156]	; (800435c <vTaskSwitchContext+0xb4>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c4:	4b26      	ldr	r3, [pc, #152]	; (8004360 <vTaskSwitchContext+0xb8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e010      	b.n	80042ee <vTaskSwitchContext+0x46>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	607b      	str	r3, [r7, #4]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <vTaskSwitchContext+0x3e>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	491d      	ldr	r1, [pc, #116]	; (8004364 <vTaskSwitchContext+0xbc>)
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0e4      	beq.n	80042cc <vTaskSwitchContext+0x24>
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <vTaskSwitchContext+0xbc>)
 800430e:	4413      	add	r3, r2
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3308      	adds	r3, #8
 8004324:	429a      	cmp	r2, r3
 8004326:	d104      	bne.n	8004332 <vTaskSwitchContext+0x8a>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <vTaskSwitchContext+0xc0>)
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4a08      	ldr	r2, [pc, #32]	; (8004360 <vTaskSwitchContext+0xb8>)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <vTaskSwitchContext+0xc0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3354      	adds	r3, #84	; 0x54
 8004348:	4a08      	ldr	r2, [pc, #32]	; (800436c <vTaskSwitchContext+0xc4>)
 800434a:	6013      	str	r3, [r2, #0]
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	20000dc0 	.word	0x20000dc0
 800435c:	20000dac 	.word	0x20000dac
 8004360:	20000da0 	.word	0x20000da0
 8004364:	200008c8 	.word	0x200008c8
 8004368:	200008c4 	.word	0x200008c4
 800436c:	20000068 	.word	0x20000068

08004370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	60fb      	str	r3, [r7, #12]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <vTaskPlaceOnEventList+0x44>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3318      	adds	r3, #24
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fe fe61 	bl	8003066 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043a4:	2101      	movs	r1, #1
 80043a6:	6838      	ldr	r0, [r7, #0]
 80043a8:	f000 fb36 	bl	8004a18 <prvAddCurrentTaskToDelayedList>
}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	200008c4 	.word	0x200008c4

080043b8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	617b      	str	r3, [r7, #20]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <vTaskPlaceOnUnorderedEventList+0x70>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	613b      	str	r3, [r7, #16]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <vTaskPlaceOnUnorderedEventList+0x74>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004408:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <vTaskPlaceOnUnorderedEventList+0x74>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3318      	adds	r3, #24
 8004410:	4619      	mov	r1, r3
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7fe fe03 	bl	800301e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004418:	2101      	movs	r1, #1
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fafc 	bl	8004a18 <prvAddCurrentTaskToDelayedList>
}
 8004420:	bf00      	nop
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000dc0 	.word	0x20000dc0
 800442c:	200008c4 	.word	0x200008c4

08004430 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	617b      	str	r3, [r7, #20]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <vTaskPlaceOnEventListRestricted+0x54>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3318      	adds	r3, #24
 800445e:	4619      	mov	r1, r3
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7fe fddc 	bl	800301e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	68b8      	ldr	r0, [r7, #8]
 8004476:	f000 facf 	bl	8004a18 <prvAddCurrentTaskToDelayedList>
	}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	200008c4 	.word	0x200008c4

08004488 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60fb      	str	r3, [r7, #12]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	3318      	adds	r3, #24
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fe fe0d 	bl	80030d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044be:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <xTaskRemoveFromEventList+0xb0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11d      	bne.n	8004502 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fe04 	bl	80030d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	4b19      	ldr	r3, [pc, #100]	; (800453c <xTaskRemoveFromEventList+0xb4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d903      	bls.n	80044e4 <xTaskRemoveFromEventList+0x5c>
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	4a16      	ldr	r2, [pc, #88]	; (800453c <xTaskRemoveFromEventList+0xb4>)
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4a13      	ldr	r2, [pc, #76]	; (8004540 <xTaskRemoveFromEventList+0xb8>)
 80044f2:	441a      	add	r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f7fe fd8f 	bl	800301e <vListInsertEnd>
 8004500:	e005      	b.n	800450e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3318      	adds	r3, #24
 8004506:	4619      	mov	r1, r3
 8004508:	480e      	ldr	r0, [pc, #56]	; (8004544 <xTaskRemoveFromEventList+0xbc>)
 800450a:	f7fe fd88 	bl	800301e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <xTaskRemoveFromEventList+0xc0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	429a      	cmp	r2, r3
 800451a:	d905      	bls.n	8004528 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800451c:	2301      	movs	r3, #1
 800451e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <xTaskRemoveFromEventList+0xc4>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e001      	b.n	800452c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800452c:	697b      	ldr	r3, [r7, #20]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000dc0 	.word	0x20000dc0
 800453c:	20000da0 	.word	0x20000da0
 8004540:	200008c8 	.word	0x200008c8
 8004544:	20000d58 	.word	0x20000d58
 8004548:	200008c4 	.word	0x200008c4
 800454c:	20000dac 	.word	0x20000dac

08004550 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800455a:	4b29      	ldr	r3, [pc, #164]	; (8004600 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	613b      	str	r3, [r7, #16]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60fb      	str	r3, [r7, #12]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7fe fd97 	bl	80030d8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fd92 	bl	80030d8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d903      	bls.n	80045c8 <vTaskRemoveFromUnorderedEventList+0x78>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4a0f      	ldr	r2, [pc, #60]	; (8004604 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4a0c      	ldr	r2, [pc, #48]	; (8004608 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80045d6:	441a      	add	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7fe fd1d 	bl	800301e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4b08      	ldr	r3, [pc, #32]	; (800460c <vTaskRemoveFromUnorderedEventList+0xbc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d902      	bls.n	80045f8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
	}
}
 80045f8:	bf00      	nop
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000dc0 	.word	0x20000dc0
 8004604:	20000da0 	.word	0x20000da0
 8004608:	200008c8 	.word	0x200008c8
 800460c:	200008c4 	.word	0x200008c4
 8004610:	20000dac 	.word	0x20000dac

08004614 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <vTaskInternalSetTimeOutState+0x24>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <vTaskInternalSetTimeOutState+0x28>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	605a      	str	r2, [r3, #4]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	20000db0 	.word	0x20000db0
 800463c:	20000d9c 	.word	0x20000d9c

08004640 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	613b      	str	r3, [r7, #16]
}
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60fb      	str	r3, [r7, #12]
}
 800467e:	bf00      	nop
 8004680:	e7fe      	b.n	8004680 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004682:	f000 feb7 	bl	80053f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <xTaskCheckForTimeOut+0xbc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d102      	bne.n	80046a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	e023      	b.n	80046ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <xTaskCheckForTimeOut+0xc0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d007      	beq.n	80046c2 <xTaskCheckForTimeOut+0x82>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d302      	bcc.n	80046c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e015      	b.n	80046ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d20b      	bcs.n	80046e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff ff9b 	bl	8004614 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e004      	b.n	80046ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046ee:	f000 feb1 	bl	8005454 <vPortExitCritical>

	return xReturn;
 80046f2:	69fb      	ldr	r3, [r7, #28]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000d9c 	.word	0x20000d9c
 8004700:	20000db0 	.word	0x20000db0

08004704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <vTaskMissedYield+0x14>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	20000dac 	.word	0x20000dac

0800471c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004724:	f000 f852 	bl	80047cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <prvIdleTask+0x28>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d9f9      	bls.n	8004724 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <prvIdleTask+0x2c>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004740:	e7f0      	b.n	8004724 <prvIdleTask+0x8>
 8004742:	bf00      	nop
 8004744:	200008c8 	.word	0x200008c8
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	e00c      	b.n	8004772 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4a12      	ldr	r2, [pc, #72]	; (80047ac <prvInitialiseTaskLists+0x60>)
 8004764:	4413      	add	r3, r2
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fc2c 	bl	8002fc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3301      	adds	r3, #1
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b37      	cmp	r3, #55	; 0x37
 8004776:	d9ef      	bls.n	8004758 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004778:	480d      	ldr	r0, [pc, #52]	; (80047b0 <prvInitialiseTaskLists+0x64>)
 800477a:	f7fe fc23 	bl	8002fc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800477e:	480d      	ldr	r0, [pc, #52]	; (80047b4 <prvInitialiseTaskLists+0x68>)
 8004780:	f7fe fc20 	bl	8002fc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004784:	480c      	ldr	r0, [pc, #48]	; (80047b8 <prvInitialiseTaskLists+0x6c>)
 8004786:	f7fe fc1d 	bl	8002fc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800478a:	480c      	ldr	r0, [pc, #48]	; (80047bc <prvInitialiseTaskLists+0x70>)
 800478c:	f7fe fc1a 	bl	8002fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004790:	480b      	ldr	r0, [pc, #44]	; (80047c0 <prvInitialiseTaskLists+0x74>)
 8004792:	f7fe fc17 	bl	8002fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <prvInitialiseTaskLists+0x78>)
 8004798:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <prvInitialiseTaskLists+0x64>)
 800479a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <prvInitialiseTaskLists+0x7c>)
 800479e:	4a05      	ldr	r2, [pc, #20]	; (80047b4 <prvInitialiseTaskLists+0x68>)
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200008c8 	.word	0x200008c8
 80047b0:	20000d28 	.word	0x20000d28
 80047b4:	20000d3c 	.word	0x20000d3c
 80047b8:	20000d58 	.word	0x20000d58
 80047bc:	20000d6c 	.word	0x20000d6c
 80047c0:	20000d84 	.word	0x20000d84
 80047c4:	20000d50 	.word	0x20000d50
 80047c8:	20000d54 	.word	0x20000d54

080047cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047d2:	e019      	b.n	8004808 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047d4:	f000 fe0e 	bl	80053f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d8:	4b10      	ldr	r3, [pc, #64]	; (800481c <prvCheckTasksWaitingTermination+0x50>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fc77 	bl	80030d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <prvCheckTasksWaitingTermination+0x54>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	4a0b      	ldr	r2, [pc, #44]	; (8004820 <prvCheckTasksWaitingTermination+0x54>)
 80047f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <prvCheckTasksWaitingTermination+0x58>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <prvCheckTasksWaitingTermination+0x58>)
 80047fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047fe:	f000 fe29 	bl	8005454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f810 	bl	8004828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <prvCheckTasksWaitingTermination+0x58>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e1      	bne.n	80047d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000d6c 	.word	0x20000d6c
 8004820:	20000d98 	.word	0x20000d98
 8004824:	20000d80 	.word	0x20000d80

08004828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3354      	adds	r3, #84	; 0x54
 8004834:	4618      	mov	r0, r3
 8004836:	f001 faf7 	bl	8005e28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004840:	2b00      	cmp	r3, #0
 8004842:	d108      	bne.n	8004856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	4618      	mov	r0, r3
 800484a:	f000 ffc1 	bl	80057d0 <vPortFree>
				vPortFree( pxTCB );
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 ffbe 	bl	80057d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004854:	e018      	b.n	8004888 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800485c:	2b01      	cmp	r3, #1
 800485e:	d103      	bne.n	8004868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 ffb5 	bl	80057d0 <vPortFree>
	}
 8004866:	e00f      	b.n	8004888 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800486e:	2b02      	cmp	r3, #2
 8004870:	d00a      	beq.n	8004888 <prvDeleteTCB+0x60>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	60fb      	str	r3, [r7, #12]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <prvDeleteTCB+0x5e>
	}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <prvResetNextTaskUnblockTime+0x38>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <prvResetNextTaskUnblockTime+0x3c>)
 80048a2:	f04f 32ff 	mov.w	r2, #4294967295
 80048a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048a8:	e008      	b.n	80048bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <prvResetNextTaskUnblockTime+0x38>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <prvResetNextTaskUnblockTime+0x3c>)
 80048ba:	6013      	str	r3, [r2, #0]
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	20000d50 	.word	0x20000d50
 80048cc:	20000db8 	.word	0x20000db8

080048d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <xTaskGetSchedulerState+0x34>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048de:	2301      	movs	r3, #1
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	e008      	b.n	80048f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <xTaskGetSchedulerState+0x38>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d102      	bne.n	80048f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048ec:	2302      	movs	r3, #2
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	e001      	b.n	80048f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048f6:	687b      	ldr	r3, [r7, #4]
	}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	20000da4 	.word	0x20000da4
 8004908:	20000dc0 	.word	0x20000dc0

0800490c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d056      	beq.n	80049d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004922:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <xTaskPriorityDisinherit+0xd0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	429a      	cmp	r2, r3
 800492a:	d00a      	beq.n	8004942 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	60fb      	str	r3, [r7, #12]
}
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	60bb      	str	r3, [r7, #8]
}
 800495c:	bf00      	nop
 800495e:	e7fe      	b.n	800495e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	1e5a      	subs	r2, r3, #1
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	429a      	cmp	r2, r3
 8004974:	d02c      	beq.n	80049d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497a:	2b00      	cmp	r3, #0
 800497c:	d128      	bne.n	80049d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3304      	adds	r3, #4
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe fba8 	bl	80030d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <xTaskPriorityDisinherit+0xd4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d903      	bls.n	80049b0 <xTaskPriorityDisinherit+0xa4>
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a0c      	ldr	r2, [pc, #48]	; (80049e0 <xTaskPriorityDisinherit+0xd4>)
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <xTaskPriorityDisinherit+0xd8>)
 80049be:	441a      	add	r2, r3
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f7fe fb29 	bl	800301e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049d0:	697b      	ldr	r3, [r7, #20]
	}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200008c4 	.word	0x200008c4
 80049e0:	20000da0 	.word	0x20000da0
 80049e4:	200008c8 	.word	0x200008c8

080049e8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <uxTaskResetEventItemValue+0x2c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <uxTaskResetEventItemValue+0x2c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <uxTaskResetEventItemValue+0x2c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004a04:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004a06:	687b      	ldr	r3, [r7, #4]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	200008c4 	.word	0x200008c4

08004a18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a22:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a28:	4b20      	ldr	r3, [pc, #128]	; (8004aac <prvAddCurrentTaskToDelayedList+0x94>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fb52 	bl	80030d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d10a      	bne.n	8004a52 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a42:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <prvAddCurrentTaskToDelayedList+0x94>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4819      	ldr	r0, [pc, #100]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a4c:	f7fe fae7 	bl	800301e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a50:	e026      	b.n	8004aa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a5a:	4b14      	ldr	r3, [pc, #80]	; (8004aac <prvAddCurrentTaskToDelayedList+0x94>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d209      	bcs.n	8004a7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <prvAddCurrentTaskToDelayedList+0x94>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f7fe faf5 	bl	8003066 <vListInsert>
}
 8004a7c:	e010      	b.n	8004aa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <prvAddCurrentTaskToDelayedList+0x94>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f7fe faeb 	bl	8003066 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d202      	bcs.n	8004aa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a9a:	4a08      	ldr	r2, [pc, #32]	; (8004abc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000d9c 	.word	0x20000d9c
 8004aac:	200008c4 	.word	0x200008c4
 8004ab0:	20000d84 	.word	0x20000d84
 8004ab4:	20000d54 	.word	0x20000d54
 8004ab8:	20000d50 	.word	0x20000d50
 8004abc:	20000db8 	.word	0x20000db8

08004ac0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004aca:	f000 fb07 	bl	80050dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ace:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <xTimerCreateTimerTask+0x80>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d021      	beq.n	8004b1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ade:	1d3a      	adds	r2, r7, #4
 8004ae0:	f107 0108 	add.w	r1, r7, #8
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fe f863 	bl	8002bb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	9202      	str	r2, [sp, #8]
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	2302      	movs	r3, #2
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2300      	movs	r3, #0
 8004afe:	460a      	mov	r2, r1
 8004b00:	4910      	ldr	r1, [pc, #64]	; (8004b44 <xTimerCreateTimerTask+0x84>)
 8004b02:	4811      	ldr	r0, [pc, #68]	; (8004b48 <xTimerCreateTimerTask+0x88>)
 8004b04:	f7fe fffe 	bl	8003b04 <xTaskCreateStatic>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <xTimerCreateTimerTask+0x8c>)
 8004b0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <xTimerCreateTimerTask+0x8c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b16:	2301      	movs	r3, #1
 8004b18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	613b      	str	r3, [r7, #16]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b36:	697b      	ldr	r3, [r7, #20]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000df4 	.word	0x20000df4
 8004b44:	08006478 	.word	0x08006478
 8004b48:	08004c85 	.word	0x08004c85
 8004b4c:	20000df8 	.word	0x20000df8

08004b50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	; 0x28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	623b      	str	r3, [r7, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b7e:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <xTimerGenericCommand+0x98>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d02a      	beq.n	8004bdc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	dc18      	bgt.n	8004bca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b98:	f7ff fe9a 	bl	80048d0 <xTaskGetSchedulerState>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d109      	bne.n	8004bb6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <xTimerGenericCommand+0x98>)
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	f107 0110 	add.w	r1, r7, #16
 8004baa:	2300      	movs	r3, #0
 8004bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bae:	f7fe fbc1 	bl	8003334 <xQueueGenericSend>
 8004bb2:	6278      	str	r0, [r7, #36]	; 0x24
 8004bb4:	e012      	b.n	8004bdc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <xTimerGenericCommand+0x98>)
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	f107 0110 	add.w	r1, r7, #16
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f7fe fbb7 	bl	8003334 <xQueueGenericSend>
 8004bc6:	6278      	str	r0, [r7, #36]	; 0x24
 8004bc8:	e008      	b.n	8004bdc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <xTimerGenericCommand+0x98>)
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	f107 0110 	add.w	r1, r7, #16
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	f7fe fcab 	bl	8003530 <xQueueGenericSendFromISR>
 8004bda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3728      	adds	r7, #40	; 0x28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000df4 	.word	0x20000df4

08004bec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf6:	4b22      	ldr	r3, [pc, #136]	; (8004c80 <prvProcessExpiredTimer+0x94>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe fa67 	bl	80030d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d022      	beq.n	8004c5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	699a      	ldr	r2, [r3, #24]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	18d1      	adds	r1, r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	6978      	ldr	r0, [r7, #20]
 8004c26:	f000 f8d1 	bl	8004dcc <prvInsertTimerInActiveList>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01f      	beq.n	8004c70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c30:	2300      	movs	r3, #0
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2300      	movs	r3, #0
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	2100      	movs	r1, #0
 8004c3a:	6978      	ldr	r0, [r7, #20]
 8004c3c:	f7ff ff88 	bl	8004b50 <xTimerGenericCommand>
 8004c40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d113      	bne.n	8004c70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	6978      	ldr	r0, [r7, #20]
 8004c76:	4798      	blx	r3
}
 8004c78:	bf00      	nop
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000dec 	.word	0x20000dec

08004c84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c8c:	f107 0308 	add.w	r3, r7, #8
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 f857 	bl	8004d44 <prvGetNextExpireTime>
 8004c96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f803 	bl	8004ca8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ca2:	f000 f8d5 	bl	8004e50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ca6:	e7f1      	b.n	8004c8c <prvTimerTask+0x8>

08004ca8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004cb2:	f7ff f983 	bl	8003fbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cb6:	f107 0308 	add.w	r3, r7, #8
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f866 	bl	8004d8c <prvSampleTimeNow>
 8004cc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d130      	bne.n	8004d2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <prvProcessTimerOrBlockTask+0x3c>
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d806      	bhi.n	8004ce4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004cd6:	f7ff f97f 	bl	8003fd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff85 	bl	8004bec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ce2:	e024      	b.n	8004d2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004cea:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <prvProcessTimerOrBlockTask+0x90>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <prvProcessTimerOrBlockTask+0x50>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <prvProcessTimerOrBlockTask+0x52>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <prvProcessTimerOrBlockTask+0x94>)
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f7fe fec7 	bl	8003a9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d0e:	f7ff f963 	bl	8003fd8 <xTaskResumeAll>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <prvProcessTimerOrBlockTask+0x98>)
 8004d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	f3bf 8f6f 	isb	sy
}
 8004d28:	e001      	b.n	8004d2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d2a:	f7ff f955 	bl	8003fd8 <xTaskResumeAll>
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000df0 	.word	0x20000df0
 8004d3c:	20000df4 	.word	0x20000df4
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <prvGetNextExpireTime+0x44>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <prvGetNextExpireTime+0x16>
 8004d56:	2201      	movs	r2, #1
 8004d58:	e000      	b.n	8004d5c <prvGetNextExpireTime+0x18>
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d105      	bne.n	8004d74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d68:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <prvGetNextExpireTime+0x44>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	e001      	b.n	8004d78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d78:	68fb      	ldr	r3, [r7, #12]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000dec 	.word	0x20000dec

08004d8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d94:	f7ff f9be 	bl	8004114 <xTaskGetTickCount>
 8004d98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <prvSampleTimeNow+0x3c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d205      	bcs.n	8004db0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004da4:	f000 f936 	bl	8005014 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e002      	b.n	8004db6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004db6:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <prvSampleTimeNow+0x3c>)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000dfc 	.word	0x20000dfc

08004dcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d812      	bhi.n	8004e18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	1ad2      	subs	r2, r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d302      	bcc.n	8004e06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e01b      	b.n	8004e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <prvInsertTimerInActiveList+0x7c>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7fe f928 	bl	8003066 <vListInsert>
 8004e16:	e012      	b.n	8004e3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d206      	bcs.n	8004e2e <prvInsertTimerInActiveList+0x62>
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d302      	bcc.n	8004e2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e007      	b.n	8004e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <prvInsertTimerInActiveList+0x80>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f7fe f914 	bl	8003066 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e3e:	697b      	ldr	r3, [r7, #20]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000df0 	.word	0x20000df0
 8004e4c:	20000dec 	.word	0x20000dec

08004e50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08e      	sub	sp, #56	; 0x38
 8004e54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e56:	e0ca      	b.n	8004fee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	da18      	bge.n	8004e90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e5e:	1d3b      	adds	r3, r7, #4
 8004e60:	3304      	adds	r3, #4
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	61fb      	str	r3, [r7, #28]
}
 8004e7c:	bf00      	nop
 8004e7e:	e7fe      	b.n	8004e7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e86:	6850      	ldr	r0, [r2, #4]
 8004e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e8a:	6892      	ldr	r2, [r2, #8]
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f2c0 80ab 	blt.w	8004fee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe f915 	bl	80030d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eae:	463b      	mov	r3, r7
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff ff6b 	bl	8004d8c <prvSampleTimeNow>
 8004eb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b09      	cmp	r3, #9
 8004ebc:	f200 8096 	bhi.w	8004fec <prvProcessReceivedCommands+0x19c>
 8004ec0:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <prvProcessReceivedCommands+0x78>)
 8004ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec6:	bf00      	nop
 8004ec8:	08004ef1 	.word	0x08004ef1
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004ef1 	.word	0x08004ef1
 8004ed4:	08004f65 	.word	0x08004f65
 8004ed8:	08004f79 	.word	0x08004f79
 8004edc:	08004fc3 	.word	0x08004fc3
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004ef1 	.word	0x08004ef1
 8004ee8:	08004f65 	.word	0x08004f65
 8004eec:	08004f79 	.word	0x08004f79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	18d1      	adds	r1, r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f10:	f7ff ff5c 	bl	8004dcc <prvInsertTimerInActiveList>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d069      	beq.n	8004fee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d05e      	beq.n	8004fee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	441a      	add	r2, r3
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2100      	movs	r1, #0
 8004f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f42:	f7ff fe05 	bl	8004b50 <xTimerGenericCommand>
 8004f46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d14f      	bne.n	8004fee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	61bb      	str	r3, [r7, #24]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004f76:	e03a      	b.n	8004fee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	617b      	str	r3, [r7, #20]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	18d1      	adds	r1, r2, r3
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fbc:	f7ff ff06 	bl	8004dcc <prvInsertTimerInActiveList>
					break;
 8004fc0:	e015      	b.n	8004fee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd2:	f000 fbfd 	bl	80057d0 <vPortFree>
 8004fd6:	e00a      	b.n	8004fee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fde:	f023 0301 	bic.w	r3, r3, #1
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004fea:	e000      	b.n	8004fee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004fec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <prvProcessReceivedCommands+0x1c0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	1d39      	adds	r1, r7, #4
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe fb36 	bl	8003668 <xQueueReceive>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f47f af2a 	bne.w	8004e58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
 8005008:	3730      	adds	r7, #48	; 0x30
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000df4 	.word	0x20000df4

08005014 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800501a:	e048      	b.n	80050ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800501c:	4b2d      	ldr	r3, [pc, #180]	; (80050d4 <prvSwitchTimerLists+0xc0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005026:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <prvSwitchTimerLists+0xc0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe f84f 	bl	80030d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d02e      	beq.n	80050ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4413      	add	r3, r2
 8005058:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	429a      	cmp	r2, r3
 8005060:	d90e      	bls.n	8005080 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800506e:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <prvSwitchTimerLists+0xc0>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f7fd fff4 	bl	8003066 <vListInsert>
 800507e:	e016      	b.n	80050ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005080:	2300      	movs	r3, #0
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	2100      	movs	r1, #0
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff fd60 	bl	8004b50 <xTimerGenericCommand>
 8005090:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	603b      	str	r3, [r7, #0]
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050ae:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <prvSwitchTimerLists+0xc0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1b1      	bne.n	800501c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <prvSwitchTimerLists+0xc0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <prvSwitchTimerLists+0xc4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <prvSwitchTimerLists+0xc0>)
 80050c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050c6:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <prvSwitchTimerLists+0xc4>)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	6013      	str	r3, [r2, #0]
}
 80050cc:	bf00      	nop
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000dec 	.word	0x20000dec
 80050d8:	20000df0 	.word	0x20000df0

080050dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050e2:	f000 f987 	bl	80053f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <prvCheckForValidListAndQueue+0x60>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d120      	bne.n	8005130 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050ee:	4814      	ldr	r0, [pc, #80]	; (8005140 <prvCheckForValidListAndQueue+0x64>)
 80050f0:	f7fd ff68 	bl	8002fc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050f4:	4813      	ldr	r0, [pc, #76]	; (8005144 <prvCheckForValidListAndQueue+0x68>)
 80050f6:	f7fd ff65 	bl	8002fc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <prvCheckForValidListAndQueue+0x6c>)
 80050fc:	4a10      	ldr	r2, [pc, #64]	; (8005140 <prvCheckForValidListAndQueue+0x64>)
 80050fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005100:	4b12      	ldr	r3, [pc, #72]	; (800514c <prvCheckForValidListAndQueue+0x70>)
 8005102:	4a10      	ldr	r2, [pc, #64]	; (8005144 <prvCheckForValidListAndQueue+0x68>)
 8005104:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005106:	2300      	movs	r3, #0
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <prvCheckForValidListAndQueue+0x74>)
 800510c:	4a11      	ldr	r2, [pc, #68]	; (8005154 <prvCheckForValidListAndQueue+0x78>)
 800510e:	2110      	movs	r1, #16
 8005110:	200a      	movs	r0, #10
 8005112:	f7fe f873 	bl	80031fc <xQueueGenericCreateStatic>
 8005116:	4603      	mov	r3, r0
 8005118:	4a08      	ldr	r2, [pc, #32]	; (800513c <prvCheckForValidListAndQueue+0x60>)
 800511a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800511c:	4b07      	ldr	r3, [pc, #28]	; (800513c <prvCheckForValidListAndQueue+0x60>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <prvCheckForValidListAndQueue+0x60>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	490b      	ldr	r1, [pc, #44]	; (8005158 <prvCheckForValidListAndQueue+0x7c>)
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fc8c 	bl	8003a48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005130:	f000 f990 	bl	8005454 <vPortExitCritical>
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000df4 	.word	0x20000df4
 8005140:	20000dc4 	.word	0x20000dc4
 8005144:	20000dd8 	.word	0x20000dd8
 8005148:	20000dec 	.word	0x20000dec
 800514c:	20000df0 	.word	0x20000df0
 8005150:	20000ea0 	.word	0x20000ea0
 8005154:	20000e00 	.word	0x20000e00
 8005158:	08006480 	.word	0x08006480

0800515c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800516a:	f06f 0301 	mvn.w	r3, #1
 800516e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <xTimerPendFunctionCallFromISR+0x3c>)
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	f107 0114 	add.w	r1, r7, #20
 8005184:	2300      	movs	r3, #0
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	f7fe f9d2 	bl	8003530 <xQueueGenericSendFromISR>
 800518c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005190:	4618      	mov	r0, r3
 8005192:	3728      	adds	r7, #40	; 0x28
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000df4 	.word	0x20000df4

0800519c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3b04      	subs	r3, #4
 80051ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3b04      	subs	r3, #4
 80051ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f023 0201 	bic.w	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3b04      	subs	r3, #4
 80051ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051cc:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <pxPortInitialiseStack+0x64>)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3b14      	subs	r3, #20
 80051d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3b04      	subs	r3, #4
 80051e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f06f 0202 	mvn.w	r2, #2
 80051ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b20      	subs	r3, #32
 80051f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051f2:	68fb      	ldr	r3, [r7, #12]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	08005205 	.word	0x08005205

08005204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800520e:	4b12      	ldr	r3, [pc, #72]	; (8005258 <prvTaskExitError+0x54>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d00a      	beq.n	800522e <prvTaskExitError+0x2a>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	60fb      	str	r3, [r7, #12]
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <prvTaskExitError+0x28>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	60bb      	str	r3, [r7, #8]
}
 8005240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005242:	bf00      	nop
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0fc      	beq.n	8005244 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	2000000c 	.word	0x2000000c
 800525c:	00000000 	.word	0x00000000

08005260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <pxCurrentTCBConst2>)
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	6808      	ldr	r0, [r1, #0]
 8005266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	f380 8809 	msr	PSP, r0
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8811 	msr	BASEPRI, r0
 800527a:	4770      	bx	lr
 800527c:	f3af 8000 	nop.w

08005280 <pxCurrentTCBConst2>:
 8005280:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop

08005288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005288:	4808      	ldr	r0, [pc, #32]	; (80052ac <prvPortStartFirstTask+0x24>)
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	6800      	ldr	r0, [r0, #0]
 800528e:	f380 8808 	msr	MSP, r0
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f380 8814 	msr	CONTROL, r0
 800529a:	b662      	cpsie	i
 800529c:	b661      	cpsie	f
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	df00      	svc	0
 80052a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052aa:	bf00      	nop
 80052ac:	e000ed08 	.word	0xe000ed08

080052b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052b6:	4b46      	ldr	r3, [pc, #280]	; (80053d0 <xPortStartScheduler+0x120>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a46      	ldr	r2, [pc, #280]	; (80053d4 <xPortStartScheduler+0x124>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10a      	bne.n	80052d6 <xPortStartScheduler+0x26>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	613b      	str	r3, [r7, #16]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052d6:	4b3e      	ldr	r3, [pc, #248]	; (80053d0 <xPortStartScheduler+0x120>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a3f      	ldr	r2, [pc, #252]	; (80053d8 <xPortStartScheduler+0x128>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10a      	bne.n	80052f6 <xPortStartScheduler+0x46>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052f6:	4b39      	ldr	r3, [pc, #228]	; (80053dc <xPortStartScheduler+0x12c>)
 80052f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	22ff      	movs	r2, #255	; 0xff
 8005306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4b31      	ldr	r3, [pc, #196]	; (80053e0 <xPortStartScheduler+0x130>)
 800531c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800531e:	4b31      	ldr	r3, [pc, #196]	; (80053e4 <xPortStartScheduler+0x134>)
 8005320:	2207      	movs	r2, #7
 8005322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005324:	e009      	b.n	800533a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005326:	4b2f      	ldr	r3, [pc, #188]	; (80053e4 <xPortStartScheduler+0x134>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3b01      	subs	r3, #1
 800532c:	4a2d      	ldr	r2, [pc, #180]	; (80053e4 <xPortStartScheduler+0x134>)
 800532e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b80      	cmp	r3, #128	; 0x80
 8005344:	d0ef      	beq.n	8005326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005346:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <xPortStartScheduler+0x134>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f1c3 0307 	rsb	r3, r3, #7
 800534e:	2b04      	cmp	r3, #4
 8005350:	d00a      	beq.n	8005368 <xPortStartScheduler+0xb8>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60bb      	str	r3, [r7, #8]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005368:	4b1e      	ldr	r3, [pc, #120]	; (80053e4 <xPortStartScheduler+0x134>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <xPortStartScheduler+0x134>)
 8005370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005372:	4b1c      	ldr	r3, [pc, #112]	; (80053e4 <xPortStartScheduler+0x134>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800537a:	4a1a      	ldr	r2, [pc, #104]	; (80053e4 <xPortStartScheduler+0x134>)
 800537c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005386:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <xPortStartScheduler+0x138>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <xPortStartScheduler+0x138>)
 800538c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005392:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <xPortStartScheduler+0x138>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <xPortStartScheduler+0x138>)
 8005398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800539c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800539e:	f000 f8dd 	bl	800555c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <xPortStartScheduler+0x13c>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053a8:	f000 f8fc 	bl	80055a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <xPortStartScheduler+0x140>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a0f      	ldr	r2, [pc, #60]	; (80053f0 <xPortStartScheduler+0x140>)
 80053b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053b8:	f7ff ff66 	bl	8005288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053bc:	f7fe ff74 	bl	80042a8 <vTaskSwitchContext>
	prvTaskExitError();
 80053c0:	f7ff ff20 	bl	8005204 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	e000ed00 	.word	0xe000ed00
 80053d4:	410fc271 	.word	0x410fc271
 80053d8:	410fc270 	.word	0x410fc270
 80053dc:	e000e400 	.word	0xe000e400
 80053e0:	20000ef0 	.word	0x20000ef0
 80053e4:	20000ef4 	.word	0x20000ef4
 80053e8:	e000ed20 	.word	0xe000ed20
 80053ec:	2000000c 	.word	0x2000000c
 80053f0:	e000ef34 	.word	0xe000ef34

080053f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	607b      	str	r3, [r7, #4]
}
 800540c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <vPortEnterCritical+0x58>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3301      	adds	r3, #1
 8005414:	4a0d      	ldr	r2, [pc, #52]	; (800544c <vPortEnterCritical+0x58>)
 8005416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <vPortEnterCritical+0x58>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d10f      	bne.n	8005440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <vPortEnterCritical+0x5c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <vPortEnterCritical+0x4c>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	603b      	str	r3, [r7, #0]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <vPortEnterCritical+0x4a>
	}
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	2000000c 	.word	0x2000000c
 8005450:	e000ed04 	.word	0xe000ed04

08005454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800545a:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <vPortExitCritical+0x50>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <vPortExitCritical+0x24>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	607b      	str	r3, [r7, #4]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <vPortExitCritical+0x50>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3b01      	subs	r3, #1
 800547e:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <vPortExitCritical+0x50>)
 8005480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005482:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <vPortExitCritical+0x50>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <vPortExitCritical+0x42>
 800548a:	2300      	movs	r3, #0
 800548c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	f383 8811 	msr	BASEPRI, r3
}
 8005494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	2000000c 	.word	0x2000000c
	...

080054b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054b0:	f3ef 8009 	mrs	r0, PSP
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <pxCurrentTCBConst>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	f01e 0f10 	tst.w	lr, #16
 80054c0:	bf08      	it	eq
 80054c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ca:	6010      	str	r0, [r2, #0]
 80054cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054d4:	f380 8811 	msr	BASEPRI, r0
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f7fe fee2 	bl	80042a8 <vTaskSwitchContext>
 80054e4:	f04f 0000 	mov.w	r0, #0
 80054e8:	f380 8811 	msr	BASEPRI, r0
 80054ec:	bc09      	pop	{r0, r3}
 80054ee:	6819      	ldr	r1, [r3, #0]
 80054f0:	6808      	ldr	r0, [r1, #0]
 80054f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f6:	f01e 0f10 	tst.w	lr, #16
 80054fa:	bf08      	it	eq
 80054fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005500:	f380 8809 	msr	PSP, r0
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	f3af 8000 	nop.w

08005510 <pxCurrentTCBConst>:
 8005510:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop

08005518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
}
 8005530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005532:	f7fe fdff 	bl	8004134 <xTaskIncrementTick>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <xPortSysTickHandler+0x40>)
 800553e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	2300      	movs	r3, #0
 8005546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f383 8811 	msr	BASEPRI, r3
}
 800554e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005550:	bf00      	nop
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <vPortSetupTimerInterrupt+0x34>)
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <vPortSetupTimerInterrupt+0x38>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <vPortSetupTimerInterrupt+0x3c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a0a      	ldr	r2, [pc, #40]	; (800559c <vPortSetupTimerInterrupt+0x40>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <vPortSetupTimerInterrupt+0x44>)
 800557a:	3b01      	subs	r3, #1
 800557c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800557e:	4b04      	ldr	r3, [pc, #16]	; (8005590 <vPortSetupTimerInterrupt+0x34>)
 8005580:	2207      	movs	r2, #7
 8005582:	601a      	str	r2, [r3, #0]
}
 8005584:	bf00      	nop
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	e000e010 	.word	0xe000e010
 8005594:	e000e018 	.word	0xe000e018
 8005598:	20000000 	.word	0x20000000
 800559c:	10624dd3 	.word	0x10624dd3
 80055a0:	e000e014 	.word	0xe000e014

080055a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055b4 <vPortEnableVFP+0x10>
 80055a8:	6801      	ldr	r1, [r0, #0]
 80055aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055ae:	6001      	str	r1, [r0, #0]
 80055b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055b2:	bf00      	nop
 80055b4:	e000ed88 	.word	0xe000ed88

080055b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055be:	f3ef 8305 	mrs	r3, IPSR
 80055c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b0f      	cmp	r3, #15
 80055c8:	d914      	bls.n	80055f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055ca:	4a17      	ldr	r2, [pc, #92]	; (8005628 <vPortValidateInterruptPriority+0x70>)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055d4:	4b15      	ldr	r3, [pc, #84]	; (800562c <vPortValidateInterruptPriority+0x74>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	7afa      	ldrb	r2, [r7, #11]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d20a      	bcs.n	80055f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055f4:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <vPortValidateInterruptPriority+0x78>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <vPortValidateInterruptPriority+0x7c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d90a      	bls.n	800561a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	603b      	str	r3, [r7, #0]
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <vPortValidateInterruptPriority+0x60>
	}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	e000e3f0 	.word	0xe000e3f0
 800562c:	20000ef0 	.word	0x20000ef0
 8005630:	e000ed0c 	.word	0xe000ed0c
 8005634:	20000ef4 	.word	0x20000ef4

08005638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	; 0x28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005640:	2300      	movs	r3, #0
 8005642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005644:	f7fe fcba 	bl	8003fbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005648:	4b5b      	ldr	r3, [pc, #364]	; (80057b8 <pvPortMalloc+0x180>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005650:	f000 f920 	bl	8005894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005654:	4b59      	ldr	r3, [pc, #356]	; (80057bc <pvPortMalloc+0x184>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	f040 8093 	bne.w	8005788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01d      	beq.n	80056a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005668:	2208      	movs	r2, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	2b00      	cmp	r3, #0
 8005678:	d014      	beq.n	80056a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f023 0307 	bic.w	r3, r3, #7
 8005680:	3308      	adds	r3, #8
 8005682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <pvPortMalloc+0x6c>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	617b      	str	r3, [r7, #20]
}
 80056a0:	bf00      	nop
 80056a2:	e7fe      	b.n	80056a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d06e      	beq.n	8005788 <pvPortMalloc+0x150>
 80056aa:	4b45      	ldr	r3, [pc, #276]	; (80057c0 <pvPortMalloc+0x188>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d869      	bhi.n	8005788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056b4:	4b43      	ldr	r3, [pc, #268]	; (80057c4 <pvPortMalloc+0x18c>)
 80056b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056b8:	4b42      	ldr	r3, [pc, #264]	; (80057c4 <pvPortMalloc+0x18c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056be:	e004      	b.n	80056ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d903      	bls.n	80056dc <pvPortMalloc+0xa4>
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f1      	bne.n	80056c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056dc:	4b36      	ldr	r3, [pc, #216]	; (80057b8 <pvPortMalloc+0x180>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d050      	beq.n	8005788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2208      	movs	r2, #8
 80056ec:	4413      	add	r3, r2
 80056ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	2308      	movs	r3, #8
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	429a      	cmp	r2, r3
 8005706:	d91f      	bls.n	8005748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <pvPortMalloc+0xf8>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	613b      	str	r3, [r7, #16]
}
 800572c:	bf00      	nop
 800572e:	e7fe      	b.n	800572e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	1ad2      	subs	r2, r2, r3
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005742:	69b8      	ldr	r0, [r7, #24]
 8005744:	f000 f908 	bl	8005958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005748:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <pvPortMalloc+0x188>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	4a1b      	ldr	r2, [pc, #108]	; (80057c0 <pvPortMalloc+0x188>)
 8005754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005756:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <pvPortMalloc+0x188>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b1b      	ldr	r3, [pc, #108]	; (80057c8 <pvPortMalloc+0x190>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d203      	bcs.n	800576a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005762:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <pvPortMalloc+0x188>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <pvPortMalloc+0x190>)
 8005768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <pvPortMalloc+0x184>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	431a      	orrs	r2, r3
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800577e:	4b13      	ldr	r3, [pc, #76]	; (80057cc <pvPortMalloc+0x194>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	4a11      	ldr	r2, [pc, #68]	; (80057cc <pvPortMalloc+0x194>)
 8005786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005788:	f7fe fc26 	bl	8003fd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <pvPortMalloc+0x174>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	60fb      	str	r3, [r7, #12]
}
 80057a8:	bf00      	nop
 80057aa:	e7fe      	b.n	80057aa <pvPortMalloc+0x172>
	return pvReturn;
 80057ac:	69fb      	ldr	r3, [r7, #28]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3728      	adds	r7, #40	; 0x28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20004b00 	.word	0x20004b00
 80057bc:	20004b14 	.word	0x20004b14
 80057c0:	20004b04 	.word	0x20004b04
 80057c4:	20004af8 	.word	0x20004af8
 80057c8:	20004b08 	.word	0x20004b08
 80057cc:	20004b0c 	.word	0x20004b0c

080057d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d04d      	beq.n	800587e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057e2:	2308      	movs	r3, #8
 80057e4:	425b      	negs	r3, r3
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4413      	add	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	4b24      	ldr	r3, [pc, #144]	; (8005888 <vPortFree+0xb8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <vPortFree+0x44>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60fb      	str	r3, [r7, #12]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <vPortFree+0x62>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	60bb      	str	r3, [r7, #8]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <vPortFree+0xb8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4013      	ands	r3, r2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01e      	beq.n	800587e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d11a      	bne.n	800587e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <vPortFree+0xb8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	43db      	mvns	r3, r3
 8005852:	401a      	ands	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005858:	f7fe fbb0 	bl	8003fbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <vPortFree+0xbc>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4413      	add	r3, r2
 8005866:	4a09      	ldr	r2, [pc, #36]	; (800588c <vPortFree+0xbc>)
 8005868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800586a:	6938      	ldr	r0, [r7, #16]
 800586c:	f000 f874 	bl	8005958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <vPortFree+0xc0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	4a06      	ldr	r2, [pc, #24]	; (8005890 <vPortFree+0xc0>)
 8005878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800587a:	f7fe fbad 	bl	8003fd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800587e:	bf00      	nop
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20004b14 	.word	0x20004b14
 800588c:	20004b04 	.word	0x20004b04
 8005890:	20004b10 	.word	0x20004b10

08005894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800589a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800589e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058a0:	4b27      	ldr	r3, [pc, #156]	; (8005940 <prvHeapInit+0xac>)
 80058a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00c      	beq.n	80058c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3307      	adds	r3, #7
 80058b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0307 	bic.w	r3, r3, #7
 80058ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	4a1f      	ldr	r2, [pc, #124]	; (8005940 <prvHeapInit+0xac>)
 80058c4:	4413      	add	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058cc:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <prvHeapInit+0xb0>)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058d2:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <prvHeapInit+0xb0>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	4413      	add	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058e0:	2208      	movs	r2, #8
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0307 	bic.w	r3, r3, #7
 80058ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a15      	ldr	r2, [pc, #84]	; (8005948 <prvHeapInit+0xb4>)
 80058f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <prvHeapInit+0xb4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <prvHeapInit+0xb4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	1ad2      	subs	r2, r2, r3
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <prvHeapInit+0xb4>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <prvHeapInit+0xb8>)
 8005922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <prvHeapInit+0xbc>)
 800592a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800592c:	4b09      	ldr	r3, [pc, #36]	; (8005954 <prvHeapInit+0xc0>)
 800592e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005932:	601a      	str	r2, [r3, #0]
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	20000ef8 	.word	0x20000ef8
 8005944:	20004af8 	.word	0x20004af8
 8005948:	20004b00 	.word	0x20004b00
 800594c:	20004b08 	.word	0x20004b08
 8005950:	20004b04 	.word	0x20004b04
 8005954:	20004b14 	.word	0x20004b14

08005958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005960:	4b28      	ldr	r3, [pc, #160]	; (8005a04 <prvInsertBlockIntoFreeList+0xac>)
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	e002      	b.n	800596c <prvInsertBlockIntoFreeList+0x14>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	429a      	cmp	r2, r3
 8005974:	d8f7      	bhi.n	8005966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	4413      	add	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d108      	bne.n	800599a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	441a      	add	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	441a      	add	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d118      	bne.n	80059e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <prvInsertBlockIntoFreeList+0xb0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d00d      	beq.n	80059d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	441a      	add	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e008      	b.n	80059e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <prvInsertBlockIntoFreeList+0xb0>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	e003      	b.n	80059e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d002      	beq.n	80059f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20004af8 	.word	0x20004af8
 8005a08:	20004b00 	.word	0x20004b00

08005a0c <std>:
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	4604      	mov	r4, r0
 8005a12:	e9c0 3300 	strd	r3, r3, [r0]
 8005a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a1a:	6083      	str	r3, [r0, #8]
 8005a1c:	8181      	strh	r1, [r0, #12]
 8005a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8005a20:	81c2      	strh	r2, [r0, #14]
 8005a22:	6183      	str	r3, [r0, #24]
 8005a24:	4619      	mov	r1, r3
 8005a26:	2208      	movs	r2, #8
 8005a28:	305c      	adds	r0, #92	; 0x5c
 8005a2a:	f000 f9e5 	bl	8005df8 <memset>
 8005a2e:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <std+0x58>)
 8005a30:	6263      	str	r3, [r4, #36]	; 0x24
 8005a32:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <std+0x5c>)
 8005a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <std+0x60>)
 8005a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <std+0x64>)
 8005a3c:	6323      	str	r3, [r4, #48]	; 0x30
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <std+0x68>)
 8005a40:	6224      	str	r4, [r4, #32]
 8005a42:	429c      	cmp	r4, r3
 8005a44:	d006      	beq.n	8005a54 <std+0x48>
 8005a46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005a4a:	4294      	cmp	r4, r2
 8005a4c:	d002      	beq.n	8005a54 <std+0x48>
 8005a4e:	33d0      	adds	r3, #208	; 0xd0
 8005a50:	429c      	cmp	r4, r3
 8005a52:	d105      	bne.n	8005a60 <std+0x54>
 8005a54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a5c:	f000 ba9a 	b.w	8005f94 <__retarget_lock_init_recursive>
 8005a60:	bd10      	pop	{r4, pc}
 8005a62:	bf00      	nop
 8005a64:	08005c49 	.word	0x08005c49
 8005a68:	08005c6b 	.word	0x08005c6b
 8005a6c:	08005ca3 	.word	0x08005ca3
 8005a70:	08005cc7 	.word	0x08005cc7
 8005a74:	20004b18 	.word	0x20004b18

08005a78 <stdio_exit_handler>:
 8005a78:	4a02      	ldr	r2, [pc, #8]	; (8005a84 <stdio_exit_handler+0xc>)
 8005a7a:	4903      	ldr	r1, [pc, #12]	; (8005a88 <stdio_exit_handler+0x10>)
 8005a7c:	4803      	ldr	r0, [pc, #12]	; (8005a8c <stdio_exit_handler+0x14>)
 8005a7e:	f000 b869 	b.w	8005b54 <_fwalk_sglue>
 8005a82:	bf00      	nop
 8005a84:	20000010 	.word	0x20000010
 8005a88:	080062b5 	.word	0x080062b5
 8005a8c:	2000001c 	.word	0x2000001c

08005a90 <cleanup_stdio>:
 8005a90:	6841      	ldr	r1, [r0, #4]
 8005a92:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <cleanup_stdio+0x34>)
 8005a94:	4299      	cmp	r1, r3
 8005a96:	b510      	push	{r4, lr}
 8005a98:	4604      	mov	r4, r0
 8005a9a:	d001      	beq.n	8005aa0 <cleanup_stdio+0x10>
 8005a9c:	f000 fc0a 	bl	80062b4 <_fflush_r>
 8005aa0:	68a1      	ldr	r1, [r4, #8]
 8005aa2:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <cleanup_stdio+0x38>)
 8005aa4:	4299      	cmp	r1, r3
 8005aa6:	d002      	beq.n	8005aae <cleanup_stdio+0x1e>
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 fc03 	bl	80062b4 <_fflush_r>
 8005aae:	68e1      	ldr	r1, [r4, #12]
 8005ab0:	4b06      	ldr	r3, [pc, #24]	; (8005acc <cleanup_stdio+0x3c>)
 8005ab2:	4299      	cmp	r1, r3
 8005ab4:	d004      	beq.n	8005ac0 <cleanup_stdio+0x30>
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005abc:	f000 bbfa 	b.w	80062b4 <_fflush_r>
 8005ac0:	bd10      	pop	{r4, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20004b18 	.word	0x20004b18
 8005ac8:	20004b80 	.word	0x20004b80
 8005acc:	20004be8 	.word	0x20004be8

08005ad0 <global_stdio_init.part.0>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <global_stdio_init.part.0+0x30>)
 8005ad4:	4c0b      	ldr	r4, [pc, #44]	; (8005b04 <global_stdio_init.part.0+0x34>)
 8005ad6:	4a0c      	ldr	r2, [pc, #48]	; (8005b08 <global_stdio_init.part.0+0x38>)
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	4620      	mov	r0, r4
 8005adc:	2200      	movs	r2, #0
 8005ade:	2104      	movs	r1, #4
 8005ae0:	f7ff ff94 	bl	8005a0c <std>
 8005ae4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005ae8:	2201      	movs	r2, #1
 8005aea:	2109      	movs	r1, #9
 8005aec:	f7ff ff8e 	bl	8005a0c <std>
 8005af0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005af4:	2202      	movs	r2, #2
 8005af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005afa:	2112      	movs	r1, #18
 8005afc:	f7ff bf86 	b.w	8005a0c <std>
 8005b00:	20004c50 	.word	0x20004c50
 8005b04:	20004b18 	.word	0x20004b18
 8005b08:	08005a79 	.word	0x08005a79

08005b0c <__sfp_lock_acquire>:
 8005b0c:	4801      	ldr	r0, [pc, #4]	; (8005b14 <__sfp_lock_acquire+0x8>)
 8005b0e:	f000 ba42 	b.w	8005f96 <__retarget_lock_acquire_recursive>
 8005b12:	bf00      	nop
 8005b14:	20004c59 	.word	0x20004c59

08005b18 <__sfp_lock_release>:
 8005b18:	4801      	ldr	r0, [pc, #4]	; (8005b20 <__sfp_lock_release+0x8>)
 8005b1a:	f000 ba3d 	b.w	8005f98 <__retarget_lock_release_recursive>
 8005b1e:	bf00      	nop
 8005b20:	20004c59 	.word	0x20004c59

08005b24 <__sinit>:
 8005b24:	b510      	push	{r4, lr}
 8005b26:	4604      	mov	r4, r0
 8005b28:	f7ff fff0 	bl	8005b0c <__sfp_lock_acquire>
 8005b2c:	6a23      	ldr	r3, [r4, #32]
 8005b2e:	b11b      	cbz	r3, 8005b38 <__sinit+0x14>
 8005b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b34:	f7ff bff0 	b.w	8005b18 <__sfp_lock_release>
 8005b38:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <__sinit+0x28>)
 8005b3a:	6223      	str	r3, [r4, #32]
 8005b3c:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <__sinit+0x2c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1f5      	bne.n	8005b30 <__sinit+0xc>
 8005b44:	f7ff ffc4 	bl	8005ad0 <global_stdio_init.part.0>
 8005b48:	e7f2      	b.n	8005b30 <__sinit+0xc>
 8005b4a:	bf00      	nop
 8005b4c:	08005a91 	.word	0x08005a91
 8005b50:	20004c50 	.word	0x20004c50

08005b54 <_fwalk_sglue>:
 8005b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b58:	4607      	mov	r7, r0
 8005b5a:	4688      	mov	r8, r1
 8005b5c:	4614      	mov	r4, r2
 8005b5e:	2600      	movs	r6, #0
 8005b60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b64:	f1b9 0901 	subs.w	r9, r9, #1
 8005b68:	d505      	bpl.n	8005b76 <_fwalk_sglue+0x22>
 8005b6a:	6824      	ldr	r4, [r4, #0]
 8005b6c:	2c00      	cmp	r4, #0
 8005b6e:	d1f7      	bne.n	8005b60 <_fwalk_sglue+0xc>
 8005b70:	4630      	mov	r0, r6
 8005b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d907      	bls.n	8005b8c <_fwalk_sglue+0x38>
 8005b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b80:	3301      	adds	r3, #1
 8005b82:	d003      	beq.n	8005b8c <_fwalk_sglue+0x38>
 8005b84:	4629      	mov	r1, r5
 8005b86:	4638      	mov	r0, r7
 8005b88:	47c0      	blx	r8
 8005b8a:	4306      	orrs	r6, r0
 8005b8c:	3568      	adds	r5, #104	; 0x68
 8005b8e:	e7e9      	b.n	8005b64 <_fwalk_sglue+0x10>

08005b90 <_puts_r>:
 8005b90:	6a03      	ldr	r3, [r0, #32]
 8005b92:	b570      	push	{r4, r5, r6, lr}
 8005b94:	6884      	ldr	r4, [r0, #8]
 8005b96:	4605      	mov	r5, r0
 8005b98:	460e      	mov	r6, r1
 8005b9a:	b90b      	cbnz	r3, 8005ba0 <_puts_r+0x10>
 8005b9c:	f7ff ffc2 	bl	8005b24 <__sinit>
 8005ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ba2:	07db      	lsls	r3, r3, #31
 8005ba4:	d405      	bmi.n	8005bb2 <_puts_r+0x22>
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	0598      	lsls	r0, r3, #22
 8005baa:	d402      	bmi.n	8005bb2 <_puts_r+0x22>
 8005bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bae:	f000 f9f2 	bl	8005f96 <__retarget_lock_acquire_recursive>
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	0719      	lsls	r1, r3, #28
 8005bb6:	d513      	bpl.n	8005be0 <_puts_r+0x50>
 8005bb8:	6923      	ldr	r3, [r4, #16]
 8005bba:	b18b      	cbz	r3, 8005be0 <_puts_r+0x50>
 8005bbc:	3e01      	subs	r6, #1
 8005bbe:	68a3      	ldr	r3, [r4, #8]
 8005bc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	60a3      	str	r3, [r4, #8]
 8005bc8:	b9e9      	cbnz	r1, 8005c06 <_puts_r+0x76>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	da2e      	bge.n	8005c2c <_puts_r+0x9c>
 8005bce:	4622      	mov	r2, r4
 8005bd0:	210a      	movs	r1, #10
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 f87b 	bl	8005cce <__swbuf_r>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d007      	beq.n	8005bec <_puts_r+0x5c>
 8005bdc:	250a      	movs	r5, #10
 8005bde:	e007      	b.n	8005bf0 <_puts_r+0x60>
 8005be0:	4621      	mov	r1, r4
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f8b0 	bl	8005d48 <__swsetup_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d0e7      	beq.n	8005bbc <_puts_r+0x2c>
 8005bec:	f04f 35ff 	mov.w	r5, #4294967295
 8005bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bf2:	07da      	lsls	r2, r3, #31
 8005bf4:	d405      	bmi.n	8005c02 <_puts_r+0x72>
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	059b      	lsls	r3, r3, #22
 8005bfa:	d402      	bmi.n	8005c02 <_puts_r+0x72>
 8005bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfe:	f000 f9cb 	bl	8005f98 <__retarget_lock_release_recursive>
 8005c02:	4628      	mov	r0, r5
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da04      	bge.n	8005c14 <_puts_r+0x84>
 8005c0a:	69a2      	ldr	r2, [r4, #24]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	dc06      	bgt.n	8005c1e <_puts_r+0x8e>
 8005c10:	290a      	cmp	r1, #10
 8005c12:	d004      	beq.n	8005c1e <_puts_r+0x8e>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	6022      	str	r2, [r4, #0]
 8005c1a:	7019      	strb	r1, [r3, #0]
 8005c1c:	e7cf      	b.n	8005bbe <_puts_r+0x2e>
 8005c1e:	4622      	mov	r2, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 f854 	bl	8005cce <__swbuf_r>
 8005c26:	3001      	adds	r0, #1
 8005c28:	d1c9      	bne.n	8005bbe <_puts_r+0x2e>
 8005c2a:	e7df      	b.n	8005bec <_puts_r+0x5c>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	250a      	movs	r5, #10
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	6022      	str	r2, [r4, #0]
 8005c34:	701d      	strb	r5, [r3, #0]
 8005c36:	e7db      	b.n	8005bf0 <_puts_r+0x60>

08005c38 <puts>:
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <puts+0xc>)
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f7ff bfa7 	b.w	8005b90 <_puts_r>
 8005c42:	bf00      	nop
 8005c44:	20000068 	.word	0x20000068

08005c48 <__sread>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c50:	f000 f952 	bl	8005ef8 <_read_r>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	bfab      	itete	ge
 8005c58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c5c:	181b      	addge	r3, r3, r0
 8005c5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c62:	bfac      	ite	ge
 8005c64:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c66:	81a3      	strhlt	r3, [r4, #12]
 8005c68:	bd10      	pop	{r4, pc}

08005c6a <__swrite>:
 8005c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6e:	461f      	mov	r7, r3
 8005c70:	898b      	ldrh	r3, [r1, #12]
 8005c72:	05db      	lsls	r3, r3, #23
 8005c74:	4605      	mov	r5, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	4616      	mov	r6, r2
 8005c7a:	d505      	bpl.n	8005c88 <__swrite+0x1e>
 8005c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c80:	2302      	movs	r3, #2
 8005c82:	2200      	movs	r2, #0
 8005c84:	f000 f926 	bl	8005ed4 <_lseek_r>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	4632      	mov	r2, r6
 8005c96:	463b      	mov	r3, r7
 8005c98:	4628      	mov	r0, r5
 8005c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9e:	f000 b93d 	b.w	8005f1c <_write_r>

08005ca2 <__sseek>:
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005caa:	f000 f913 	bl	8005ed4 <_lseek_r>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	bf15      	itete	ne
 8005cb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cbe:	81a3      	strheq	r3, [r4, #12]
 8005cc0:	bf18      	it	ne
 8005cc2:	81a3      	strhne	r3, [r4, #12]
 8005cc4:	bd10      	pop	{r4, pc}

08005cc6 <__sclose>:
 8005cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cca:	f000 b89d 	b.w	8005e08 <_close_r>

08005cce <__swbuf_r>:
 8005cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd0:	460e      	mov	r6, r1
 8005cd2:	4614      	mov	r4, r2
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	b118      	cbz	r0, 8005ce0 <__swbuf_r+0x12>
 8005cd8:	6a03      	ldr	r3, [r0, #32]
 8005cda:	b90b      	cbnz	r3, 8005ce0 <__swbuf_r+0x12>
 8005cdc:	f7ff ff22 	bl	8005b24 <__sinit>
 8005ce0:	69a3      	ldr	r3, [r4, #24]
 8005ce2:	60a3      	str	r3, [r4, #8]
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	071a      	lsls	r2, r3, #28
 8005ce8:	d525      	bpl.n	8005d36 <__swbuf_r+0x68>
 8005cea:	6923      	ldr	r3, [r4, #16]
 8005cec:	b31b      	cbz	r3, 8005d36 <__swbuf_r+0x68>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	6922      	ldr	r2, [r4, #16]
 8005cf2:	1a98      	subs	r0, r3, r2
 8005cf4:	6963      	ldr	r3, [r4, #20]
 8005cf6:	b2f6      	uxtb	r6, r6
 8005cf8:	4283      	cmp	r3, r0
 8005cfa:	4637      	mov	r7, r6
 8005cfc:	dc04      	bgt.n	8005d08 <__swbuf_r+0x3a>
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 fad7 	bl	80062b4 <_fflush_r>
 8005d06:	b9e0      	cbnz	r0, 8005d42 <__swbuf_r+0x74>
 8005d08:	68a3      	ldr	r3, [r4, #8]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	60a3      	str	r3, [r4, #8]
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	6022      	str	r2, [r4, #0]
 8005d14:	701e      	strb	r6, [r3, #0]
 8005d16:	6962      	ldr	r2, [r4, #20]
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d004      	beq.n	8005d28 <__swbuf_r+0x5a>
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	07db      	lsls	r3, r3, #31
 8005d22:	d506      	bpl.n	8005d32 <__swbuf_r+0x64>
 8005d24:	2e0a      	cmp	r6, #10
 8005d26:	d104      	bne.n	8005d32 <__swbuf_r+0x64>
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f000 fac2 	bl	80062b4 <_fflush_r>
 8005d30:	b938      	cbnz	r0, 8005d42 <__swbuf_r+0x74>
 8005d32:	4638      	mov	r0, r7
 8005d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f000 f805 	bl	8005d48 <__swsetup_r>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d0d5      	beq.n	8005cee <__swbuf_r+0x20>
 8005d42:	f04f 37ff 	mov.w	r7, #4294967295
 8005d46:	e7f4      	b.n	8005d32 <__swbuf_r+0x64>

08005d48 <__swsetup_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4b2a      	ldr	r3, [pc, #168]	; (8005df4 <__swsetup_r+0xac>)
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	460c      	mov	r4, r1
 8005d52:	b118      	cbz	r0, 8005d5c <__swsetup_r+0x14>
 8005d54:	6a03      	ldr	r3, [r0, #32]
 8005d56:	b90b      	cbnz	r3, 8005d5c <__swsetup_r+0x14>
 8005d58:	f7ff fee4 	bl	8005b24 <__sinit>
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d62:	0718      	lsls	r0, r3, #28
 8005d64:	d422      	bmi.n	8005dac <__swsetup_r+0x64>
 8005d66:	06d9      	lsls	r1, r3, #27
 8005d68:	d407      	bmi.n	8005d7a <__swsetup_r+0x32>
 8005d6a:	2309      	movs	r3, #9
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	e034      	b.n	8005de4 <__swsetup_r+0x9c>
 8005d7a:	0758      	lsls	r0, r3, #29
 8005d7c:	d512      	bpl.n	8005da4 <__swsetup_r+0x5c>
 8005d7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d80:	b141      	cbz	r1, 8005d94 <__swsetup_r+0x4c>
 8005d82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d86:	4299      	cmp	r1, r3
 8005d88:	d002      	beq.n	8005d90 <__swsetup_r+0x48>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 f914 	bl	8005fb8 <_free_r>
 8005d90:	2300      	movs	r3, #0
 8005d92:	6363      	str	r3, [r4, #52]	; 0x34
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	6063      	str	r3, [r4, #4]
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	f043 0308 	orr.w	r3, r3, #8
 8005daa:	81a3      	strh	r3, [r4, #12]
 8005dac:	6923      	ldr	r3, [r4, #16]
 8005dae:	b94b      	cbnz	r3, 8005dc4 <__swsetup_r+0x7c>
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dba:	d003      	beq.n	8005dc4 <__swsetup_r+0x7c>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 fac6 	bl	8006350 <__smakebuf_r>
 8005dc4:	89a0      	ldrh	r0, [r4, #12]
 8005dc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dca:	f010 0301 	ands.w	r3, r0, #1
 8005dce:	d00a      	beq.n	8005de6 <__swsetup_r+0x9e>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60a3      	str	r3, [r4, #8]
 8005dd4:	6963      	ldr	r3, [r4, #20]
 8005dd6:	425b      	negs	r3, r3
 8005dd8:	61a3      	str	r3, [r4, #24]
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	b943      	cbnz	r3, 8005df0 <__swsetup_r+0xa8>
 8005dde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005de2:	d1c4      	bne.n	8005d6e <__swsetup_r+0x26>
 8005de4:	bd38      	pop	{r3, r4, r5, pc}
 8005de6:	0781      	lsls	r1, r0, #30
 8005de8:	bf58      	it	pl
 8005dea:	6963      	ldrpl	r3, [r4, #20]
 8005dec:	60a3      	str	r3, [r4, #8]
 8005dee:	e7f4      	b.n	8005dda <__swsetup_r+0x92>
 8005df0:	2000      	movs	r0, #0
 8005df2:	e7f7      	b.n	8005de4 <__swsetup_r+0x9c>
 8005df4:	20000068 	.word	0x20000068

08005df8 <memset>:
 8005df8:	4402      	add	r2, r0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d100      	bne.n	8005e02 <memset+0xa>
 8005e00:	4770      	bx	lr
 8005e02:	f803 1b01 	strb.w	r1, [r3], #1
 8005e06:	e7f9      	b.n	8005dfc <memset+0x4>

08005e08 <_close_r>:
 8005e08:	b538      	push	{r3, r4, r5, lr}
 8005e0a:	4d06      	ldr	r5, [pc, #24]	; (8005e24 <_close_r+0x1c>)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	4604      	mov	r4, r0
 8005e10:	4608      	mov	r0, r1
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	f7fa fe1f 	bl	8000a56 <_close>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_close_r+0x1a>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_close_r+0x1a>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20004c54 	.word	0x20004c54

08005e28 <_reclaim_reent>:
 8005e28:	4b29      	ldr	r3, [pc, #164]	; (8005ed0 <_reclaim_reent+0xa8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4283      	cmp	r3, r0
 8005e2e:	b570      	push	{r4, r5, r6, lr}
 8005e30:	4604      	mov	r4, r0
 8005e32:	d04b      	beq.n	8005ecc <_reclaim_reent+0xa4>
 8005e34:	69c3      	ldr	r3, [r0, #28]
 8005e36:	b143      	cbz	r3, 8005e4a <_reclaim_reent+0x22>
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d144      	bne.n	8005ec8 <_reclaim_reent+0xa0>
 8005e3e:	69e3      	ldr	r3, [r4, #28]
 8005e40:	6819      	ldr	r1, [r3, #0]
 8005e42:	b111      	cbz	r1, 8005e4a <_reclaim_reent+0x22>
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 f8b7 	bl	8005fb8 <_free_r>
 8005e4a:	6961      	ldr	r1, [r4, #20]
 8005e4c:	b111      	cbz	r1, 8005e54 <_reclaim_reent+0x2c>
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 f8b2 	bl	8005fb8 <_free_r>
 8005e54:	69e1      	ldr	r1, [r4, #28]
 8005e56:	b111      	cbz	r1, 8005e5e <_reclaim_reent+0x36>
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 f8ad 	bl	8005fb8 <_free_r>
 8005e5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005e60:	b111      	cbz	r1, 8005e68 <_reclaim_reent+0x40>
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 f8a8 	bl	8005fb8 <_free_r>
 8005e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e6a:	b111      	cbz	r1, 8005e72 <_reclaim_reent+0x4a>
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 f8a3 	bl	8005fb8 <_free_r>
 8005e72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005e74:	b111      	cbz	r1, 8005e7c <_reclaim_reent+0x54>
 8005e76:	4620      	mov	r0, r4
 8005e78:	f000 f89e 	bl	8005fb8 <_free_r>
 8005e7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e7e:	b111      	cbz	r1, 8005e86 <_reclaim_reent+0x5e>
 8005e80:	4620      	mov	r0, r4
 8005e82:	f000 f899 	bl	8005fb8 <_free_r>
 8005e86:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005e88:	b111      	cbz	r1, 8005e90 <_reclaim_reent+0x68>
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 f894 	bl	8005fb8 <_free_r>
 8005e90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005e92:	b111      	cbz	r1, 8005e9a <_reclaim_reent+0x72>
 8005e94:	4620      	mov	r0, r4
 8005e96:	f000 f88f 	bl	8005fb8 <_free_r>
 8005e9a:	6a23      	ldr	r3, [r4, #32]
 8005e9c:	b1b3      	cbz	r3, 8005ecc <_reclaim_reent+0xa4>
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ea4:	4718      	bx	r3
 8005ea6:	5949      	ldr	r1, [r1, r5]
 8005ea8:	b941      	cbnz	r1, 8005ebc <_reclaim_reent+0x94>
 8005eaa:	3504      	adds	r5, #4
 8005eac:	69e3      	ldr	r3, [r4, #28]
 8005eae:	2d80      	cmp	r5, #128	; 0x80
 8005eb0:	68d9      	ldr	r1, [r3, #12]
 8005eb2:	d1f8      	bne.n	8005ea6 <_reclaim_reent+0x7e>
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f000 f87f 	bl	8005fb8 <_free_r>
 8005eba:	e7c0      	b.n	8005e3e <_reclaim_reent+0x16>
 8005ebc:	680e      	ldr	r6, [r1, #0]
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f000 f87a 	bl	8005fb8 <_free_r>
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	e7ef      	b.n	8005ea8 <_reclaim_reent+0x80>
 8005ec8:	2500      	movs	r5, #0
 8005eca:	e7ef      	b.n	8005eac <_reclaim_reent+0x84>
 8005ecc:	bd70      	pop	{r4, r5, r6, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000068 	.word	0x20000068

08005ed4 <_lseek_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4d07      	ldr	r5, [pc, #28]	; (8005ef4 <_lseek_r+0x20>)
 8005ed8:	4604      	mov	r4, r0
 8005eda:	4608      	mov	r0, r1
 8005edc:	4611      	mov	r1, r2
 8005ede:	2200      	movs	r2, #0
 8005ee0:	602a      	str	r2, [r5, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f7fa fdde 	bl	8000aa4 <_lseek>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_lseek_r+0x1e>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_lseek_r+0x1e>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	20004c54 	.word	0x20004c54

08005ef8 <_read_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	; (8005f18 <_read_r+0x20>)
 8005efc:	4604      	mov	r4, r0
 8005efe:	4608      	mov	r0, r1
 8005f00:	4611      	mov	r1, r2
 8005f02:	2200      	movs	r2, #0
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fa fd88 	bl	8000a1c <_read>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_read_r+0x1e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_read_r+0x1e>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	20004c54 	.word	0x20004c54

08005f1c <_write_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d07      	ldr	r5, [pc, #28]	; (8005f3c <_write_r+0x20>)
 8005f20:	4604      	mov	r4, r0
 8005f22:	4608      	mov	r0, r1
 8005f24:	4611      	mov	r1, r2
 8005f26:	2200      	movs	r2, #0
 8005f28:	602a      	str	r2, [r5, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f7fa fad6 	bl	80004dc <_write>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_write_r+0x1e>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_write_r+0x1e>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	20004c54 	.word	0x20004c54

08005f40 <__errno>:
 8005f40:	4b01      	ldr	r3, [pc, #4]	; (8005f48 <__errno+0x8>)
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000068 	.word	0x20000068

08005f4c <__libc_init_array>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	4d0d      	ldr	r5, [pc, #52]	; (8005f84 <__libc_init_array+0x38>)
 8005f50:	4c0d      	ldr	r4, [pc, #52]	; (8005f88 <__libc_init_array+0x3c>)
 8005f52:	1b64      	subs	r4, r4, r5
 8005f54:	10a4      	asrs	r4, r4, #2
 8005f56:	2600      	movs	r6, #0
 8005f58:	42a6      	cmp	r6, r4
 8005f5a:	d109      	bne.n	8005f70 <__libc_init_array+0x24>
 8005f5c:	4d0b      	ldr	r5, [pc, #44]	; (8005f8c <__libc_init_array+0x40>)
 8005f5e:	4c0c      	ldr	r4, [pc, #48]	; (8005f90 <__libc_init_array+0x44>)
 8005f60:	f000 fa64 	bl	800642c <_init>
 8005f64:	1b64      	subs	r4, r4, r5
 8005f66:	10a4      	asrs	r4, r4, #2
 8005f68:	2600      	movs	r6, #0
 8005f6a:	42a6      	cmp	r6, r4
 8005f6c:	d105      	bne.n	8005f7a <__libc_init_array+0x2e>
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f74:	4798      	blx	r3
 8005f76:	3601      	adds	r6, #1
 8005f78:	e7ee      	b.n	8005f58 <__libc_init_array+0xc>
 8005f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7e:	4798      	blx	r3
 8005f80:	3601      	adds	r6, #1
 8005f82:	e7f2      	b.n	8005f6a <__libc_init_array+0x1e>
 8005f84:	08006524 	.word	0x08006524
 8005f88:	08006524 	.word	0x08006524
 8005f8c:	08006524 	.word	0x08006524
 8005f90:	08006528 	.word	0x08006528

08005f94 <__retarget_lock_init_recursive>:
 8005f94:	4770      	bx	lr

08005f96 <__retarget_lock_acquire_recursive>:
 8005f96:	4770      	bx	lr

08005f98 <__retarget_lock_release_recursive>:
 8005f98:	4770      	bx	lr

08005f9a <memcpy>:
 8005f9a:	440a      	add	r2, r1
 8005f9c:	4291      	cmp	r1, r2
 8005f9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fa2:	d100      	bne.n	8005fa6 <memcpy+0xc>
 8005fa4:	4770      	bx	lr
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fb0:	4291      	cmp	r1, r2
 8005fb2:	d1f9      	bne.n	8005fa8 <memcpy+0xe>
 8005fb4:	bd10      	pop	{r4, pc}
	...

08005fb8 <_free_r>:
 8005fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d044      	beq.n	8006048 <_free_r+0x90>
 8005fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc2:	9001      	str	r0, [sp, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8005fca:	bfb8      	it	lt
 8005fcc:	18e4      	addlt	r4, r4, r3
 8005fce:	f000 f8df 	bl	8006190 <__malloc_lock>
 8005fd2:	4a1e      	ldr	r2, [pc, #120]	; (800604c <_free_r+0x94>)
 8005fd4:	9801      	ldr	r0, [sp, #4]
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	b933      	cbnz	r3, 8005fe8 <_free_r+0x30>
 8005fda:	6063      	str	r3, [r4, #4]
 8005fdc:	6014      	str	r4, [r2, #0]
 8005fde:	b003      	add	sp, #12
 8005fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fe4:	f000 b8da 	b.w	800619c <__malloc_unlock>
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	d908      	bls.n	8005ffe <_free_r+0x46>
 8005fec:	6825      	ldr	r5, [r4, #0]
 8005fee:	1961      	adds	r1, r4, r5
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf01      	itttt	eq
 8005ff4:	6819      	ldreq	r1, [r3, #0]
 8005ff6:	685b      	ldreq	r3, [r3, #4]
 8005ff8:	1949      	addeq	r1, r1, r5
 8005ffa:	6021      	streq	r1, [r4, #0]
 8005ffc:	e7ed      	b.n	8005fda <_free_r+0x22>
 8005ffe:	461a      	mov	r2, r3
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	b10b      	cbz	r3, 8006008 <_free_r+0x50>
 8006004:	42a3      	cmp	r3, r4
 8006006:	d9fa      	bls.n	8005ffe <_free_r+0x46>
 8006008:	6811      	ldr	r1, [r2, #0]
 800600a:	1855      	adds	r5, r2, r1
 800600c:	42a5      	cmp	r5, r4
 800600e:	d10b      	bne.n	8006028 <_free_r+0x70>
 8006010:	6824      	ldr	r4, [r4, #0]
 8006012:	4421      	add	r1, r4
 8006014:	1854      	adds	r4, r2, r1
 8006016:	42a3      	cmp	r3, r4
 8006018:	6011      	str	r1, [r2, #0]
 800601a:	d1e0      	bne.n	8005fde <_free_r+0x26>
 800601c:	681c      	ldr	r4, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	6053      	str	r3, [r2, #4]
 8006022:	440c      	add	r4, r1
 8006024:	6014      	str	r4, [r2, #0]
 8006026:	e7da      	b.n	8005fde <_free_r+0x26>
 8006028:	d902      	bls.n	8006030 <_free_r+0x78>
 800602a:	230c      	movs	r3, #12
 800602c:	6003      	str	r3, [r0, #0]
 800602e:	e7d6      	b.n	8005fde <_free_r+0x26>
 8006030:	6825      	ldr	r5, [r4, #0]
 8006032:	1961      	adds	r1, r4, r5
 8006034:	428b      	cmp	r3, r1
 8006036:	bf04      	itt	eq
 8006038:	6819      	ldreq	r1, [r3, #0]
 800603a:	685b      	ldreq	r3, [r3, #4]
 800603c:	6063      	str	r3, [r4, #4]
 800603e:	bf04      	itt	eq
 8006040:	1949      	addeq	r1, r1, r5
 8006042:	6021      	streq	r1, [r4, #0]
 8006044:	6054      	str	r4, [r2, #4]
 8006046:	e7ca      	b.n	8005fde <_free_r+0x26>
 8006048:	b003      	add	sp, #12
 800604a:	bd30      	pop	{r4, r5, pc}
 800604c:	20004c5c 	.word	0x20004c5c

08006050 <sbrk_aligned>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	4e0e      	ldr	r6, [pc, #56]	; (800608c <sbrk_aligned+0x3c>)
 8006054:	460c      	mov	r4, r1
 8006056:	6831      	ldr	r1, [r6, #0]
 8006058:	4605      	mov	r5, r0
 800605a:	b911      	cbnz	r1, 8006062 <sbrk_aligned+0x12>
 800605c:	f000 f9d6 	bl	800640c <_sbrk_r>
 8006060:	6030      	str	r0, [r6, #0]
 8006062:	4621      	mov	r1, r4
 8006064:	4628      	mov	r0, r5
 8006066:	f000 f9d1 	bl	800640c <_sbrk_r>
 800606a:	1c43      	adds	r3, r0, #1
 800606c:	d00a      	beq.n	8006084 <sbrk_aligned+0x34>
 800606e:	1cc4      	adds	r4, r0, #3
 8006070:	f024 0403 	bic.w	r4, r4, #3
 8006074:	42a0      	cmp	r0, r4
 8006076:	d007      	beq.n	8006088 <sbrk_aligned+0x38>
 8006078:	1a21      	subs	r1, r4, r0
 800607a:	4628      	mov	r0, r5
 800607c:	f000 f9c6 	bl	800640c <_sbrk_r>
 8006080:	3001      	adds	r0, #1
 8006082:	d101      	bne.n	8006088 <sbrk_aligned+0x38>
 8006084:	f04f 34ff 	mov.w	r4, #4294967295
 8006088:	4620      	mov	r0, r4
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	20004c60 	.word	0x20004c60

08006090 <_malloc_r>:
 8006090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006094:	1ccd      	adds	r5, r1, #3
 8006096:	f025 0503 	bic.w	r5, r5, #3
 800609a:	3508      	adds	r5, #8
 800609c:	2d0c      	cmp	r5, #12
 800609e:	bf38      	it	cc
 80060a0:	250c      	movcc	r5, #12
 80060a2:	2d00      	cmp	r5, #0
 80060a4:	4607      	mov	r7, r0
 80060a6:	db01      	blt.n	80060ac <_malloc_r+0x1c>
 80060a8:	42a9      	cmp	r1, r5
 80060aa:	d905      	bls.n	80060b8 <_malloc_r+0x28>
 80060ac:	230c      	movs	r3, #12
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	2600      	movs	r6, #0
 80060b2:	4630      	mov	r0, r6
 80060b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800618c <_malloc_r+0xfc>
 80060bc:	f000 f868 	bl	8006190 <__malloc_lock>
 80060c0:	f8d8 3000 	ldr.w	r3, [r8]
 80060c4:	461c      	mov	r4, r3
 80060c6:	bb5c      	cbnz	r4, 8006120 <_malloc_r+0x90>
 80060c8:	4629      	mov	r1, r5
 80060ca:	4638      	mov	r0, r7
 80060cc:	f7ff ffc0 	bl	8006050 <sbrk_aligned>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	4604      	mov	r4, r0
 80060d4:	d155      	bne.n	8006182 <_malloc_r+0xf2>
 80060d6:	f8d8 4000 	ldr.w	r4, [r8]
 80060da:	4626      	mov	r6, r4
 80060dc:	2e00      	cmp	r6, #0
 80060de:	d145      	bne.n	800616c <_malloc_r+0xdc>
 80060e0:	2c00      	cmp	r4, #0
 80060e2:	d048      	beq.n	8006176 <_malloc_r+0xe6>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	4631      	mov	r1, r6
 80060e8:	4638      	mov	r0, r7
 80060ea:	eb04 0903 	add.w	r9, r4, r3
 80060ee:	f000 f98d 	bl	800640c <_sbrk_r>
 80060f2:	4581      	cmp	r9, r0
 80060f4:	d13f      	bne.n	8006176 <_malloc_r+0xe6>
 80060f6:	6821      	ldr	r1, [r4, #0]
 80060f8:	1a6d      	subs	r5, r5, r1
 80060fa:	4629      	mov	r1, r5
 80060fc:	4638      	mov	r0, r7
 80060fe:	f7ff ffa7 	bl	8006050 <sbrk_aligned>
 8006102:	3001      	adds	r0, #1
 8006104:	d037      	beq.n	8006176 <_malloc_r+0xe6>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	442b      	add	r3, r5
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	f8d8 3000 	ldr.w	r3, [r8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d038      	beq.n	8006186 <_malloc_r+0xf6>
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	42a2      	cmp	r2, r4
 8006118:	d12b      	bne.n	8006172 <_malloc_r+0xe2>
 800611a:	2200      	movs	r2, #0
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	e00f      	b.n	8006140 <_malloc_r+0xb0>
 8006120:	6822      	ldr	r2, [r4, #0]
 8006122:	1b52      	subs	r2, r2, r5
 8006124:	d41f      	bmi.n	8006166 <_malloc_r+0xd6>
 8006126:	2a0b      	cmp	r2, #11
 8006128:	d917      	bls.n	800615a <_malloc_r+0xca>
 800612a:	1961      	adds	r1, r4, r5
 800612c:	42a3      	cmp	r3, r4
 800612e:	6025      	str	r5, [r4, #0]
 8006130:	bf18      	it	ne
 8006132:	6059      	strne	r1, [r3, #4]
 8006134:	6863      	ldr	r3, [r4, #4]
 8006136:	bf08      	it	eq
 8006138:	f8c8 1000 	streq.w	r1, [r8]
 800613c:	5162      	str	r2, [r4, r5]
 800613e:	604b      	str	r3, [r1, #4]
 8006140:	4638      	mov	r0, r7
 8006142:	f104 060b 	add.w	r6, r4, #11
 8006146:	f000 f829 	bl	800619c <__malloc_unlock>
 800614a:	f026 0607 	bic.w	r6, r6, #7
 800614e:	1d23      	adds	r3, r4, #4
 8006150:	1af2      	subs	r2, r6, r3
 8006152:	d0ae      	beq.n	80060b2 <_malloc_r+0x22>
 8006154:	1b9b      	subs	r3, r3, r6
 8006156:	50a3      	str	r3, [r4, r2]
 8006158:	e7ab      	b.n	80060b2 <_malloc_r+0x22>
 800615a:	42a3      	cmp	r3, r4
 800615c:	6862      	ldr	r2, [r4, #4]
 800615e:	d1dd      	bne.n	800611c <_malloc_r+0x8c>
 8006160:	f8c8 2000 	str.w	r2, [r8]
 8006164:	e7ec      	b.n	8006140 <_malloc_r+0xb0>
 8006166:	4623      	mov	r3, r4
 8006168:	6864      	ldr	r4, [r4, #4]
 800616a:	e7ac      	b.n	80060c6 <_malloc_r+0x36>
 800616c:	4634      	mov	r4, r6
 800616e:	6876      	ldr	r6, [r6, #4]
 8006170:	e7b4      	b.n	80060dc <_malloc_r+0x4c>
 8006172:	4613      	mov	r3, r2
 8006174:	e7cc      	b.n	8006110 <_malloc_r+0x80>
 8006176:	230c      	movs	r3, #12
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	4638      	mov	r0, r7
 800617c:	f000 f80e 	bl	800619c <__malloc_unlock>
 8006180:	e797      	b.n	80060b2 <_malloc_r+0x22>
 8006182:	6025      	str	r5, [r4, #0]
 8006184:	e7dc      	b.n	8006140 <_malloc_r+0xb0>
 8006186:	605b      	str	r3, [r3, #4]
 8006188:	deff      	udf	#255	; 0xff
 800618a:	bf00      	nop
 800618c:	20004c5c 	.word	0x20004c5c

08006190 <__malloc_lock>:
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <__malloc_lock+0x8>)
 8006192:	f7ff bf00 	b.w	8005f96 <__retarget_lock_acquire_recursive>
 8006196:	bf00      	nop
 8006198:	20004c58 	.word	0x20004c58

0800619c <__malloc_unlock>:
 800619c:	4801      	ldr	r0, [pc, #4]	; (80061a4 <__malloc_unlock+0x8>)
 800619e:	f7ff befb 	b.w	8005f98 <__retarget_lock_release_recursive>
 80061a2:	bf00      	nop
 80061a4:	20004c58 	.word	0x20004c58

080061a8 <__sflush_r>:
 80061a8:	898a      	ldrh	r2, [r1, #12]
 80061aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ae:	4605      	mov	r5, r0
 80061b0:	0710      	lsls	r0, r2, #28
 80061b2:	460c      	mov	r4, r1
 80061b4:	d458      	bmi.n	8006268 <__sflush_r+0xc0>
 80061b6:	684b      	ldr	r3, [r1, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dc05      	bgt.n	80061c8 <__sflush_r+0x20>
 80061bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	dc02      	bgt.n	80061c8 <__sflush_r+0x20>
 80061c2:	2000      	movs	r0, #0
 80061c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	d0f9      	beq.n	80061c2 <__sflush_r+0x1a>
 80061ce:	2300      	movs	r3, #0
 80061d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061d4:	682f      	ldr	r7, [r5, #0]
 80061d6:	6a21      	ldr	r1, [r4, #32]
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	d032      	beq.n	8006242 <__sflush_r+0x9a>
 80061dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	075a      	lsls	r2, r3, #29
 80061e2:	d505      	bpl.n	80061f0 <__sflush_r+0x48>
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	1ac0      	subs	r0, r0, r3
 80061e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061ea:	b10b      	cbz	r3, 80061f0 <__sflush_r+0x48>
 80061ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061ee:	1ac0      	subs	r0, r0, r3
 80061f0:	2300      	movs	r3, #0
 80061f2:	4602      	mov	r2, r0
 80061f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061f6:	6a21      	ldr	r1, [r4, #32]
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b0      	blx	r6
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	d106      	bne.n	8006210 <__sflush_r+0x68>
 8006202:	6829      	ldr	r1, [r5, #0]
 8006204:	291d      	cmp	r1, #29
 8006206:	d82b      	bhi.n	8006260 <__sflush_r+0xb8>
 8006208:	4a29      	ldr	r2, [pc, #164]	; (80062b0 <__sflush_r+0x108>)
 800620a:	410a      	asrs	r2, r1
 800620c:	07d6      	lsls	r6, r2, #31
 800620e:	d427      	bmi.n	8006260 <__sflush_r+0xb8>
 8006210:	2200      	movs	r2, #0
 8006212:	6062      	str	r2, [r4, #4]
 8006214:	04d9      	lsls	r1, r3, #19
 8006216:	6922      	ldr	r2, [r4, #16]
 8006218:	6022      	str	r2, [r4, #0]
 800621a:	d504      	bpl.n	8006226 <__sflush_r+0x7e>
 800621c:	1c42      	adds	r2, r0, #1
 800621e:	d101      	bne.n	8006224 <__sflush_r+0x7c>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b903      	cbnz	r3, 8006226 <__sflush_r+0x7e>
 8006224:	6560      	str	r0, [r4, #84]	; 0x54
 8006226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006228:	602f      	str	r7, [r5, #0]
 800622a:	2900      	cmp	r1, #0
 800622c:	d0c9      	beq.n	80061c2 <__sflush_r+0x1a>
 800622e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006232:	4299      	cmp	r1, r3
 8006234:	d002      	beq.n	800623c <__sflush_r+0x94>
 8006236:	4628      	mov	r0, r5
 8006238:	f7ff febe 	bl	8005fb8 <_free_r>
 800623c:	2000      	movs	r0, #0
 800623e:	6360      	str	r0, [r4, #52]	; 0x34
 8006240:	e7c0      	b.n	80061c4 <__sflush_r+0x1c>
 8006242:	2301      	movs	r3, #1
 8006244:	4628      	mov	r0, r5
 8006246:	47b0      	blx	r6
 8006248:	1c41      	adds	r1, r0, #1
 800624a:	d1c8      	bne.n	80061de <__sflush_r+0x36>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0c5      	beq.n	80061de <__sflush_r+0x36>
 8006252:	2b1d      	cmp	r3, #29
 8006254:	d001      	beq.n	800625a <__sflush_r+0xb2>
 8006256:	2b16      	cmp	r3, #22
 8006258:	d101      	bne.n	800625e <__sflush_r+0xb6>
 800625a:	602f      	str	r7, [r5, #0]
 800625c:	e7b1      	b.n	80061c2 <__sflush_r+0x1a>
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006264:	81a3      	strh	r3, [r4, #12]
 8006266:	e7ad      	b.n	80061c4 <__sflush_r+0x1c>
 8006268:	690f      	ldr	r7, [r1, #16]
 800626a:	2f00      	cmp	r7, #0
 800626c:	d0a9      	beq.n	80061c2 <__sflush_r+0x1a>
 800626e:	0793      	lsls	r3, r2, #30
 8006270:	680e      	ldr	r6, [r1, #0]
 8006272:	bf08      	it	eq
 8006274:	694b      	ldreq	r3, [r1, #20]
 8006276:	600f      	str	r7, [r1, #0]
 8006278:	bf18      	it	ne
 800627a:	2300      	movne	r3, #0
 800627c:	eba6 0807 	sub.w	r8, r6, r7
 8006280:	608b      	str	r3, [r1, #8]
 8006282:	f1b8 0f00 	cmp.w	r8, #0
 8006286:	dd9c      	ble.n	80061c2 <__sflush_r+0x1a>
 8006288:	6a21      	ldr	r1, [r4, #32]
 800628a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800628c:	4643      	mov	r3, r8
 800628e:	463a      	mov	r2, r7
 8006290:	4628      	mov	r0, r5
 8006292:	47b0      	blx	r6
 8006294:	2800      	cmp	r0, #0
 8006296:	dc06      	bgt.n	80062a6 <__sflush_r+0xfe>
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	e78e      	b.n	80061c4 <__sflush_r+0x1c>
 80062a6:	4407      	add	r7, r0
 80062a8:	eba8 0800 	sub.w	r8, r8, r0
 80062ac:	e7e9      	b.n	8006282 <__sflush_r+0xda>
 80062ae:	bf00      	nop
 80062b0:	dfbffffe 	.word	0xdfbffffe

080062b4 <_fflush_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	690b      	ldr	r3, [r1, #16]
 80062b8:	4605      	mov	r5, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	b913      	cbnz	r3, 80062c4 <_fflush_r+0x10>
 80062be:	2500      	movs	r5, #0
 80062c0:	4628      	mov	r0, r5
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	b118      	cbz	r0, 80062ce <_fflush_r+0x1a>
 80062c6:	6a03      	ldr	r3, [r0, #32]
 80062c8:	b90b      	cbnz	r3, 80062ce <_fflush_r+0x1a>
 80062ca:	f7ff fc2b 	bl	8005b24 <__sinit>
 80062ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f3      	beq.n	80062be <_fflush_r+0xa>
 80062d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062d8:	07d0      	lsls	r0, r2, #31
 80062da:	d404      	bmi.n	80062e6 <_fflush_r+0x32>
 80062dc:	0599      	lsls	r1, r3, #22
 80062de:	d402      	bmi.n	80062e6 <_fflush_r+0x32>
 80062e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062e2:	f7ff fe58 	bl	8005f96 <__retarget_lock_acquire_recursive>
 80062e6:	4628      	mov	r0, r5
 80062e8:	4621      	mov	r1, r4
 80062ea:	f7ff ff5d 	bl	80061a8 <__sflush_r>
 80062ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062f0:	07da      	lsls	r2, r3, #31
 80062f2:	4605      	mov	r5, r0
 80062f4:	d4e4      	bmi.n	80062c0 <_fflush_r+0xc>
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	059b      	lsls	r3, r3, #22
 80062fa:	d4e1      	bmi.n	80062c0 <_fflush_r+0xc>
 80062fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062fe:	f7ff fe4b 	bl	8005f98 <__retarget_lock_release_recursive>
 8006302:	e7dd      	b.n	80062c0 <_fflush_r+0xc>

08006304 <__swhatbuf_r>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	460c      	mov	r4, r1
 8006308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800630c:	2900      	cmp	r1, #0
 800630e:	b096      	sub	sp, #88	; 0x58
 8006310:	4615      	mov	r5, r2
 8006312:	461e      	mov	r6, r3
 8006314:	da0d      	bge.n	8006332 <__swhatbuf_r+0x2e>
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	f013 0f80 	tst.w	r3, #128	; 0x80
 800631c:	f04f 0100 	mov.w	r1, #0
 8006320:	bf0c      	ite	eq
 8006322:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006326:	2340      	movne	r3, #64	; 0x40
 8006328:	2000      	movs	r0, #0
 800632a:	6031      	str	r1, [r6, #0]
 800632c:	602b      	str	r3, [r5, #0]
 800632e:	b016      	add	sp, #88	; 0x58
 8006330:	bd70      	pop	{r4, r5, r6, pc}
 8006332:	466a      	mov	r2, sp
 8006334:	f000 f848 	bl	80063c8 <_fstat_r>
 8006338:	2800      	cmp	r0, #0
 800633a:	dbec      	blt.n	8006316 <__swhatbuf_r+0x12>
 800633c:	9901      	ldr	r1, [sp, #4]
 800633e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006342:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006346:	4259      	negs	r1, r3
 8006348:	4159      	adcs	r1, r3
 800634a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800634e:	e7eb      	b.n	8006328 <__swhatbuf_r+0x24>

08006350 <__smakebuf_r>:
 8006350:	898b      	ldrh	r3, [r1, #12]
 8006352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006354:	079d      	lsls	r5, r3, #30
 8006356:	4606      	mov	r6, r0
 8006358:	460c      	mov	r4, r1
 800635a:	d507      	bpl.n	800636c <__smakebuf_r+0x1c>
 800635c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	6123      	str	r3, [r4, #16]
 8006364:	2301      	movs	r3, #1
 8006366:	6163      	str	r3, [r4, #20]
 8006368:	b002      	add	sp, #8
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	ab01      	add	r3, sp, #4
 800636e:	466a      	mov	r2, sp
 8006370:	f7ff ffc8 	bl	8006304 <__swhatbuf_r>
 8006374:	9900      	ldr	r1, [sp, #0]
 8006376:	4605      	mov	r5, r0
 8006378:	4630      	mov	r0, r6
 800637a:	f7ff fe89 	bl	8006090 <_malloc_r>
 800637e:	b948      	cbnz	r0, 8006394 <__smakebuf_r+0x44>
 8006380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006384:	059a      	lsls	r2, r3, #22
 8006386:	d4ef      	bmi.n	8006368 <__smakebuf_r+0x18>
 8006388:	f023 0303 	bic.w	r3, r3, #3
 800638c:	f043 0302 	orr.w	r3, r3, #2
 8006390:	81a3      	strh	r3, [r4, #12]
 8006392:	e7e3      	b.n	800635c <__smakebuf_r+0xc>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	6020      	str	r0, [r4, #0]
 8006398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	9b00      	ldr	r3, [sp, #0]
 80063a0:	6163      	str	r3, [r4, #20]
 80063a2:	9b01      	ldr	r3, [sp, #4]
 80063a4:	6120      	str	r0, [r4, #16]
 80063a6:	b15b      	cbz	r3, 80063c0 <__smakebuf_r+0x70>
 80063a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 f81d 	bl	80063ec <_isatty_r>
 80063b2:	b128      	cbz	r0, 80063c0 <__smakebuf_r+0x70>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	431d      	orrs	r5, r3
 80063c4:	81a5      	strh	r5, [r4, #12]
 80063c6:	e7cf      	b.n	8006368 <__smakebuf_r+0x18>

080063c8 <_fstat_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4d07      	ldr	r5, [pc, #28]	; (80063e8 <_fstat_r+0x20>)
 80063cc:	2300      	movs	r3, #0
 80063ce:	4604      	mov	r4, r0
 80063d0:	4608      	mov	r0, r1
 80063d2:	4611      	mov	r1, r2
 80063d4:	602b      	str	r3, [r5, #0]
 80063d6:	f7fa fb4a 	bl	8000a6e <_fstat>
 80063da:	1c43      	adds	r3, r0, #1
 80063dc:	d102      	bne.n	80063e4 <_fstat_r+0x1c>
 80063de:	682b      	ldr	r3, [r5, #0]
 80063e0:	b103      	cbz	r3, 80063e4 <_fstat_r+0x1c>
 80063e2:	6023      	str	r3, [r4, #0]
 80063e4:	bd38      	pop	{r3, r4, r5, pc}
 80063e6:	bf00      	nop
 80063e8:	20004c54 	.word	0x20004c54

080063ec <_isatty_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4d06      	ldr	r5, [pc, #24]	; (8006408 <_isatty_r+0x1c>)
 80063f0:	2300      	movs	r3, #0
 80063f2:	4604      	mov	r4, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	f7fa fb49 	bl	8000a8e <_isatty>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_isatty_r+0x1a>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	b103      	cbz	r3, 8006406 <_isatty_r+0x1a>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	20004c54 	.word	0x20004c54

0800640c <_sbrk_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d06      	ldr	r5, [pc, #24]	; (8006428 <_sbrk_r+0x1c>)
 8006410:	2300      	movs	r3, #0
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fa fb52 	bl	8000ac0 <_sbrk>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_sbrk_r+0x1a>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_sbrk_r+0x1a>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	20004c54 	.word	0x20004c54

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
