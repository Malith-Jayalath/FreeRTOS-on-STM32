
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d10  08005d10  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d18  08005d18  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  2000006c  08005d8c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c58  08005d8c  00024c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017eed  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003431  00000000  00000000  00037fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe6  00000000  00000000  0003c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044b1  00000000  00000000  0003d866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001651c  00000000  00000000  00041d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a6b7  00000000  00000000  00058233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ca8  00000000  00000000  000f28ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f8594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c8c 	.word	0x08005c8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005c8c 	.word	0x08005c8c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_write>:
static void MX_USART2_UART_Init(void);
void StartBlink01(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e00a      	b.n	8000504 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	1c4b      	adds	r3, r1, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	2201      	movs	r2, #1
 80004f8:	4807      	ldr	r0, [pc, #28]	; (8000518 <_write+0x3c>)
 80004fa:	f001 fd3b 	bl	8001f74 <HAL_UART_Transmit>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf0      	blt.n	80004ee <_write+0x12>
	}
	return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000088 	.word	0x20000088

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 faf4 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f818 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f89e 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f872 	bl	8000614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f002 f920 	bl	8002774 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <main+0x30>)
 8000536:	2100      	movs	r1, #0
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x34>)
 800053a:	f002 f965 	bl	8002808 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <main+0x38>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f002 f93a 	bl	80027bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x2c>
 800054a:	bf00      	nop
 800054c:	08005cd4 	.word	0x08005cd4
 8000550:	0800071d 	.word	0x0800071d
 8000554:	200000d0 	.word	0x200000d0

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f876 	bl	8005658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xb4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xb4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xb4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <SystemClock_Config+0xb8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <SystemClock_Config+0xb8>)
 80005a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <SystemClock_Config+0xb8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fd85 	bl	80010d8 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d4:	f000 f8c2 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 ffe8 	bl	80015c8 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005fe:	f000 f8ad 	bl	800075c <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_USART2_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800064c:	f001 fc42 	bl	8001ed4 <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f000 f881 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000088 	.word	0x20000088
 8000664:	40004400 	.word	0x40004400

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <MX_GPIO_Init+0xa8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a22      	ldr	r2, [pc, #136]	; (8000710 <MX_GPIO_Init+0xa8>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_GPIO_Init+0xa8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_GPIO_Init+0xa8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <MX_GPIO_Init+0xa8>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_GPIO_Init+0xa8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	4816      	ldr	r0, [pc, #88]	; (8000714 <MX_GPIO_Init+0xac>)
 80006bc:	f000 fcce 	bl	800105c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	4810      	ldr	r0, [pc, #64]	; (8000718 <MX_GPIO_Init+0xb0>)
 80006d8:	f000 fb3c 	bl	8000d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006dc:	2320      	movs	r3, #32
 80006de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <MX_GPIO_Init+0xac>)
 80006f4:	f000 fb2e 	bl	8000d54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2105      	movs	r1, #5
 80006fc:	2028      	movs	r0, #40	; 0x28
 80006fe:	f000 faff 	bl	8000d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000702:	2028      	movs	r0, #40	; 0x28
 8000704:	f000 fb18 	bl	8000d38 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40020000 	.word	0x40020000
 8000718:	40020800 	.word	0x40020800

0800071c <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  printf("Hello World! \r\n");
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <StartBlink01+0x18>)
 8000726:	f004 feb7 	bl	8005498 <puts>
	  osDelay(500); // give this time for other tasks
 800072a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072e:	f002 f8fd 	bl	800292c <osDelay>
	  printf("Hello World! \r\n");
 8000732:	e7f7      	b.n	8000724 <StartBlink01+0x8>
 8000734:	08005cac 	.word	0x08005cac

08000738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800074a:	f000 fa01 	bl	8000b50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40014400 	.word	0x40014400

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_MspInit+0x54>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <HAL_MspInit+0x54>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x54>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_MspInit+0x54>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <HAL_MspInit+0x54>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_MspInit+0x54>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	210f      	movs	r1, #15
 80007aa:	f06f 0001 	mvn.w	r0, #1
 80007ae:	f000 faa7 	bl	8000d00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_UART_MspInit+0x84>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d12b      	bne.n	800083a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_UART_MspInit+0x88>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_UART_MspInit+0x88>)
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_UART_MspInit+0x88>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_UART_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <HAL_UART_MspInit+0x88>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_UART_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800081a:	230c      	movs	r3, #12
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800082a:	2307      	movs	r3, #7
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_UART_MspInit+0x8c>)
 8000836:	f000 fa8d 	bl	8000d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40004400 	.word	0x40004400
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000

08000850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <HAL_InitTick+0xd0>)
 8000866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000868:	4a2d      	ldr	r2, [pc, #180]	; (8000920 <HAL_InitTick+0xd0>)
 800086a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086e:	6453      	str	r3, [r2, #68]	; 0x44
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <HAL_InitTick+0xd0>)
 8000872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800087c:	f107 020c 	add.w	r2, r7, #12
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f001 f87e 	bl	8001988 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800088c:	f001 f868 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 8000890:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000894:	4a23      	ldr	r2, [pc, #140]	; (8000924 <HAL_InitTick+0xd4>)
 8000896:	fba2 2303 	umull	r2, r3, r2, r3
 800089a:	0c9b      	lsrs	r3, r3, #18
 800089c:	3b01      	subs	r3, #1
 800089e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <HAL_InitTick+0xd8>)
 80008a2:	4a22      	ldr	r2, [pc, #136]	; (800092c <HAL_InitTick+0xdc>)
 80008a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <HAL_InitTick+0xd8>)
 80008a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ac:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <HAL_InitTick+0xd8>)
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <HAL_InitTick+0xd8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <HAL_InitTick+0xd8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <HAL_InitTick+0xd8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <HAL_InitTick+0xd8>)
 80008c8:	f001 f890 	bl	80019ec <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d11b      	bne.n	8000912 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80008da:	4813      	ldr	r0, [pc, #76]	; (8000928 <HAL_InitTick+0xd8>)
 80008dc:	f001 f8e0 	bl	8001aa0 <HAL_TIM_Base_Start_IT>
 80008e0:	4603      	mov	r3, r0
 80008e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d111      	bne.n	8000912 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008ee:	2019      	movs	r0, #25
 80008f0:	f000 fa22 	bl	8000d38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d808      	bhi.n	800090c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008fa:	2200      	movs	r2, #0
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	2019      	movs	r0, #25
 8000900:	f000 f9fe 	bl	8000d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_InitTick+0xe0>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	e002      	b.n	8000912 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000916:	4618      	mov	r0, r3
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	431bde83 	.word	0x431bde83
 8000928:	200000d4 	.word	0x200000d4
 800092c:	40014400 	.word	0x40014400
 8000930:	20000004 	.word	0x20000004

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000966:	f001 f8fd 	bl	8001b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000d4 	.word	0x200000d4

08000974 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000978:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800097c:	f000 fb88 	bl	8001090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	e00a      	b.n	80009ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000996:	f3af 8000 	nop.w
 800099a:	4601      	mov	r1, r0
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	60ba      	str	r2, [r7, #8]
 80009a2:	b2ca      	uxtb	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3301      	adds	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	dbf0      	blt.n	8000996 <_read+0x12>
  }

  return len;
 80009b4:	687b      	ldr	r3, [r7, #4]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <_close>:
  }
  return len;
}

int _close(int file)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e6:	605a      	str	r2, [r3, #4]
  return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <_isatty>:

int _isatty(int file)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a30:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <_sbrk+0x5c>)
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <_sbrk+0x60>)
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <_sbrk+0x64>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <_sbrk+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d207      	bcs.n	8000a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a58:	f004 fea2 	bl	80057a0 <__errno>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	220c      	movs	r2, #12
 8000a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	e009      	b.n	8000a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <_sbrk+0x64>)
 8000a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20020000 	.word	0x20020000
 8000a88:	00000400 	.word	0x00000400
 8000a8c:	2000011c 	.word	0x2000011c
 8000a90:	20004c58 	.word	0x20004c58

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000abc:	f7ff ffea 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f004 fe61 	bl	80057ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd17 	bl	800051c <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000afc:	08005d20 	.word	0x08005d20
  ldr r2, =_sbss
 8000b00:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b04:	20004c58 	.word	0x20004c58

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f8d8 	bl	8000cea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f7ff fe88 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fe12 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000120 	.word	0x20000120

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000120 	.word	0x20000120

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ff4c 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d12:	f7ff ff61 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	6978      	ldr	r0, [r7, #20]
 8000d1e:	f7ff ffb1 	bl	8000c84 <NVIC_EncodePriority>
 8000d22:	4602      	mov	r2, r0
 8000d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff80 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff54 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	e159      	b.n	8001024 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	f040 8148 	bne.w	800101e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d005      	beq.n	8000da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d130      	bne.n	8000e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 0201 	and.w	r2, r3, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d017      	beq.n	8000e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d123      	bne.n	8000e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	69b9      	ldr	r1, [r7, #24]
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0203 	and.w	r2, r3, #3
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80a2 	beq.w	800101e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b57      	ldr	r3, [pc, #348]	; (800103c <HAL_GPIO_Init+0x2e8>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a56      	ldr	r2, [pc, #344]	; (800103c <HAL_GPIO_Init+0x2e8>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b54      	ldr	r3, [pc, #336]	; (800103c <HAL_GPIO_Init+0x2e8>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef6:	4a52      	ldr	r2, [pc, #328]	; (8001040 <HAL_GPIO_Init+0x2ec>)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3302      	adds	r3, #2
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a49      	ldr	r2, [pc, #292]	; (8001044 <HAL_GPIO_Init+0x2f0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0x202>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a48      	ldr	r2, [pc, #288]	; (8001048 <HAL_GPIO_Init+0x2f4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0x1fe>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a47      	ldr	r2, [pc, #284]	; (800104c <HAL_GPIO_Init+0x2f8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00d      	beq.n	8000f4e <HAL_GPIO_Init+0x1fa>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a46      	ldr	r2, [pc, #280]	; (8001050 <HAL_GPIO_Init+0x2fc>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x1f6>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a45      	ldr	r2, [pc, #276]	; (8001054 <HAL_GPIO_Init+0x300>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_GPIO_Init+0x1f2>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f46:	2307      	movs	r3, #7
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f56:	2300      	movs	r3, #0
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f68:	4935      	ldr	r1, [pc, #212]	; (8001040 <HAL_GPIO_Init+0x2ec>)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9a:	4a2f      	ldr	r2, [pc, #188]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc4:	4a24      	ldr	r2, [pc, #144]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fee:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001018:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <HAL_GPIO_Init+0x304>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	f67f aea2 	bls.w	8000d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40013c00 	.word	0x40013c00

0800105c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
 8001068:	4613      	mov	r3, r2
 800106a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001078:	e003      	b.n	8001082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	041a      	lsls	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	619a      	str	r2, [r3, #24]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	4013      	ands	r3, r2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f806 	bl	80010c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e267      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d075      	beq.n	80011e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010f6:	4b88      	ldr	r3, [pc, #544]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d00c      	beq.n	800111c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001102:	4b85      	ldr	r3, [pc, #532]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800110a:	2b08      	cmp	r3, #8
 800110c:	d112      	bne.n	8001134 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110e:	4b82      	ldr	r3, [pc, #520]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800111a:	d10b      	bne.n	8001134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	4b7e      	ldr	r3, [pc, #504]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d05b      	beq.n	80011e0 <HAL_RCC_OscConfig+0x108>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d157      	bne.n	80011e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e242      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113c:	d106      	bne.n	800114c <HAL_RCC_OscConfig+0x74>
 800113e:	4b76      	ldr	r3, [pc, #472]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a75      	ldr	r2, [pc, #468]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e01d      	b.n	8001188 <HAL_RCC_OscConfig+0xb0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x98>
 8001156:	4b70      	ldr	r3, [pc, #448]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6f      	ldr	r2, [pc, #444]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 800115c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b6d      	ldr	r3, [pc, #436]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a6c      	ldr	r2, [pc, #432]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e00b      	b.n	8001188 <HAL_RCC_OscConfig+0xb0>
 8001170:	4b69      	ldr	r3, [pc, #420]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a68      	ldr	r2, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b66      	ldr	r3, [pc, #408]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a65      	ldr	r2, [pc, #404]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fcf2 	bl	8000b78 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fcee 	bl	8000b78 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	; 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e207      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0xc0>
 80011b6:	e014      	b.n	80011e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fcde 	bl	8000b78 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fcda 	bl	8000b78 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e1f3      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	4b51      	ldr	r3, [pc, #324]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0xe8>
 80011de:	e000      	b.n	80011e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d063      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ee:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011fa:	4b47      	ldr	r3, [pc, #284]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001202:	2b08      	cmp	r3, #8
 8001204:	d11c      	bne.n	8001240 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001206:	4b44      	ldr	r3, [pc, #272]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d116      	bne.n	8001240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <HAL_RCC_OscConfig+0x152>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d001      	beq.n	800122a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e1c7      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4937      	ldr	r1, [pc, #220]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	e03a      	b.n	80012b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d020      	beq.n	800128a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <HAL_RCC_OscConfig+0x244>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fc93 	bl	8000b78 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff fc8f 	bl	8000b78 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1a8      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4925      	ldr	r1, [pc, #148]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
 8001288:	e015      	b.n	80012b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_RCC_OscConfig+0x244>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fc72 	bl	8000b78 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001298:	f7ff fc6e 	bl	8000b78 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e187      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d036      	beq.n	8001330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d016      	beq.n	80012f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_RCC_OscConfig+0x248>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff fc52 	bl	8000b78 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc4e 	bl	8000b78 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e167      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_OscConfig+0x240>)
 80012ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x200>
 80012f6:	e01b      	b.n	8001330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_RCC_OscConfig+0x248>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fc3b 	bl	8000b78 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001304:	e00e      	b.n	8001324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001306:	f7ff fc37 	bl	8000b78 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d907      	bls.n	8001324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e150      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
 8001318:	40023800 	.word	0x40023800
 800131c:	42470000 	.word	0x42470000
 8001320:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001324:	4b88      	ldr	r3, [pc, #544]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ea      	bne.n	8001306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 8097 	beq.w	800146c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001342:	4b81      	ldr	r3, [pc, #516]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b7d      	ldr	r3, [pc, #500]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a7c      	ldr	r2, [pc, #496]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b7a      	ldr	r3, [pc, #488]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b77      	ldr	r3, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x474>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d118      	bne.n	80013ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137a:	4b74      	ldr	r3, [pc, #464]	; (800154c <HAL_RCC_OscConfig+0x474>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a73      	ldr	r2, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x474>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff fbf7 	bl	8000b78 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138e:	f7ff fbf3 	bl	8000b78 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e10c      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x474>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x2ea>
 80013b4:	4b64      	ldr	r3, [pc, #400]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	4a63      	ldr	r2, [pc, #396]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6713      	str	r3, [r2, #112]	; 0x70
 80013c0:	e01c      	b.n	80013fc <HAL_RCC_OscConfig+0x324>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x30c>
 80013ca:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	4a5e      	ldr	r2, [pc, #376]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6713      	str	r3, [r2, #112]	; 0x70
 80013d6:	4b5c      	ldr	r3, [pc, #368]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013da:	4a5b      	ldr	r2, [pc, #364]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6713      	str	r3, [r2, #112]	; 0x70
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0x324>
 80013e4:	4b58      	ldr	r3, [pc, #352]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	4a57      	ldr	r2, [pc, #348]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	6713      	str	r3, [r2, #112]	; 0x70
 80013f0:	4b55      	ldr	r3, [pc, #340]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f4:	4a54      	ldr	r2, [pc, #336]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f023 0304 	bic.w	r3, r3, #4
 80013fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d015      	beq.n	8001430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fbb8 	bl	8000b78 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140a:	e00a      	b.n	8001422 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140c:	f7ff fbb4 	bl	8000b78 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e0cb      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001422:	4b49      	ldr	r3, [pc, #292]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0ee      	beq.n	800140c <HAL_RCC_OscConfig+0x334>
 800142e:	e014      	b.n	800145a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff fba2 	bl	8000b78 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001436:	e00a      	b.n	800144e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001438:	f7ff fb9e 	bl	8000b78 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0b5      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ee      	bne.n	8001438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d105      	bne.n	800146c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001460:	4b39      	ldr	r3, [pc, #228]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4a38      	ldr	r2, [pc, #224]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a1 	beq.w	80015b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b08      	cmp	r3, #8
 8001480:	d05c      	beq.n	800153c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d141      	bne.n	800150e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148a:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_RCC_OscConfig+0x478>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fb72 	bl	8000b78 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff fb6e 	bl	8000b78 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e087      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69da      	ldr	r2, [r3, #28]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	3b01      	subs	r3, #1
 80014d0:	041b      	lsls	r3, r3, #16
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	491b      	ldr	r1, [pc, #108]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_RCC_OscConfig+0x478>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb47 	bl	8000b78 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff fb43 	bl	8000b78 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e05c      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x416>
 800150c:	e054      	b.n	80015b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_RCC_OscConfig+0x478>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fb30 	bl	8000b78 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff fb2c 	bl	8000b78 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e045      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_RCC_OscConfig+0x470>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x444>
 800153a:	e03d      	b.n	80015b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d107      	bne.n	8001554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e038      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000
 8001550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_RCC_OscConfig+0x4ec>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d028      	beq.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d121      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	429a      	cmp	r2, r3
 800157c:	d11a      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001584:	4013      	ands	r3, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800158a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800158c:	4293      	cmp	r3, r2
 800158e:	d111      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	3b01      	subs	r3, #1
 800159e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0cc      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015dc:	4b68      	ldr	r3, [pc, #416]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d90c      	bls.n	8001604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b65      	ldr	r3, [pc, #404]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0b8      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800161c:	4b59      	ldr	r3, [pc, #356]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a58      	ldr	r2, [pc, #352]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001626:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001634:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800163e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001640:	4b50      	ldr	r3, [pc, #320]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	494d      	ldr	r1, [pc, #308]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d044      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d119      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e07f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d003      	beq.n	8001686 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001682:	2b03      	cmp	r3, #3
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e067      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a6:	4b37      	ldr	r3, [pc, #220]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 0203 	bic.w	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4934      	ldr	r1, [pc, #208]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b8:	f7ff fa5e 	bl	8000b78 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7ff fa5a 	bl	8000b78 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e04f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 020c 	and.w	r2, r3, #12
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1eb      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d20c      	bcs.n	8001710 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e032      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4916      	ldr	r1, [pc, #88]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	490e      	ldr	r1, [pc, #56]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800174e:	f000 f821 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8001752:	4602      	mov	r2, r0
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	490a      	ldr	r1, [pc, #40]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	5ccb      	ldrb	r3, [r1, r3]
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f86e 	bl	8000850 <HAL_InitTick>

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00
 8001784:	40023800 	.word	0x40023800
 8001788:	08005cf8 	.word	0x08005cf8
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001798:	b090      	sub	sp, #64	; 0x40
 800179a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ac:	4b59      	ldr	r3, [pc, #356]	; (8001914 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d00d      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x40>
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	f200 80a1 	bhi.w	8001900 <HAL_RCC_GetSysClockFreq+0x16c>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x34>
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x3a>
 80017c6:	e09b      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_RCC_GetSysClockFreq+0x184>)
 80017ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017cc:	e09b      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ce:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_GetSysClockFreq+0x188>)
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017d2:	e098      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d4:	4b4f      	ldr	r3, [pc, #316]	; (8001914 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017de:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d028      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ea:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	099b      	lsrs	r3, r3, #6
 80017f0:	2200      	movs	r2, #0
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	627a      	str	r2, [r7, #36]	; 0x24
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017fc:	2100      	movs	r1, #0
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_RCC_GetSysClockFreq+0x188>)
 8001800:	fb03 f201 	mul.w	r2, r3, r1
 8001804:	2300      	movs	r3, #0
 8001806:	fb00 f303 	mul.w	r3, r0, r3
 800180a:	4413      	add	r3, r2
 800180c:	4a43      	ldr	r2, [pc, #268]	; (800191c <HAL_RCC_GetSysClockFreq+0x188>)
 800180e:	fba0 1202 	umull	r1, r2, r0, r2
 8001812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001814:	460a      	mov	r2, r1
 8001816:	62ba      	str	r2, [r7, #40]	; 0x28
 8001818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181a:	4413      	add	r3, r2
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800181e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001820:	2200      	movs	r2, #0
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	61fa      	str	r2, [r7, #28]
 8001826:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800182a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800182e:	f7fe fcd7 	bl	80001e0 <__aeabi_uldivmod>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4613      	mov	r3, r2
 8001838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800183a:	e053      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183c:	4b35      	ldr	r3, [pc, #212]	; (8001914 <HAL_RCC_GetSysClockFreq+0x180>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	099b      	lsrs	r3, r3, #6
 8001842:	2200      	movs	r2, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	617a      	str	r2, [r7, #20]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800184e:	f04f 0b00 	mov.w	fp, #0
 8001852:	4652      	mov	r2, sl
 8001854:	465b      	mov	r3, fp
 8001856:	f04f 0000 	mov.w	r0, #0
 800185a:	f04f 0100 	mov.w	r1, #0
 800185e:	0159      	lsls	r1, r3, #5
 8001860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001864:	0150      	lsls	r0, r2, #5
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	ebb2 080a 	subs.w	r8, r2, sl
 800186e:	eb63 090b 	sbc.w	r9, r3, fp
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800187e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001882:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001886:	ebb2 0408 	subs.w	r4, r2, r8
 800188a:	eb63 0509 	sbc.w	r5, r3, r9
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	00eb      	lsls	r3, r5, #3
 8001898:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800189c:	00e2      	lsls	r2, r4, #3
 800189e:	4614      	mov	r4, r2
 80018a0:	461d      	mov	r5, r3
 80018a2:	eb14 030a 	adds.w	r3, r4, sl
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	eb45 030b 	adc.w	r3, r5, fp
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ba:	4629      	mov	r1, r5
 80018bc:	028b      	lsls	r3, r1, #10
 80018be:	4621      	mov	r1, r4
 80018c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c4:	4621      	mov	r1, r4
 80018c6:	028a      	lsls	r2, r1, #10
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ce:	2200      	movs	r2, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	60fa      	str	r2, [r7, #12]
 80018d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018d8:	f7fe fc82 	bl	80001e0 <__aeabi_uldivmod>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4613      	mov	r3, r2
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_GetSysClockFreq+0x180>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	3301      	adds	r3, #1
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80018f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018fe:	e002      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetSysClockFreq+0x184>)
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001908:	4618      	mov	r0, r3
 800190a:	3740      	adds	r7, #64	; 0x40
 800190c:	46bd      	mov	sp, r7
 800190e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	00f42400 	.word	0x00f42400
 800191c:	017d7840 	.word	0x017d7840

08001920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_RCC_GetHCLKFreq+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000000 	.word	0x20000000

08001938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800193c:	f7ff fff0 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0a9b      	lsrs	r3, r3, #10
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <HAL_RCC_GetPCLK1Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	08005d08 	.word	0x08005d08

08001960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001964:	f7ff ffdc 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001968:	4602      	mov	r2, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	0b5b      	lsrs	r3, r3, #13
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4903      	ldr	r1, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	08005d08 	.word	0x08005d08

08001988 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	220f      	movs	r2, #15
 8001996:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_GetClockConfig+0x5c>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_RCC_GetClockConfig+0x5c>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_RCC_GetClockConfig+0x5c>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_GetClockConfig+0x5c>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <HAL_RCC_GetClockConfig+0x60>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0207 	and.w	r2, r3, #7
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	601a      	str	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40023c00 	.word	0x40023c00

080019ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e041      	b.n	8001a82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f839 	bl	8001a8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3304      	adds	r3, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f000 f9b2 	bl	8001d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d001      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e044      	b.n	8001b42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d018      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x6c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae2:	d013      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x6c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_TIM_Base_Start_IT+0xb4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00e      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x6c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_TIM_Base_Start_IT+0xb8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x6c>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_TIM_Base_Start_IT+0xbc>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x6c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d111      	bne.n	8001b30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d010      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2e:	e007      	b.n	8001b40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40000800 	.word	0x40000800
 8001b5c:	40000c00 	.word	0x40000c00
 8001b60:	40014000 	.word	0x40014000

08001b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d020      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d01b      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0202 	mvn.w	r2, #2
 8001b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8d2 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e005      	b.n	8001bc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f8c4 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f8d5 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d020      	beq.n	8001c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01b      	beq.n	8001c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0204 	mvn.w	r2, #4
 8001be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2202      	movs	r2, #2
 8001bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8ac 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001c00:	e005      	b.n	8001c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f89e 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8af 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d020      	beq.n	8001c60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01b      	beq.n	8001c60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0208 	mvn.w	r2, #8
 8001c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2204      	movs	r2, #4
 8001c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f886 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001c4c:	e005      	b.n	8001c5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f878 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f889 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d020      	beq.n	8001cac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01b      	beq.n	8001cac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0210 	mvn.w	r2, #16
 8001c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2208      	movs	r2, #8
 8001c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f860 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f852 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f863 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00c      	beq.n	8001cd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d007      	beq.n	8001cd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0201 	mvn.w	r2, #1
 8001cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fd34 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00c      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8e6 	bl	8001ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00c      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f834 	bl	8001d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00c      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0320 	and.w	r3, r3, #32
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0220 	mvn.w	r2, #32
 8001d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8b8 	bl	8001eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a3a      	ldr	r2, [pc, #232]	; (8001e90 <TIM_Base_SetConfig+0xfc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00f      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db2:	d00b      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a37      	ldr	r2, [pc, #220]	; (8001e94 <TIM_Base_SetConfig+0x100>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a36      	ldr	r2, [pc, #216]	; (8001e98 <TIM_Base_SetConfig+0x104>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a35      	ldr	r2, [pc, #212]	; (8001e9c <TIM_Base_SetConfig+0x108>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d108      	bne.n	8001dde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a2b      	ldr	r2, [pc, #172]	; (8001e90 <TIM_Base_SetConfig+0xfc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01b      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dec:	d017      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a28      	ldr	r2, [pc, #160]	; (8001e94 <TIM_Base_SetConfig+0x100>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a27      	ldr	r2, [pc, #156]	; (8001e98 <TIM_Base_SetConfig+0x104>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00f      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a26      	ldr	r2, [pc, #152]	; (8001e9c <TIM_Base_SetConfig+0x108>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00b      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <TIM_Base_SetConfig+0x10c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <TIM_Base_SetConfig+0x110>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d003      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <TIM_Base_SetConfig+0x114>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d108      	bne.n	8001e30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <TIM_Base_SetConfig+0xfc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d103      	bne.n	8001e64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d105      	bne.n	8001e82 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f023 0201 	bic.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]
  }
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40000c00 	.word	0x40000c00
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40014400 	.word	0x40014400
 8001ea8:	40014800 	.word	0x40014800

08001eac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e042      	b.n	8001f6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fc60 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	; 0x24
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f973 	bl	8002204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d175      	bne.n	8002080 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_UART_Transmit+0x2c>
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e06e      	b.n	8002082 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fde1 	bl	8000b78 <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_UART_Transmit+0x6c>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d104      	bne.n	8001fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e003      	b.n	8001fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fe8:	e02e      	b.n	8002048 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f848 	bl	800208a <UART_WaitOnFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e03a      	b.n	8002082 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10b      	bne.n	800202a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	3302      	adds	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	e007      	b.n	800203a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	3301      	adds	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1cb      	bne.n	8001fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f814 	bl	800208a <UART_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4613      	mov	r3, r2
 8002098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800209a:	e03b      	b.n	8002114 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a2:	d037      	beq.n	8002114 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a4:	f7fe fd68 	bl	8000b78 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	6a3a      	ldr	r2, [r7, #32]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d302      	bcc.n	80020ba <UART_WaitOnFlagUntilTimeout+0x30>
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e03a      	b.n	8002134 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d023      	beq.n	8002114 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b80      	cmp	r3, #128	; 0x80
 80020d0:	d020      	beq.n	8002114 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	d01d      	beq.n	8002114 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d116      	bne.n	8002114 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f81d 	bl	800213c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2208      	movs	r2, #8
 8002106:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e00f      	b.n	8002134 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4013      	ands	r3, r2
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	429a      	cmp	r2, r3
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	429a      	cmp	r2, r3
 8002130:	d0b4      	beq.n	800209c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800213c:	b480      	push	{r7}
 800213e:	b095      	sub	sp, #84	; 0x54
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	330c      	adds	r3, #12
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214e:	e853 3f00 	ldrex	r3, [r3]
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800215a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	330c      	adds	r3, #12
 8002162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002164:	643a      	str	r2, [r7, #64]	; 0x40
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002168:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800216a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800216c:	e841 2300 	strex	r3, r2, [r1]
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e5      	bne.n	8002144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3314      	adds	r3, #20
 800217e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	e853 3f00 	ldrex	r3, [r3]
 8002186:	61fb      	str	r3, [r7, #28]
   return(result);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3314      	adds	r3, #20
 8002196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800219e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a0:	e841 2300 	strex	r3, r2, [r1]
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e5      	bne.n	8002178 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d119      	bne.n	80021e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	330c      	adds	r3, #12
 80021ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	e853 3f00 	ldrex	r3, [r3]
 80021c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f023 0310 	bic.w	r3, r3, #16
 80021ca:	647b      	str	r3, [r7, #68]	; 0x44
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	330c      	adds	r3, #12
 80021d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021d4:	61ba      	str	r2, [r7, #24]
 80021d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	e841 2300 	strex	r3, r2, [r1]
 80021e0:	613b      	str	r3, [r7, #16]
   return(result);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e5      	bne.n	80021b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80021f6:	bf00      	nop
 80021f8:	3754      	adds	r7, #84	; 0x54
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002208:	b0c0      	sub	sp, #256	; 0x100
 800220a:	af00      	add	r7, sp, #0
 800220c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002220:	68d9      	ldr	r1, [r3, #12]
 8002222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	ea40 0301 	orr.w	r3, r0, r1
 800222c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800222e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	431a      	orrs	r2, r3
 800223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	431a      	orrs	r2, r3
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800225c:	f021 010c 	bic.w	r1, r1, #12
 8002260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800226a:	430b      	orrs	r3, r1
 800226c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800226e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800227a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227e:	6999      	ldr	r1, [r3, #24]
 8002280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	ea40 0301 	orr.w	r3, r0, r1
 800228a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800228c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <UART_SetConfig+0x2cc>)
 8002294:	429a      	cmp	r2, r3
 8002296:	d005      	beq.n	80022a4 <UART_SetConfig+0xa0>
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b8d      	ldr	r3, [pc, #564]	; (80024d4 <UART_SetConfig+0x2d0>)
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d104      	bne.n	80022ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022a4:	f7ff fb5c 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 80022a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022ac:	e003      	b.n	80022b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022ae:	f7ff fb43 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 80022b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c0:	f040 810c 	bne.w	80024dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c8:	2200      	movs	r2, #0
 80022ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022d6:	4622      	mov	r2, r4
 80022d8:	462b      	mov	r3, r5
 80022da:	1891      	adds	r1, r2, r2
 80022dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80022de:	415b      	adcs	r3, r3
 80022e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022e6:	4621      	mov	r1, r4
 80022e8:	eb12 0801 	adds.w	r8, r2, r1
 80022ec:	4629      	mov	r1, r5
 80022ee:	eb43 0901 	adc.w	r9, r3, r1
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002306:	4690      	mov	r8, r2
 8002308:	4699      	mov	r9, r3
 800230a:	4623      	mov	r3, r4
 800230c:	eb18 0303 	adds.w	r3, r8, r3
 8002310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002314:	462b      	mov	r3, r5
 8002316:	eb49 0303 	adc.w	r3, r9, r3
 800231a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800231e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800232a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800232e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002332:	460b      	mov	r3, r1
 8002334:	18db      	adds	r3, r3, r3
 8002336:	653b      	str	r3, [r7, #80]	; 0x50
 8002338:	4613      	mov	r3, r2
 800233a:	eb42 0303 	adc.w	r3, r2, r3
 800233e:	657b      	str	r3, [r7, #84]	; 0x54
 8002340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002348:	f7fd ff4a 	bl	80001e0 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4b61      	ldr	r3, [pc, #388]	; (80024d8 <UART_SetConfig+0x2d4>)
 8002352:	fba3 2302 	umull	r2, r3, r3, r2
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	011c      	lsls	r4, r3, #4
 800235a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800235e:	2200      	movs	r2, #0
 8002360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002364:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800236c:	4642      	mov	r2, r8
 800236e:	464b      	mov	r3, r9
 8002370:	1891      	adds	r1, r2, r2
 8002372:	64b9      	str	r1, [r7, #72]	; 0x48
 8002374:	415b      	adcs	r3, r3
 8002376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800237c:	4641      	mov	r1, r8
 800237e:	eb12 0a01 	adds.w	sl, r2, r1
 8002382:	4649      	mov	r1, r9
 8002384:	eb43 0b01 	adc.w	fp, r3, r1
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800239c:	4692      	mov	sl, r2
 800239e:	469b      	mov	fp, r3
 80023a0:	4643      	mov	r3, r8
 80023a2:	eb1a 0303 	adds.w	r3, sl, r3
 80023a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023aa:	464b      	mov	r3, r9
 80023ac:	eb4b 0303 	adc.w	r3, fp, r3
 80023b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023c8:	460b      	mov	r3, r1
 80023ca:	18db      	adds	r3, r3, r3
 80023cc:	643b      	str	r3, [r7, #64]	; 0x40
 80023ce:	4613      	mov	r3, r2
 80023d0:	eb42 0303 	adc.w	r3, r2, r3
 80023d4:	647b      	str	r3, [r7, #68]	; 0x44
 80023d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023de:	f7fd feff 	bl	80001e0 <__aeabi_uldivmod>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <UART_SetConfig+0x2d4>)
 80023ea:	fba3 2301 	umull	r2, r3, r3, r1
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2264      	movs	r2, #100	; 0x64
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	1acb      	subs	r3, r1, r3
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80023fe:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <UART_SetConfig+0x2d4>)
 8002400:	fba3 2302 	umull	r2, r3, r3, r2
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800240c:	441c      	add	r4, r3
 800240e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002412:	2200      	movs	r2, #0
 8002414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002418:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800241c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002420:	4642      	mov	r2, r8
 8002422:	464b      	mov	r3, r9
 8002424:	1891      	adds	r1, r2, r2
 8002426:	63b9      	str	r1, [r7, #56]	; 0x38
 8002428:	415b      	adcs	r3, r3
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800242c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002430:	4641      	mov	r1, r8
 8002432:	1851      	adds	r1, r2, r1
 8002434:	6339      	str	r1, [r7, #48]	; 0x30
 8002436:	4649      	mov	r1, r9
 8002438:	414b      	adcs	r3, r1
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002448:	4659      	mov	r1, fp
 800244a:	00cb      	lsls	r3, r1, #3
 800244c:	4651      	mov	r1, sl
 800244e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002452:	4651      	mov	r1, sl
 8002454:	00ca      	lsls	r2, r1, #3
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	4603      	mov	r3, r0
 800245c:	4642      	mov	r2, r8
 800245e:	189b      	adds	r3, r3, r2
 8002460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002464:	464b      	mov	r3, r9
 8002466:	460a      	mov	r2, r1
 8002468:	eb42 0303 	adc.w	r3, r2, r3
 800246c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800247c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002484:	460b      	mov	r3, r1
 8002486:	18db      	adds	r3, r3, r3
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
 800248a:	4613      	mov	r3, r2
 800248c:	eb42 0303 	adc.w	r3, r2, r3
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800249a:	f7fd fea1 	bl	80001e0 <__aeabi_uldivmod>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <UART_SetConfig+0x2d4>)
 80024a4:	fba3 1302 	umull	r1, r3, r3, r2
 80024a8:	095b      	lsrs	r3, r3, #5
 80024aa:	2164      	movs	r1, #100	; 0x64
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	3332      	adds	r3, #50	; 0x32
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <UART_SetConfig+0x2d4>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	f003 0207 	and.w	r2, r3, #7
 80024c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4422      	add	r2, r4
 80024ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024cc:	e106      	b.n	80026dc <UART_SetConfig+0x4d8>
 80024ce:	bf00      	nop
 80024d0:	40011000 	.word	0x40011000
 80024d4:	40011400 	.word	0x40011400
 80024d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024e0:	2200      	movs	r2, #0
 80024e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024ee:	4642      	mov	r2, r8
 80024f0:	464b      	mov	r3, r9
 80024f2:	1891      	adds	r1, r2, r2
 80024f4:	6239      	str	r1, [r7, #32]
 80024f6:	415b      	adcs	r3, r3
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
 80024fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024fe:	4641      	mov	r1, r8
 8002500:	1854      	adds	r4, r2, r1
 8002502:	4649      	mov	r1, r9
 8002504:	eb43 0501 	adc.w	r5, r3, r1
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	00eb      	lsls	r3, r5, #3
 8002512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002516:	00e2      	lsls	r2, r4, #3
 8002518:	4614      	mov	r4, r2
 800251a:	461d      	mov	r5, r3
 800251c:	4643      	mov	r3, r8
 800251e:	18e3      	adds	r3, r4, r3
 8002520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002524:	464b      	mov	r3, r9
 8002526:	eb45 0303 	adc.w	r3, r5, r3
 800252a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800252e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800253a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800254a:	4629      	mov	r1, r5
 800254c:	008b      	lsls	r3, r1, #2
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002554:	4621      	mov	r1, r4
 8002556:	008a      	lsls	r2, r1, #2
 8002558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800255c:	f7fd fe40 	bl	80001e0 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4b60      	ldr	r3, [pc, #384]	; (80026e8 <UART_SetConfig+0x4e4>)
 8002566:	fba3 2302 	umull	r2, r3, r3, r2
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	011c      	lsls	r4, r3, #4
 800256e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002572:	2200      	movs	r2, #0
 8002574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002578:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800257c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002580:	4642      	mov	r2, r8
 8002582:	464b      	mov	r3, r9
 8002584:	1891      	adds	r1, r2, r2
 8002586:	61b9      	str	r1, [r7, #24]
 8002588:	415b      	adcs	r3, r3
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002590:	4641      	mov	r1, r8
 8002592:	1851      	adds	r1, r2, r1
 8002594:	6139      	str	r1, [r7, #16]
 8002596:	4649      	mov	r1, r9
 8002598:	414b      	adcs	r3, r1
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025a8:	4659      	mov	r1, fp
 80025aa:	00cb      	lsls	r3, r1, #3
 80025ac:	4651      	mov	r1, sl
 80025ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025b2:	4651      	mov	r1, sl
 80025b4:	00ca      	lsls	r2, r1, #3
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	4642      	mov	r2, r8
 80025be:	189b      	adds	r3, r3, r2
 80025c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025c4:	464b      	mov	r3, r9
 80025c6:	460a      	mov	r2, r1
 80025c8:	eb42 0303 	adc.w	r3, r2, r3
 80025cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80025da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025e8:	4649      	mov	r1, r9
 80025ea:	008b      	lsls	r3, r1, #2
 80025ec:	4641      	mov	r1, r8
 80025ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025f2:	4641      	mov	r1, r8
 80025f4:	008a      	lsls	r2, r1, #2
 80025f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80025fa:	f7fd fdf1 	bl	80001e0 <__aeabi_uldivmod>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4611      	mov	r1, r2
 8002604:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <UART_SetConfig+0x4e4>)
 8002606:	fba3 2301 	umull	r2, r3, r3, r1
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2264      	movs	r2, #100	; 0x64
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	1acb      	subs	r3, r1, r3
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	3332      	adds	r3, #50	; 0x32
 8002618:	4a33      	ldr	r2, [pc, #204]	; (80026e8 <UART_SetConfig+0x4e4>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002624:	441c      	add	r4, r3
 8002626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800262a:	2200      	movs	r2, #0
 800262c:	673b      	str	r3, [r7, #112]	; 0x70
 800262e:	677a      	str	r2, [r7, #116]	; 0x74
 8002630:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002634:	4642      	mov	r2, r8
 8002636:	464b      	mov	r3, r9
 8002638:	1891      	adds	r1, r2, r2
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	415b      	adcs	r3, r3
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002644:	4641      	mov	r1, r8
 8002646:	1851      	adds	r1, r2, r1
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	4649      	mov	r1, r9
 800264c:	414b      	adcs	r3, r1
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800265c:	4659      	mov	r1, fp
 800265e:	00cb      	lsls	r3, r1, #3
 8002660:	4651      	mov	r1, sl
 8002662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002666:	4651      	mov	r1, sl
 8002668:	00ca      	lsls	r2, r1, #3
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	4603      	mov	r3, r0
 8002670:	4642      	mov	r2, r8
 8002672:	189b      	adds	r3, r3, r2
 8002674:	66bb      	str	r3, [r7, #104]	; 0x68
 8002676:	464b      	mov	r3, r9
 8002678:	460a      	mov	r2, r1
 800267a:	eb42 0303 	adc.w	r3, r2, r3
 800267e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	663b      	str	r3, [r7, #96]	; 0x60
 800268a:	667a      	str	r2, [r7, #100]	; 0x64
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002698:	4649      	mov	r1, r9
 800269a:	008b      	lsls	r3, r1, #2
 800269c:	4641      	mov	r1, r8
 800269e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a2:	4641      	mov	r1, r8
 80026a4:	008a      	lsls	r2, r1, #2
 80026a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026aa:	f7fd fd99 	bl	80001e0 <__aeabi_uldivmod>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <UART_SetConfig+0x4e4>)
 80026b4:	fba3 1302 	umull	r1, r3, r3, r2
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	2164      	movs	r1, #100	; 0x64
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	3332      	adds	r3, #50	; 0x32
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <UART_SetConfig+0x4e4>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4422      	add	r2, r4
 80026da:	609a      	str	r2, [r3, #8]
}
 80026dc:	bf00      	nop
 80026de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026e2:	46bd      	mov	sp, r7
 80026e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026e8:	51eb851f 	.word	0x51eb851f

080026ec <__NVIC_SetPriority>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <SysTick_Handler+0x1c>)
 8002746:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002748:	f001 fd28 	bl	800419c <xTaskGetSchedulerState>
 800274c:	4603      	mov	r3, r0
 800274e:	2b01      	cmp	r3, #1
 8002750:	d001      	beq.n	8002756 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002752:	f002 fb11 	bl	8004d78 <xPortSysTickHandler>
  }
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	e000e010 	.word	0xe000e010

08002760 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002764:	2100      	movs	r1, #0
 8002766:	f06f 0004 	mvn.w	r0, #4
 800276a:	f7ff ffbf 	bl	80026ec <__NVIC_SetPriority>
#endif
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800277a:	f3ef 8305 	mrs	r3, IPSR
 800277e:	603b      	str	r3, [r7, #0]
  return(result);
 8002780:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002786:	f06f 0305 	mvn.w	r3, #5
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	e00c      	b.n	80027a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <osKernelInitialize+0x44>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <osKernelInitialize+0x44>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800279c:	2300      	movs	r3, #0
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	e002      	b.n	80027a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027a8:	687b      	ldr	r3, [r7, #4]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000124 	.word	0x20000124

080027bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c2:	f3ef 8305 	mrs	r3, IPSR
 80027c6:	603b      	str	r3, [r7, #0]
  return(result);
 80027c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80027ce:	f06f 0305 	mvn.w	r3, #5
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	e010      	b.n	80027f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <osKernelStart+0x48>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d109      	bne.n	80027f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80027de:	f7ff ffbf 	bl	8002760 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <osKernelStart+0x48>)
 80027e4:	2202      	movs	r2, #2
 80027e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80027e8:	f001 f87c 	bl	80038e4 <vTaskStartScheduler>
      stat = osOK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	e002      	b.n	80027f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027f8:	687b      	ldr	r3, [r7, #4]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000124 	.word	0x20000124

08002808 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b08e      	sub	sp, #56	; 0x38
 800280c:	af04      	add	r7, sp, #16
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002818:	f3ef 8305 	mrs	r3, IPSR
 800281c:	617b      	str	r3, [r7, #20]
  return(result);
 800281e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002820:	2b00      	cmp	r3, #0
 8002822:	d17e      	bne.n	8002922 <osThreadNew+0x11a>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d07b      	beq.n	8002922 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800282e:	2318      	movs	r3, #24
 8002830:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
 800283a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d045      	beq.n	80028ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <osThreadNew+0x48>
        name = attr->name;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <osThreadNew+0x6e>
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b38      	cmp	r3, #56	; 0x38
 8002868:	d805      	bhi.n	8002876 <osThreadNew+0x6e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <osThreadNew+0x72>
        return (NULL);
 8002876:	2300      	movs	r3, #0
 8002878:	e054      	b.n	8002924 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00e      	beq.n	80028b0 <osThreadNew+0xa8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2ba7      	cmp	r3, #167	; 0xa7
 8002898:	d90a      	bls.n	80028b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <osThreadNew+0xa8>
        mem = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	e010      	b.n	80028d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <osThreadNew+0xca>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d108      	bne.n	80028d2 <osThreadNew+0xca>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d104      	bne.n	80028d2 <osThreadNew+0xca>
          mem = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e001      	b.n	80028d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d110      	bne.n	80028fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028e0:	9202      	str	r2, [sp, #8]
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6a3a      	ldr	r2, [r7, #32]
 80028ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fe0c 	bl	800350c <xTaskCreateStatic>
 80028f4:	4603      	mov	r3, r0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	e013      	b.n	8002922 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d110      	bne.n	8002922 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	b29a      	uxth	r2, r3
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fe57 	bl	80035c6 <xTaskCreate>
 8002918:	4603      	mov	r3, r0
 800291a:	2b01      	cmp	r3, #1
 800291c:	d001      	beq.n	8002922 <osThreadNew+0x11a>
            hTask = NULL;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002922:	693b      	ldr	r3, [r7, #16]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3728      	adds	r7, #40	; 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002934:	f3ef 8305 	mrs	r3, IPSR
 8002938:	60bb      	str	r3, [r7, #8]
  return(result);
 800293a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <osDelay+0x1c>
    stat = osErrorISR;
 8002940:	f06f 0305 	mvn.w	r3, #5
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	e007      	b.n	8002958 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 ff92 	bl	800387c <vTaskDelay>
    }
  }

  return (stat);
 8002958:	68fb      	ldr	r3, [r7, #12]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a07      	ldr	r2, [pc, #28]	; (8002990 <vApplicationGetIdleTaskMemory+0x2c>)
 8002974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4a06      	ldr	r2, [pc, #24]	; (8002994 <vApplicationGetIdleTaskMemory+0x30>)
 800297a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	601a      	str	r2, [r3, #0]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000128 	.word	0x20000128
 8002994:	200001d0 	.word	0x200001d0

08002998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80029a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <vApplicationGetTimerTaskMemory+0x30>)
 80029ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b6:	601a      	str	r2, [r3, #0]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	200003d0 	.word	0x200003d0
 80029c8:	20000478 	.word	0x20000478

080029cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 0208 	add.w	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f103 0208 	add.w	r2, r3, #8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f103 0208 	add.w	r2, r3, #8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	601a      	str	r2, [r3, #0]
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d103      	bne.n	8002a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e00c      	b.n	8002aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3308      	adds	r3, #8
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e002      	b.n	8002a9c <vListInsert+0x2e>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d2f6      	bcs.n	8002a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6892      	ldr	r2, [r2, #8]
 8002af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6852      	ldr	r2, [r2, #4]
 8002b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d103      	bne.n	8002b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b5a:	bf00      	nop
 8002b5c:	e7fe      	b.n	8002b5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b5e:	f002 f879 	bl	8004c54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	441a      	add	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	68f9      	ldr	r1, [r7, #12]
 8002b92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	441a      	add	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	22ff      	movs	r2, #255	; 0xff
 8002ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d114      	bne.n	8002bde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01a      	beq.n	8002bf2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3310      	adds	r3, #16
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 f929 	bl	8003e18 <xTaskRemoveFromEventList>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d012      	beq.n	8002bf2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <xQueueGenericReset+0xcc>)
 8002bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	e009      	b.n	8002bf2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3310      	adds	r3, #16
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fef2 	bl	80029cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3324      	adds	r3, #36	; 0x24
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff feed 	bl	80029cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bf2:	f002 f85f 	bl	8004cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bf6:	2301      	movs	r3, #1
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	e000ed04 	.word	0xe000ed04

08002c04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08e      	sub	sp, #56	; 0x38
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c46:	bf00      	nop
 8002c48:	e7fe      	b.n	8002c48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <xQueueGenericCreateStatic+0x52>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <xQueueGenericCreateStatic+0x56>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <xQueueGenericCreateStatic+0x58>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	623b      	str	r3, [r7, #32]
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <xQueueGenericCreateStatic+0x7e>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <xQueueGenericCreateStatic+0x82>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <xQueueGenericCreateStatic+0x84>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61fb      	str	r3, [r7, #28]
}
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ca2:	2350      	movs	r3, #80	; 0x50
 8002ca4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b50      	cmp	r3, #80	; 0x50
 8002caa:	d00a      	beq.n	8002cc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	61bb      	str	r3, [r7, #24]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002cc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f805 	bl	8002cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3730      	adds	r7, #48	; 0x30
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d103      	bne.n	8002d10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e002      	b.n	8002d16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d22:	2101      	movs	r1, #1
 8002d24:	69b8      	ldr	r0, [r7, #24]
 8002d26:	f7ff ff05 	bl	8002b34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	; 0x38
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <xQueueGenericSend+0x32>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <xQueueGenericSend+0x40>
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <xQueueGenericSend+0x44>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <xQueueGenericSend+0x46>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <xQueueGenericSend+0x60>
	__asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d98:	bf00      	nop
 8002d9a:	e7fe      	b.n	8002d9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d103      	bne.n	8002daa <xQueueGenericSend+0x6e>
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <xQueueGenericSend+0x72>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <xQueueGenericSend+0x74>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <xQueueGenericSend+0x8e>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	623b      	str	r3, [r7, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dca:	f001 f9e7 	bl	800419c <xTaskGetSchedulerState>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <xQueueGenericSend+0x9e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <xQueueGenericSend+0xa2>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <xQueueGenericSend+0xa4>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xQueueGenericSend+0xbe>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	61fb      	str	r3, [r7, #28]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dfa:	f001 ff2b 	bl	8004c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <xQueueGenericSend+0xd4>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d129      	bne.n	8002e64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e16:	f000 fa0b 	bl	8003230 <prvCopyDataToQueue>
 8002e1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	3324      	adds	r3, #36	; 0x24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fff5 	bl	8003e18 <xTaskRemoveFromEventList>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e34:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <xQueueGenericSend+0x1f8>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	e00a      	b.n	8002e5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e4c:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <xQueueGenericSend+0x1f8>)
 8002e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e5c:	f001 ff2a 	bl	8004cb4 <vPortExitCritical>
				return pdPASS;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e063      	b.n	8002f2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e6a:	f001 ff23 	bl	8004cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e05c      	b.n	8002f2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 f82f 	bl	8003ee0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e86:	f001 ff15 	bl	8004cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e8a:	f000 fd9b 	bl	80039c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e8e:	f001 fee1 	bl	8004c54 <vPortEnterCritical>
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d103      	bne.n	8002ea8 <xQueueGenericSend+0x16c>
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d103      	bne.n	8002ebe <xQueueGenericSend+0x182>
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ebe:	f001 fef9 	bl	8004cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ec2:	1d3a      	adds	r2, r7, #4
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 f81e 	bl	8003f0c <xTaskCheckForTimeOut>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d124      	bne.n	8002f20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed8:	f000 faa2 	bl	8003420 <prvIsQueueFull>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d018      	beq.n	8002f14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 ff44 	bl	8003d78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef2:	f000 fa2d 	bl	8003350 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ef6:	f000 fd73 	bl	80039e0 <xTaskResumeAll>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f47f af7c 	bne.w	8002dfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <xQueueGenericSend+0x1f8>)
 8002f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	e772      	b.n	8002dfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f16:	f000 fa1b 	bl	8003350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f1a:	f000 fd61 	bl	80039e0 <xTaskResumeAll>
 8002f1e:	e76c      	b.n	8002dfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f22:	f000 fa15 	bl	8003350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f26:	f000 fd5b 	bl	80039e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3738      	adds	r7, #56	; 0x38
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b090      	sub	sp, #64	; 0x40
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <xQueueGenericSendFromISR+0x3c>
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <xQueueGenericSendFromISR+0x40>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <xQueueGenericSendFromISR+0x42>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f90:	bf00      	nop
 8002f92:	e7fe      	b.n	8002f92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d103      	bne.n	8002fa2 <xQueueGenericSendFromISR+0x6a>
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <xQueueGenericSendFromISR+0x6e>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <xQueueGenericSendFromISR+0x70>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	623b      	str	r3, [r7, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fc2:	f001 ff29 	bl	8004e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fc6:	f3ef 8211 	mrs	r2, BASEPRI
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	61fa      	str	r2, [r7, #28]
 8002fdc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fde:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <xQueueGenericSendFromISR+0xbc>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d12f      	bne.n	8003054 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800300a:	f000 f911 	bl	8003230 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800300e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d112      	bne.n	800303e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	2b00      	cmp	r3, #0
 800301e:	d016      	beq.n	800304e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	3324      	adds	r3, #36	; 0x24
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fef7 	bl	8003e18 <xTaskRemoveFromEventList>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e007      	b.n	800304e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800303e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003042:	3301      	adds	r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	b25a      	sxtb	r2, r3
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800304e:	2301      	movs	r3, #1
 8003050:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003052:	e001      	b.n	8003058 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003054:	2300      	movs	r3, #0
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003062:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003066:	4618      	mov	r0, r3
 8003068:	3740      	adds	r7, #64	; 0x40
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	; 0x30
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800307c:	2300      	movs	r3, #0
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <xQueueReceive+0x30>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	623b      	str	r3, [r7, #32]
}
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <xQueueReceive+0x3e>
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <xQueueReceive+0x42>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <xQueueReceive+0x44>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <xQueueReceive+0x5e>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	61fb      	str	r3, [r7, #28]
}
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ce:	f001 f865 	bl	800419c <xTaskGetSchedulerState>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <xQueueReceive+0x6e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <xQueueReceive+0x72>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <xQueueReceive+0x74>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xQueueReceive+0x8e>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	61bb      	str	r3, [r7, #24]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030fe:	f001 fda9 	bl	8004c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01f      	beq.n	800314e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003112:	f000 f8f7 	bl	8003304 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	1e5a      	subs	r2, r3, #1
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00f      	beq.n	8003146 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	3310      	adds	r3, #16
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fe74 	bl	8003e18 <xTaskRemoveFromEventList>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003136:	4b3d      	ldr	r3, [pc, #244]	; (800322c <xQueueReceive+0x1bc>)
 8003138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003146:	f001 fdb5 	bl	8004cb4 <vPortExitCritical>
				return pdPASS;
 800314a:	2301      	movs	r3, #1
 800314c:	e069      	b.n	8003222 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d103      	bne.n	800315c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003154:	f001 fdae 	bl	8004cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003158:	2300      	movs	r3, #0
 800315a:	e062      	b.n	8003222 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003162:	f107 0310 	add.w	r3, r7, #16
 8003166:	4618      	mov	r0, r3
 8003168:	f000 feba 	bl	8003ee0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800316c:	2301      	movs	r3, #1
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003170:	f001 fda0 	bl	8004cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003174:	f000 fc26 	bl	80039c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003178:	f001 fd6c 	bl	8004c54 <vPortEnterCritical>
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003182:	b25b      	sxtb	r3, r3
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d103      	bne.n	8003192 <xQueueReceive+0x122>
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003198:	b25b      	sxtb	r3, r3
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d103      	bne.n	80031a8 <xQueueReceive+0x138>
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a8:	f001 fd84 	bl	8004cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031ac:	1d3a      	adds	r2, r7, #4
 80031ae:	f107 0310 	add.w	r3, r7, #16
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fea9 	bl	8003f0c <xTaskCheckForTimeOut>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d123      	bne.n	8003208 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c2:	f000 f917 	bl	80033f4 <prvIsQueueEmpty>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d017      	beq.n	80031fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	3324      	adds	r3, #36	; 0x24
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fdcf 	bl	8003d78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031dc:	f000 f8b8 	bl	8003350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031e0:	f000 fbfe 	bl	80039e0 <xTaskResumeAll>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d189      	bne.n	80030fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <xQueueReceive+0x1bc>)
 80031ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	e780      	b.n	80030fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031fe:	f000 f8a7 	bl	8003350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003202:	f000 fbed 	bl	80039e0 <xTaskResumeAll>
 8003206:	e77a      	b.n	80030fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800320a:	f000 f8a1 	bl	8003350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800320e:	f000 fbe7 	bl	80039e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003214:	f000 f8ee 	bl	80033f4 <prvIsQueueEmpty>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	f43f af6f 	beq.w	80030fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003220:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003222:	4618      	mov	r0, r3
 8003224:	3730      	adds	r7, #48	; 0x30
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10d      	bne.n	800326a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d14d      	bne.n	80032f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 ffbc 	bl	80041d8 <xTaskPriorityDisinherit>
 8003260:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e043      	b.n	80032f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d119      	bne.n	80032a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6858      	ldr	r0, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	461a      	mov	r2, r3
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	f002 fabd 	bl	80057fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	441a      	add	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d32b      	bcc.n	80032f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	e026      	b.n	80032f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68d8      	ldr	r0, [r3, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	461a      	mov	r2, r3
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	f002 faa3 	bl	80057fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	425b      	negs	r3, r3
 80032be:	441a      	add	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d207      	bcs.n	80032e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	425b      	negs	r3, r3
 80032da:	441a      	add	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d105      	bne.n	80032f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032fa:	697b      	ldr	r3, [r7, #20]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d018      	beq.n	8003348 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	429a      	cmp	r2, r3
 800332e:	d303      	bcc.n	8003338 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68d9      	ldr	r1, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	461a      	mov	r2, r3
 8003342:	6838      	ldr	r0, [r7, #0]
 8003344:	f002 fa59 	bl	80057fa <memcpy>
	}
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003358:	f001 fc7c 	bl	8004c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003362:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003364:	e011      	b.n	800338a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d012      	beq.n	8003394 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3324      	adds	r3, #36	; 0x24
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fd50 	bl	8003e18 <xTaskRemoveFromEventList>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800337e:	f000 fe27 	bl	8003fd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	3b01      	subs	r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	2b00      	cmp	r3, #0
 8003390:	dce9      	bgt.n	8003366 <prvUnlockQueue+0x16>
 8003392:	e000      	b.n	8003396 <prvUnlockQueue+0x46>
					break;
 8003394:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800339e:	f001 fc89 	bl	8004cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033a2:	f001 fc57 	bl	8004c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ae:	e011      	b.n	80033d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d012      	beq.n	80033de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3310      	adds	r3, #16
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fd2b 	bl	8003e18 <xTaskRemoveFromEventList>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033c8:	f000 fe02 	bl	8003fd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033cc:	7bbb      	ldrb	r3, [r7, #14]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	dce9      	bgt.n	80033b0 <prvUnlockQueue+0x60>
 80033dc:	e000      	b.n	80033e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	22ff      	movs	r2, #255	; 0xff
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033e8:	f001 fc64 	bl	8004cb4 <vPortExitCritical>
}
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033fc:	f001 fc2a 	bl	8004c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003408:	2301      	movs	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e001      	b.n	8003412 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003412:	f001 fc4f 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003428:	f001 fc14 	bl	8004c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	429a      	cmp	r2, r3
 8003436:	d102      	bne.n	800343e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003438:	2301      	movs	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e001      	b.n	8003442 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003442:	f001 fc37 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e014      	b.n	800348a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003460:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <vQueueAddToRegistry+0x50>)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10b      	bne.n	8003484 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800346c:	490c      	ldr	r1, [pc, #48]	; (80034a0 <vQueueAddToRegistry+0x50>)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <vQueueAddToRegistry+0x50>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003482:	e006      	b.n	8003492 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3301      	adds	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b07      	cmp	r3, #7
 800348e:	d9e7      	bls.n	8003460 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000878 	.word	0x20000878

080034a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034b4:	f001 fbce 	bl	8004c54 <vPortEnterCritical>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d103      	bne.n	80034ce <vQueueWaitForMessageRestricted+0x2a>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d103      	bne.n	80034e4 <vQueueWaitForMessageRestricted+0x40>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e4:	f001 fbe6 	bl	8004cb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d106      	bne.n	80034fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	3324      	adds	r3, #36	; 0x24
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fc61 	bl	8003dc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f7ff ff26 	bl	8003350 <prvUnlockQueue>
	}
 8003504:	bf00      	nop
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08e      	sub	sp, #56	; 0x38
 8003510:	af04      	add	r7, sp, #16
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	623b      	str	r3, [r7, #32]
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <xTaskCreateStatic+0x46>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	61fb      	str	r3, [r7, #28]
}
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003552:	23a8      	movs	r3, #168	; 0xa8
 8003554:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2ba8      	cmp	r3, #168	; 0xa8
 800355a:	d00a      	beq.n	8003572 <xTaskCreateStatic+0x66>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	61bb      	str	r3, [r7, #24]
}
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003572:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01e      	beq.n	80035b8 <xTaskCreateStatic+0xac>
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003588:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2202      	movs	r2, #2
 800358e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003592:	2300      	movs	r3, #0
 8003594:	9303      	str	r3, [sp, #12]
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	9302      	str	r3, [sp, #8]
 800359a:	f107 0314 	add.w	r3, r7, #20
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f850 	bl	8003650 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035b2:	f000 f8f3 	bl	800379c <prvAddNewTaskToReadyList>
 80035b6:	e001      	b.n	80035bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035bc:	697b      	ldr	r3, [r7, #20]
	}
 80035be:	4618      	mov	r0, r3
 80035c0:	3728      	adds	r7, #40	; 0x28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b08c      	sub	sp, #48	; 0x30
 80035ca:	af04      	add	r7, sp, #16
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 fc5c 	bl	8004e98 <pvPortMalloc>
 80035e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035e8:	20a8      	movs	r0, #168	; 0xa8
 80035ea:	f001 fc55 	bl	8004e98 <pvPortMalloc>
 80035ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
 80035fc:	e005      	b.n	800360a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035fe:	6978      	ldr	r0, [r7, #20]
 8003600:	f001 fd16 	bl	8005030 <vPortFree>
 8003604:	e001      	b.n	800360a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d017      	beq.n	8003640 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003618:	88fa      	ldrh	r2, [r7, #6]
 800361a:	2300      	movs	r3, #0
 800361c:	9303      	str	r3, [sp, #12]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	9302      	str	r3, [sp, #8]
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f80e 	bl	8003650 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003634:	69f8      	ldr	r0, [r7, #28]
 8003636:	f000 f8b1 	bl	800379c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800363a:	2301      	movs	r3, #1
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	e002      	b.n	8003646 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003646:	69bb      	ldr	r3, [r7, #24]
	}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	461a      	mov	r2, r3
 8003668:	21a5      	movs	r1, #165	; 0xa5
 800366a:	f001 fff5 	bl	8005658 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003678:	3b01      	subs	r3, #1
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f023 0307 	bic.w	r3, r3, #7
 8003686:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	617b      	str	r3, [r7, #20]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01f      	beq.n	80036ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	e012      	b.n	80036da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	7819      	ldrb	r1, [r3, #0]
 80036bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	3334      	adds	r3, #52	; 0x34
 80036c4:	460a      	mov	r2, r1
 80036c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d006      	beq.n	80036e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	3301      	adds	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b0f      	cmp	r3, #15
 80036de:	d9e9      	bls.n	80036b4 <prvInitialiseNewTask+0x64>
 80036e0:	e000      	b.n	80036e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80036e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036ec:	e003      	b.n	80036f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	2b37      	cmp	r3, #55	; 0x37
 80036fa:	d901      	bls.n	8003700 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036fc:	2337      	movs	r3, #55	; 0x37
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	2200      	movs	r2, #0
 8003710:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	3304      	adds	r3, #4
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f978 	bl	8002a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	3318      	adds	r3, #24
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff f973 	bl	8002a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	2200      	movs	r2, #0
 8003740:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	2200      	movs	r2, #0
 8003748:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	3354      	adds	r3, #84	; 0x54
 8003750:	224c      	movs	r2, #76	; 0x4c
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f001 ff7f 	bl	8005658 <memset>
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <prvInitialiseNewTask+0x140>)
 800375e:	659a      	str	r2, [r3, #88]	; 0x58
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <prvInitialiseNewTask+0x144>)
 8003764:	65da      	str	r2, [r3, #92]	; 0x5c
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <prvInitialiseNewTask+0x148>)
 800376a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	68f9      	ldr	r1, [r7, #12]
 8003770:	69b8      	ldr	r0, [r7, #24]
 8003772:	f001 f941 	bl	80049f8 <pxPortInitialiseStack>
 8003776:	4602      	mov	r2, r0
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003786:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003788:	bf00      	nop
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20004b0c 	.word	0x20004b0c
 8003794:	20004b74 	.word	0x20004b74
 8003798:	20004bdc 	.word	0x20004bdc

0800379c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037a4:	f001 fa56 	bl	8004c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <prvAddNewTaskToReadyList+0xc4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	4a2c      	ldr	r2, [pc, #176]	; (8003860 <prvAddNewTaskToReadyList+0xc4>)
 80037b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037b2:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <prvAddNewTaskToReadyList+0xc8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037ba:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <prvAddNewTaskToReadyList+0xc8>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <prvAddNewTaskToReadyList+0xc4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d110      	bne.n	80037ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037c8:	f000 fc26 	bl	8004018 <prvInitialiseTaskLists>
 80037cc:	e00d      	b.n	80037ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <prvAddNewTaskToReadyList+0xcc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <prvAddNewTaskToReadyList+0xc8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d802      	bhi.n	80037ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037e4:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <prvAddNewTaskToReadyList+0xc8>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <prvAddNewTaskToReadyList+0xd0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3301      	adds	r3, #1
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <prvAddNewTaskToReadyList+0xd0>)
 80037f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <prvAddNewTaskToReadyList+0xd0>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <prvAddNewTaskToReadyList+0xd4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d903      	bls.n	8003810 <prvAddNewTaskToReadyList+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	4a18      	ldr	r2, [pc, #96]	; (8003870 <prvAddNewTaskToReadyList+0xd4>)
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4a15      	ldr	r2, [pc, #84]	; (8003874 <prvAddNewTaskToReadyList+0xd8>)
 800381e:	441a      	add	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f7ff f8fd 	bl	8002a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800382c:	f001 fa42 	bl	8004cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <prvAddNewTaskToReadyList+0xcc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <prvAddNewTaskToReadyList+0xc8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	429a      	cmp	r2, r3
 8003844:	d207      	bcs.n	8003856 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <prvAddNewTaskToReadyList+0xdc>)
 8003848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000d8c 	.word	0x20000d8c
 8003864:	200008b8 	.word	0x200008b8
 8003868:	20000d98 	.word	0x20000d98
 800386c:	20000da8 	.word	0x20000da8
 8003870:	20000d94 	.word	0x20000d94
 8003874:	200008bc 	.word	0x200008bc
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d017      	beq.n	80038be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <vTaskDelay+0x60>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <vTaskDelay+0x30>
	__asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	60bb      	str	r3, [r7, #8]
}
 80038a8:	bf00      	nop
 80038aa:	e7fe      	b.n	80038aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038ac:	f000 f88a 	bl	80039c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038b0:	2100      	movs	r1, #0
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fcfe 	bl	80042b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038b8:	f000 f892 	bl	80039e0 <xTaskResumeAll>
 80038bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d107      	bne.n	80038d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <vTaskDelay+0x64>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000db4 	.word	0x20000db4
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038f2:	463a      	mov	r2, r7
 80038f4:	1d39      	adds	r1, r7, #4
 80038f6:	f107 0308 	add.w	r3, r7, #8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff f832 	bl	8002964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	9202      	str	r2, [sp, #8]
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	2300      	movs	r3, #0
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	2300      	movs	r3, #0
 8003910:	460a      	mov	r2, r1
 8003912:	4924      	ldr	r1, [pc, #144]	; (80039a4 <vTaskStartScheduler+0xc0>)
 8003914:	4824      	ldr	r0, [pc, #144]	; (80039a8 <vTaskStartScheduler+0xc4>)
 8003916:	f7ff fdf9 	bl	800350c <xTaskCreateStatic>
 800391a:	4603      	mov	r3, r0
 800391c:	4a23      	ldr	r2, [pc, #140]	; (80039ac <vTaskStartScheduler+0xc8>)
 800391e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <vTaskStartScheduler+0xc8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e001      	b.n	8003932 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d102      	bne.n	800393e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003938:	f000 fd10 	bl	800435c <xTimerCreateTimerTask>
 800393c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d11b      	bne.n	800397c <vTaskStartScheduler+0x98>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	613b      	str	r3, [r7, #16]
}
 8003956:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <vTaskStartScheduler+0xcc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3354      	adds	r3, #84	; 0x54
 800395e:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <vTaskStartScheduler+0xd0>)
 8003960:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <vTaskStartScheduler+0xd4>)
 8003964:	f04f 32ff 	mov.w	r2, #4294967295
 8003968:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <vTaskStartScheduler+0xd8>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <vTaskStartScheduler+0xdc>)
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003976:	f001 f8cb 	bl	8004b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800397a:	e00e      	b.n	800399a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d10a      	bne.n	800399a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	60fb      	str	r3, [r7, #12]
}
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <vTaskStartScheduler+0xb4>
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	08005cbc 	.word	0x08005cbc
 80039a8:	08003fe9 	.word	0x08003fe9
 80039ac:	20000db0 	.word	0x20000db0
 80039b0:	200008b8 	.word	0x200008b8
 80039b4:	20000068 	.word	0x20000068
 80039b8:	20000dac 	.word	0x20000dac
 80039bc:	20000d98 	.word	0x20000d98
 80039c0:	20000d90 	.word	0x20000d90

080039c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <vTaskSuspendAll+0x18>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3301      	adds	r3, #1
 80039ce:	4a03      	ldr	r2, [pc, #12]	; (80039dc <vTaskSuspendAll+0x18>)
 80039d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	20000db4 	.word	0x20000db4

080039e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039ee:	4b42      	ldr	r3, [pc, #264]	; (8003af8 <xTaskResumeAll+0x118>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xTaskResumeAll+0x2c>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	603b      	str	r3, [r7, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a0c:	f001 f922 	bl	8004c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a10:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <xTaskResumeAll+0x118>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	4a38      	ldr	r2, [pc, #224]	; (8003af8 <xTaskResumeAll+0x118>)
 8003a18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a1a:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <xTaskResumeAll+0x118>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d162      	bne.n	8003ae8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <xTaskResumeAll+0x11c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d05e      	beq.n	8003ae8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a2a:	e02f      	b.n	8003a8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <xTaskResumeAll+0x120>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3318      	adds	r3, #24
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f851 	bl	8002ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f84c 	bl	8002ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	4b2d      	ldr	r3, [pc, #180]	; (8003b04 <xTaskResumeAll+0x124>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d903      	bls.n	8003a5c <xTaskResumeAll+0x7c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4a2a      	ldr	r2, [pc, #168]	; (8003b04 <xTaskResumeAll+0x124>)
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <xTaskResumeAll+0x128>)
 8003a6a:	441a      	add	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f7fe ffd7 	bl	8002a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <xTaskResumeAll+0x12c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a86:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <xTaskResumeAll+0x130>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a8c:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <xTaskResumeAll+0x120>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1cb      	bne.n	8003a2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a9a:	f000 fb5f 	bl	800415c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <xTaskResumeAll+0x134>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d010      	beq.n	8003acc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003aaa:	f000 f847 	bl	8003b3c <xTaskIncrementTick>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <xTaskResumeAll+0x130>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f1      	bne.n	8003aaa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <xTaskResumeAll+0x134>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <xTaskResumeAll+0x130>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <xTaskResumeAll+0x138>)
 8003ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ae8:	f001 f8e4 	bl	8004cb4 <vPortExitCritical>

	return xAlreadyYielded;
 8003aec:	68bb      	ldr	r3, [r7, #8]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000db4 	.word	0x20000db4
 8003afc:	20000d8c 	.word	0x20000d8c
 8003b00:	20000d4c 	.word	0x20000d4c
 8003b04:	20000d94 	.word	0x20000d94
 8003b08:	200008bc 	.word	0x200008bc
 8003b0c:	200008b8 	.word	0x200008b8
 8003b10:	20000da0 	.word	0x20000da0
 8003b14:	20000d9c 	.word	0x20000d9c
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <xTaskGetTickCount+0x1c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b28:	687b      	ldr	r3, [r7, #4]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000d90 	.word	0x20000d90

08003b3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b46:	4b4f      	ldr	r3, [pc, #316]	; (8003c84 <xTaskIncrementTick+0x148>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 808f 	bne.w	8003c6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b50:	4b4d      	ldr	r3, [pc, #308]	; (8003c88 <xTaskIncrementTick+0x14c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b58:	4a4b      	ldr	r2, [pc, #300]	; (8003c88 <xTaskIncrementTick+0x14c>)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d120      	bne.n	8003ba6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b64:	4b49      	ldr	r3, [pc, #292]	; (8003c8c <xTaskIncrementTick+0x150>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	603b      	str	r3, [r7, #0]
}
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <xTaskIncrementTick+0x46>
 8003b84:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <xTaskIncrementTick+0x150>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <xTaskIncrementTick+0x154>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a3f      	ldr	r2, [pc, #252]	; (8003c8c <xTaskIncrementTick+0x150>)
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4a3f      	ldr	r2, [pc, #252]	; (8003c90 <xTaskIncrementTick+0x154>)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b3e      	ldr	r3, [pc, #248]	; (8003c94 <xTaskIncrementTick+0x158>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	4a3d      	ldr	r2, [pc, #244]	; (8003c94 <xTaskIncrementTick+0x158>)
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	f000 fadb 	bl	800415c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ba6:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <xTaskIncrementTick+0x15c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d349      	bcc.n	8003c44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bb0:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <xTaskIncrementTick+0x150>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d104      	bne.n	8003bc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bba:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <xTaskIncrementTick+0x15c>)
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc0:	601a      	str	r2, [r3, #0]
					break;
 8003bc2:	e03f      	b.n	8003c44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bc4:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <xTaskIncrementTick+0x150>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d203      	bcs.n	8003be4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bdc:	4a2e      	ldr	r2, [pc, #184]	; (8003c98 <xTaskIncrementTick+0x15c>)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003be2:	e02f      	b.n	8003c44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe ff79 	bl	8002ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	3318      	adds	r3, #24
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe ff70 	bl	8002ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c04:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <xTaskIncrementTick+0x160>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d903      	bls.n	8003c14 <xTaskIncrementTick+0xd8>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <xTaskIncrementTick+0x160>)
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <xTaskIncrementTick+0x164>)
 8003c22:	441a      	add	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f7fe fefb 	bl	8002a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c34:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <xTaskIncrementTick+0x168>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3b8      	bcc.n	8003bb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c42:	e7b5      	b.n	8003bb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c44:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <xTaskIncrementTick+0x168>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4a:	4915      	ldr	r1, [pc, #84]	; (8003ca0 <xTaskIncrementTick+0x164>)
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d901      	bls.n	8003c60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <xTaskIncrementTick+0x16c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	e004      	b.n	8003c78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <xTaskIncrementTick+0x170>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <xTaskIncrementTick+0x170>)
 8003c76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c78:	697b      	ldr	r3, [r7, #20]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000db4 	.word	0x20000db4
 8003c88:	20000d90 	.word	0x20000d90
 8003c8c:	20000d44 	.word	0x20000d44
 8003c90:	20000d48 	.word	0x20000d48
 8003c94:	20000da4 	.word	0x20000da4
 8003c98:	20000dac 	.word	0x20000dac
 8003c9c:	20000d94 	.word	0x20000d94
 8003ca0:	200008bc 	.word	0x200008bc
 8003ca4:	200008b8 	.word	0x200008b8
 8003ca8:	20000da0 	.word	0x20000da0
 8003cac:	20000d9c 	.word	0x20000d9c

08003cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <vTaskSwitchContext+0xb0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cbe:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <vTaskSwitchContext+0xb4>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cc4:	e046      	b.n	8003d54 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003cc6:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <vTaskSwitchContext+0xb4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ccc:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <vTaskSwitchContext+0xb8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e010      	b.n	8003cf6 <vTaskSwitchContext+0x46>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	607b      	str	r3, [r7, #4]
}
 8003cec:	bf00      	nop
 8003cee:	e7fe      	b.n	8003cee <vTaskSwitchContext+0x3e>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	491d      	ldr	r1, [pc, #116]	; (8003d6c <vTaskSwitchContext+0xbc>)
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0e4      	beq.n	8003cd4 <vTaskSwitchContext+0x24>
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <vTaskSwitchContext+0xbc>)
 8003d16:	4413      	add	r3, r2
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d104      	bne.n	8003d3a <vTaskSwitchContext+0x8a>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <vTaskSwitchContext+0xc0>)
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <vTaskSwitchContext+0xb8>)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <vTaskSwitchContext+0xc0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3354      	adds	r3, #84	; 0x54
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <vTaskSwitchContext+0xc4>)
 8003d52:	6013      	str	r3, [r2, #0]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	20000db4 	.word	0x20000db4
 8003d64:	20000da0 	.word	0x20000da0
 8003d68:	20000d94 	.word	0x20000d94
 8003d6c:	200008bc 	.word	0x200008bc
 8003d70:	200008b8 	.word	0x200008b8
 8003d74:	20000068 	.word	0x20000068

08003d78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	60fb      	str	r3, [r7, #12]
}
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <vTaskPlaceOnEventList+0x44>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3318      	adds	r3, #24
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fe fe61 	bl	8002a6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dac:	2101      	movs	r1, #1
 8003dae:	6838      	ldr	r0, [r7, #0]
 8003db0:	f000 fa80 	bl	80042b4 <prvAddCurrentTaskToDelayedList>
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	200008b8 	.word	0x200008b8

08003dc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	617b      	str	r3, [r7, #20]
}
 8003de4:	bf00      	nop
 8003de6:	e7fe      	b.n	8003de6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <vTaskPlaceOnEventListRestricted+0x54>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3318      	adds	r3, #24
 8003dee:	4619      	mov	r1, r3
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f7fe fe18 	bl	8002a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003e00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	68b8      	ldr	r0, [r7, #8]
 8003e06:	f000 fa55 	bl	80042b4 <prvAddCurrentTaskToDelayedList>
	}
 8003e0a:	bf00      	nop
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200008b8 	.word	0x200008b8

08003e18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	60fb      	str	r3, [r7, #12]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	3318      	adds	r3, #24
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe fe49 	bl	8002ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <xTaskRemoveFromEventList+0xb0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d11d      	bne.n	8003e92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fe40 	bl	8002ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <xTaskRemoveFromEventList+0xb4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d903      	bls.n	8003e74 <xTaskRemoveFromEventList+0x5c>
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <xTaskRemoveFromEventList+0xb4>)
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <xTaskRemoveFromEventList+0xb8>)
 8003e82:	441a      	add	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7fe fdcb 	bl	8002a26 <vListInsertEnd>
 8003e90:	e005      	b.n	8003e9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	3318      	adds	r3, #24
 8003e96:	4619      	mov	r1, r3
 8003e98:	480e      	ldr	r0, [pc, #56]	; (8003ed4 <xTaskRemoveFromEventList+0xbc>)
 8003e9a:	f7fe fdc4 	bl	8002a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <xTaskRemoveFromEventList+0xc0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d905      	bls.n	8003eb8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <xTaskRemoveFromEventList+0xc4>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e001      	b.n	8003ebc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ebc:	697b      	ldr	r3, [r7, #20]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000db4 	.word	0x20000db4
 8003ecc:	20000d94 	.word	0x20000d94
 8003ed0:	200008bc 	.word	0x200008bc
 8003ed4:	20000d4c 	.word	0x20000d4c
 8003ed8:	200008b8 	.word	0x200008b8
 8003edc:	20000da0 	.word	0x20000da0

08003ee0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <vTaskInternalSetTimeOutState+0x24>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <vTaskInternalSetTimeOutState+0x28>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	605a      	str	r2, [r3, #4]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	20000da4 	.word	0x20000da4
 8003f08:	20000d90 	.word	0x20000d90

08003f0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	613b      	str	r3, [r7, #16]
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	60fb      	str	r3, [r7, #12]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f4e:	f000 fe81 	bl	8004c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <xTaskCheckForTimeOut+0xbc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d102      	bne.n	8003f72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	e023      	b.n	8003fba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <xTaskCheckForTimeOut+0xc0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d007      	beq.n	8003f8e <xTaskCheckForTimeOut+0x82>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d302      	bcc.n	8003f8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	e015      	b.n	8003fba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d20b      	bcs.n	8003fb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	1ad2      	subs	r2, r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff9b 	bl	8003ee0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	e004      	b.n	8003fba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fba:	f000 fe7b 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000d90 	.word	0x20000d90
 8003fcc:	20000da4 	.word	0x20000da4

08003fd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <vTaskMissedYield+0x14>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	20000da0 	.word	0x20000da0

08003fe8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ff0:	f000 f852 	bl	8004098 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <prvIdleTask+0x28>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d9f9      	bls.n	8003ff0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <prvIdleTask+0x2c>)
 8003ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800400c:	e7f0      	b.n	8003ff0 <prvIdleTask+0x8>
 800400e:	bf00      	nop
 8004010:	200008bc 	.word	0x200008bc
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	e00c      	b.n	800403e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <prvInitialiseTaskLists+0x60>)
 8004030:	4413      	add	r3, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fcca 	bl	80029cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3301      	adds	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b37      	cmp	r3, #55	; 0x37
 8004042:	d9ef      	bls.n	8004024 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004044:	480d      	ldr	r0, [pc, #52]	; (800407c <prvInitialiseTaskLists+0x64>)
 8004046:	f7fe fcc1 	bl	80029cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800404a:	480d      	ldr	r0, [pc, #52]	; (8004080 <prvInitialiseTaskLists+0x68>)
 800404c:	f7fe fcbe 	bl	80029cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004050:	480c      	ldr	r0, [pc, #48]	; (8004084 <prvInitialiseTaskLists+0x6c>)
 8004052:	f7fe fcbb 	bl	80029cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004056:	480c      	ldr	r0, [pc, #48]	; (8004088 <prvInitialiseTaskLists+0x70>)
 8004058:	f7fe fcb8 	bl	80029cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800405c:	480b      	ldr	r0, [pc, #44]	; (800408c <prvInitialiseTaskLists+0x74>)
 800405e:	f7fe fcb5 	bl	80029cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <prvInitialiseTaskLists+0x78>)
 8004064:	4a05      	ldr	r2, [pc, #20]	; (800407c <prvInitialiseTaskLists+0x64>)
 8004066:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <prvInitialiseTaskLists+0x7c>)
 800406a:	4a05      	ldr	r2, [pc, #20]	; (8004080 <prvInitialiseTaskLists+0x68>)
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200008bc 	.word	0x200008bc
 800407c:	20000d1c 	.word	0x20000d1c
 8004080:	20000d30 	.word	0x20000d30
 8004084:	20000d4c 	.word	0x20000d4c
 8004088:	20000d60 	.word	0x20000d60
 800408c:	20000d78 	.word	0x20000d78
 8004090:	20000d44 	.word	0x20000d44
 8004094:	20000d48 	.word	0x20000d48

08004098 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800409e:	e019      	b.n	80040d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040a0:	f000 fdd8 	bl	8004c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <prvCheckTasksWaitingTermination+0x50>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fd15 	bl	8002ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040b6:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <prvCheckTasksWaitingTermination+0x54>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <prvCheckTasksWaitingTermination+0x54>)
 80040be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <prvCheckTasksWaitingTermination+0x58>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	4a0a      	ldr	r2, [pc, #40]	; (80040f0 <prvCheckTasksWaitingTermination+0x58>)
 80040c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ca:	f000 fdf3 	bl	8004cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f810 	bl	80040f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <prvCheckTasksWaitingTermination+0x58>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e1      	bne.n	80040a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000d60 	.word	0x20000d60
 80040ec:	20000d8c 	.word	0x20000d8c
 80040f0:	20000d74 	.word	0x20000d74

080040f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3354      	adds	r3, #84	; 0x54
 8004100:	4618      	mov	r0, r3
 8004102:	f001 fac1 	bl	8005688 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800410c:	2b00      	cmp	r3, #0
 800410e:	d108      	bne.n	8004122 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	4618      	mov	r0, r3
 8004116:	f000 ff8b 	bl	8005030 <vPortFree>
				vPortFree( pxTCB );
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 ff88 	bl	8005030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004120:	e018      	b.n	8004154 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004128:	2b01      	cmp	r3, #1
 800412a:	d103      	bne.n	8004134 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 ff7f 	bl	8005030 <vPortFree>
	}
 8004132:	e00f      	b.n	8004154 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800413a:	2b02      	cmp	r3, #2
 800413c:	d00a      	beq.n	8004154 <prvDeleteTCB+0x60>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	60fb      	str	r3, [r7, #12]
}
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <prvDeleteTCB+0x5e>
	}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <prvResetNextTaskUnblockTime+0x38>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <prvResetNextTaskUnblockTime+0x3c>)
 800416e:	f04f 32ff 	mov.w	r2, #4294967295
 8004172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004174:	e008      	b.n	8004188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <prvResetNextTaskUnblockTime+0x38>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4a04      	ldr	r2, [pc, #16]	; (8004198 <prvResetNextTaskUnblockTime+0x3c>)
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	20000d44 	.word	0x20000d44
 8004198:	20000dac 	.word	0x20000dac

0800419c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041a2:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <xTaskGetSchedulerState+0x34>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041aa:	2301      	movs	r3, #1
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	e008      	b.n	80041c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <xTaskGetSchedulerState+0x38>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041b8:	2302      	movs	r3, #2
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	e001      	b.n	80041c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041c2:	687b      	ldr	r3, [r7, #4]
	}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20000d98 	.word	0x20000d98
 80041d4:	20000db4 	.word	0x20000db4

080041d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d056      	beq.n	800429c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <xTaskPriorityDisinherit+0xd0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d00a      	beq.n	800420e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	60fb      	str	r3, [r7, #12]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	60bb      	str	r3, [r7, #8]
}
 8004228:	bf00      	nop
 800422a:	e7fe      	b.n	800422a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004230:	1e5a      	subs	r2, r3, #1
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	429a      	cmp	r2, r3
 8004240:	d02c      	beq.n	800429c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004246:	2b00      	cmp	r3, #0
 8004248:	d128      	bne.n	800429c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fc46 	bl	8002ae0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <xTaskPriorityDisinherit+0xd4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d903      	bls.n	800427c <xTaskPriorityDisinherit+0xa4>
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	4a0c      	ldr	r2, [pc, #48]	; (80042ac <xTaskPriorityDisinherit+0xd4>)
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <xTaskPriorityDisinherit+0xd8>)
 800428a:	441a      	add	r2, r3
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f7fe fbc7 	bl	8002a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800429c:	697b      	ldr	r3, [r7, #20]
	}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	200008b8 	.word	0x200008b8
 80042ac:	20000d94 	.word	0x20000d94
 80042b0:	200008bc 	.word	0x200008bc

080042b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042be:	4b21      	ldr	r3, [pc, #132]	; (8004344 <prvAddCurrentTaskToDelayedList+0x90>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042c4:	4b20      	ldr	r3, [pc, #128]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fc08 	bl	8002ae0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d10a      	bne.n	80042ee <prvAddCurrentTaskToDelayedList+0x3a>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042de:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4819      	ldr	r0, [pc, #100]	; (800434c <prvAddCurrentTaskToDelayedList+0x98>)
 80042e8:	f7fe fb9d 	bl	8002a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042ec:	e026      	b.n	800433c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4413      	add	r3, r2
 80042f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	429a      	cmp	r2, r3
 8004304:	d209      	bcs.n	800431a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f7fe fbab 	bl	8002a6e <vListInsert>
}
 8004318:	e010      	b.n	800433c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <prvAddCurrentTaskToDelayedList+0xa0>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7fe fba1 	bl	8002a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	d202      	bcs.n	800433c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6013      	str	r3, [r2, #0]
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000d90 	.word	0x20000d90
 8004348:	200008b8 	.word	0x200008b8
 800434c:	20000d78 	.word	0x20000d78
 8004350:	20000d48 	.word	0x20000d48
 8004354:	20000d44 	.word	0x20000d44
 8004358:	20000dac 	.word	0x20000dac

0800435c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004366:	f000 fb07 	bl	8004978 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <xTimerCreateTimerTask+0x80>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d021      	beq.n	80043b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800437a:	1d3a      	adds	r2, r7, #4
 800437c:	f107 0108 	add.w	r1, r7, #8
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fb07 	bl	8002998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	9202      	str	r2, [sp, #8]
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	2302      	movs	r3, #2
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2300      	movs	r3, #0
 800439a:	460a      	mov	r2, r1
 800439c:	4910      	ldr	r1, [pc, #64]	; (80043e0 <xTimerCreateTimerTask+0x84>)
 800439e:	4811      	ldr	r0, [pc, #68]	; (80043e4 <xTimerCreateTimerTask+0x88>)
 80043a0:	f7ff f8b4 	bl	800350c <xTaskCreateStatic>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4a10      	ldr	r2, [pc, #64]	; (80043e8 <xTimerCreateTimerTask+0x8c>)
 80043a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <xTimerCreateTimerTask+0x8c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043b2:	2301      	movs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	613b      	str	r3, [r7, #16]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043d2:	697b      	ldr	r3, [r7, #20]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000de8 	.word	0x20000de8
 80043e0:	08005cc4 	.word	0x08005cc4
 80043e4:	08004521 	.word	0x08004521
 80043e8:	20000dec 	.word	0x20000dec

080043ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	; 0x28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	623b      	str	r3, [r7, #32]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800441a:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <xTimerGenericCommand+0x98>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d02a      	beq.n	8004478 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b05      	cmp	r3, #5
 8004432:	dc18      	bgt.n	8004466 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004434:	f7ff feb2 	bl	800419c <xTaskGetSchedulerState>
 8004438:	4603      	mov	r3, r0
 800443a:	2b02      	cmp	r3, #2
 800443c:	d109      	bne.n	8004452 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800443e:	4b11      	ldr	r3, [pc, #68]	; (8004484 <xTimerGenericCommand+0x98>)
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	f107 0110 	add.w	r1, r7, #16
 8004446:	2300      	movs	r3, #0
 8004448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444a:	f7fe fc77 	bl	8002d3c <xQueueGenericSend>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24
 8004450:	e012      	b.n	8004478 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <xTimerGenericCommand+0x98>)
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	f107 0110 	add.w	r1, r7, #16
 800445a:	2300      	movs	r3, #0
 800445c:	2200      	movs	r2, #0
 800445e:	f7fe fc6d 	bl	8002d3c <xQueueGenericSend>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24
 8004464:	e008      	b.n	8004478 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <xTimerGenericCommand+0x98>)
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	f107 0110 	add.w	r1, r7, #16
 800446e:	2300      	movs	r3, #0
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	f7fe fd61 	bl	8002f38 <xQueueGenericSendFromISR>
 8004476:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800447a:	4618      	mov	r0, r3
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000de8 	.word	0x20000de8

08004488 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af02      	add	r7, sp, #8
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <prvProcessExpiredTimer+0x94>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	3304      	adds	r3, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe fb1d 	bl	8002ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d022      	beq.n	80044fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	18d1      	adds	r1, r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	f000 f8d1 	bl	8004668 <prvInsertTimerInActiveList>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01f      	beq.n	800450c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2300      	movs	r3, #0
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	2100      	movs	r1, #0
 80044d6:	6978      	ldr	r0, [r7, #20]
 80044d8:	f7ff ff88 	bl	80043ec <xTimerGenericCommand>
 80044dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d113      	bne.n	800450c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fb      	str	r3, [r7, #12]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	b2da      	uxtb	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	6978      	ldr	r0, [r7, #20]
 8004512:	4798      	blx	r3
}
 8004514:	bf00      	nop
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000de0 	.word	0x20000de0

08004520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f857 	bl	80045e0 <prvGetNextExpireTime>
 8004532:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4619      	mov	r1, r3
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f803 	bl	8004544 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800453e:	f000 f8d5 	bl	80046ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004542:	e7f1      	b.n	8004528 <prvTimerTask+0x8>

08004544 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800454e:	f7ff fa39 	bl	80039c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f866 	bl	8004628 <prvSampleTimeNow>
 800455c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d130      	bne.n	80045c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <prvProcessTimerOrBlockTask+0x3c>
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	429a      	cmp	r2, r3
 8004570:	d806      	bhi.n	8004580 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004572:	f7ff fa35 	bl	80039e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ff85 	bl	8004488 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800457e:	e024      	b.n	80045ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004586:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <prvProcessTimerOrBlockTask+0x90>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <prvProcessTimerOrBlockTask+0x50>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <prvProcessTimerOrBlockTask+0x52>
 8004594:	2300      	movs	r3, #0
 8004596:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <prvProcessTimerOrBlockTask+0x94>)
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	4619      	mov	r1, r3
 80045a6:	f7fe ff7d 	bl	80034a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045aa:	f7ff fa19 	bl	80039e0 <xTaskResumeAll>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <prvProcessTimerOrBlockTask+0x98>)
 80045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	f3bf 8f6f 	isb	sy
}
 80045c4:	e001      	b.n	80045ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045c6:	f7ff fa0b 	bl	80039e0 <xTaskResumeAll>
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000de4 	.word	0x20000de4
 80045d8:	20000de8 	.word	0x20000de8
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <prvGetNextExpireTime+0x44>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <prvGetNextExpireTime+0x16>
 80045f2:	2201      	movs	r2, #1
 80045f4:	e000      	b.n	80045f8 <prvGetNextExpireTime+0x18>
 80045f6:	2200      	movs	r2, #0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004604:	4b07      	ldr	r3, [pc, #28]	; (8004624 <prvGetNextExpireTime+0x44>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e001      	b.n	8004614 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000de0 	.word	0x20000de0

08004628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004630:	f7ff fa74 	bl	8003b1c <xTaskGetTickCount>
 8004634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <prvSampleTimeNow+0x3c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d205      	bcs.n	800464c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004640:	f000 f936 	bl	80048b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e002      	b.n	8004652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004652:	4a04      	ldr	r2, [pc, #16]	; (8004664 <prvSampleTimeNow+0x3c>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004658:	68fb      	ldr	r3, [r7, #12]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000df0 	.word	0x20000df0

08004668 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d812      	bhi.n	80046b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	1ad2      	subs	r2, r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	429a      	cmp	r2, r3
 800469a:	d302      	bcc.n	80046a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e01b      	b.n	80046da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <prvInsertTimerInActiveList+0x7c>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4619      	mov	r1, r3
 80046ac:	4610      	mov	r0, r2
 80046ae:	f7fe f9de 	bl	8002a6e <vListInsert>
 80046b2:	e012      	b.n	80046da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d206      	bcs.n	80046ca <prvInsertTimerInActiveList+0x62>
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e007      	b.n	80046da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <prvInsertTimerInActiveList+0x80>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f7fe f9ca 	bl	8002a6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046da:	697b      	ldr	r3, [r7, #20]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000de4 	.word	0x20000de4
 80046e8:	20000de0 	.word	0x20000de0

080046ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	; 0x38
 80046f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046f2:	e0ca      	b.n	800488a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da18      	bge.n	800472c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	3304      	adds	r3, #4
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	61fb      	str	r3, [r7, #28]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004722:	6850      	ldr	r0, [r2, #4]
 8004724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004726:	6892      	ldr	r2, [r2, #8]
 8004728:	4611      	mov	r1, r2
 800472a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f2c0 80ab 	blt.w	800488a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	3304      	adds	r3, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe f9cb 	bl	8002ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800474a:	463b      	mov	r3, r7
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ff6b 	bl	8004628 <prvSampleTimeNow>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b09      	cmp	r3, #9
 8004758:	f200 8096 	bhi.w	8004888 <prvProcessReceivedCommands+0x19c>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <prvProcessReceivedCommands+0x78>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	0800478d 	.word	0x0800478d
 8004768:	0800478d 	.word	0x0800478d
 800476c:	0800478d 	.word	0x0800478d
 8004770:	08004801 	.word	0x08004801
 8004774:	08004815 	.word	0x08004815
 8004778:	0800485f 	.word	0x0800485f
 800477c:	0800478d 	.word	0x0800478d
 8004780:	0800478d 	.word	0x0800478d
 8004784:	08004801 	.word	0x08004801
 8004788:	08004815 	.word	0x08004815
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	b2da      	uxtb	r2, r3
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	18d1      	adds	r1, r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ac:	f7ff ff5c 	bl	8004668 <prvInsertTimerInActiveList>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d069      	beq.n	800488a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d05e      	beq.n	800488a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	441a      	add	r2, r3
 80047d4:	2300      	movs	r3, #0
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2300      	movs	r3, #0
 80047da:	2100      	movs	r1, #0
 80047dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047de:	f7ff fe05 	bl	80043ec <xTimerGenericCommand>
 80047e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d14f      	bne.n	800488a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	61bb      	str	r3, [r7, #24]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	b2da      	uxtb	r2, r3
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004812:	e03a      	b.n	800488a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	617b      	str	r3, [r7, #20]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	18d1      	adds	r1, r2, r3
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004858:	f7ff ff06 	bl	8004668 <prvInsertTimerInActiveList>
					break;
 800485c:	e015      	b.n	800488a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d103      	bne.n	8004874 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800486c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800486e:	f000 fbdf 	bl	8005030 <vPortFree>
 8004872:	e00a      	b.n	800488a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	b2da      	uxtb	r2, r3
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004886:	e000      	b.n	800488a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004888:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800488a:	4b08      	ldr	r3, [pc, #32]	; (80048ac <prvProcessReceivedCommands+0x1c0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	1d39      	adds	r1, r7, #4
 8004890:	2200      	movs	r2, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fbec 	bl	8003070 <xQueueReceive>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	f47f af2a 	bne.w	80046f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	3730      	adds	r7, #48	; 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000de8 	.word	0x20000de8

080048b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048b6:	e048      	b.n	800494a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <prvSwitchTimerLists+0xc0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c2:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <prvSwitchTimerLists+0xc0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fe f905 	bl	8002ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d02e      	beq.n	800494a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4413      	add	r3, r2
 80048f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d90e      	bls.n	800491c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <prvSwitchTimerLists+0xc0>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fe f8aa 	bl	8002a6e <vListInsert>
 800491a:	e016      	b.n	800494a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800491c:	2300      	movs	r3, #0
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	2300      	movs	r3, #0
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	2100      	movs	r1, #0
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff fd60 	bl	80043ec <xTimerGenericCommand>
 800492c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	603b      	str	r3, [r7, #0]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <prvSwitchTimerLists+0xc0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1b1      	bne.n	80048b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <prvSwitchTimerLists+0xc0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <prvSwitchTimerLists+0xc4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a04      	ldr	r2, [pc, #16]	; (8004970 <prvSwitchTimerLists+0xc0>)
 8004960:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004962:	4a04      	ldr	r2, [pc, #16]	; (8004974 <prvSwitchTimerLists+0xc4>)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6013      	str	r3, [r2, #0]
}
 8004968:	bf00      	nop
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000de0 	.word	0x20000de0
 8004974:	20000de4 	.word	0x20000de4

08004978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800497e:	f000 f969 	bl	8004c54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d120      	bne.n	80049cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800498a:	4814      	ldr	r0, [pc, #80]	; (80049dc <prvCheckForValidListAndQueue+0x64>)
 800498c:	f7fe f81e 	bl	80029cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004990:	4813      	ldr	r0, [pc, #76]	; (80049e0 <prvCheckForValidListAndQueue+0x68>)
 8004992:	f7fe f81b 	bl	80029cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <prvCheckForValidListAndQueue+0x6c>)
 8004998:	4a10      	ldr	r2, [pc, #64]	; (80049dc <prvCheckForValidListAndQueue+0x64>)
 800499a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800499c:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <prvCheckForValidListAndQueue+0x70>)
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <prvCheckForValidListAndQueue+0x68>)
 80049a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049a2:	2300      	movs	r3, #0
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <prvCheckForValidListAndQueue+0x74>)
 80049a8:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <prvCheckForValidListAndQueue+0x78>)
 80049aa:	2110      	movs	r1, #16
 80049ac:	200a      	movs	r0, #10
 80049ae:	f7fe f929 	bl	8002c04 <xQueueGenericCreateStatic>
 80049b2:	4603      	mov	r3, r0
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 80049b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049b8:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	490b      	ldr	r1, [pc, #44]	; (80049f4 <prvCheckForValidListAndQueue+0x7c>)
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fd42 	bl	8003450 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049cc:	f000 f972 	bl	8004cb4 <vPortExitCritical>
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000de8 	.word	0x20000de8
 80049dc:	20000db8 	.word	0x20000db8
 80049e0:	20000dcc 	.word	0x20000dcc
 80049e4:	20000de0 	.word	0x20000de0
 80049e8:	20000de4 	.word	0x20000de4
 80049ec:	20000e94 	.word	0x20000e94
 80049f0:	20000df4 	.word	0x20000df4
 80049f4:	08005ccc 	.word	0x08005ccc

080049f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3b04      	subs	r3, #4
 8004a08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3b04      	subs	r3, #4
 8004a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3b04      	subs	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a28:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <pxPortInitialiseStack+0x64>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b14      	subs	r3, #20
 8004a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3b04      	subs	r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f06f 0202 	mvn.w	r2, #2
 8004a46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3b20      	subs	r3, #32
 8004a4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	08004a61 	.word	0x08004a61

08004a60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <prvTaskExitError+0x54>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d00a      	beq.n	8004a8a <prvTaskExitError+0x2a>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	60fb      	str	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <prvTaskExitError+0x28>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60bb      	str	r3, [r7, #8]
}
 8004a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a9e:	bf00      	nop
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0fc      	beq.n	8004aa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	2000000c 	.word	0x2000000c
	...

08004ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <pxCurrentTCBConst2>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	6808      	ldr	r0, [r1, #0]
 8004ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	f380 8809 	msr	PSP, r0
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8811 	msr	BASEPRI, r0
 8004ada:	4770      	bx	lr
 8004adc:	f3af 8000 	nop.w

08004ae0 <pxCurrentTCBConst2>:
 8004ae0:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ae8:	4808      	ldr	r0, [pc, #32]	; (8004b0c <prvPortStartFirstTask+0x24>)
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	6800      	ldr	r0, [r0, #0]
 8004aee:	f380 8808 	msr	MSP, r0
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f380 8814 	msr	CONTROL, r0
 8004afa:	b662      	cpsie	i
 8004afc:	b661      	cpsie	f
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	df00      	svc	0
 8004b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b0a:	bf00      	nop
 8004b0c:	e000ed08 	.word	0xe000ed08

08004b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b16:	4b46      	ldr	r3, [pc, #280]	; (8004c30 <xPortStartScheduler+0x120>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a46      	ldr	r2, [pc, #280]	; (8004c34 <xPortStartScheduler+0x124>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10a      	bne.n	8004b36 <xPortStartScheduler+0x26>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	613b      	str	r3, [r7, #16]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b36:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <xPortStartScheduler+0x120>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3f      	ldr	r2, [pc, #252]	; (8004c38 <xPortStartScheduler+0x128>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10a      	bne.n	8004b56 <xPortStartScheduler+0x46>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60fb      	str	r3, [r7, #12]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <xPortStartScheduler+0x12c>)
 8004b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	22ff      	movs	r2, #255	; 0xff
 8004b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <xPortStartScheduler+0x130>)
 8004b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b7e:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b80:	2207      	movs	r2, #7
 8004b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b84:	e009      	b.n	8004b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	4a2d      	ldr	r2, [pc, #180]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d0ef      	beq.n	8004b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <xPortStartScheduler+0x134>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1c3 0307 	rsb	r3, r3, #7
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d00a      	beq.n	8004bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	60bb      	str	r3, [r7, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004be6:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <xPortStartScheduler+0x138>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bfe:	f000 f8dd 	bl	8004dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <xPortStartScheduler+0x13c>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c08:	f000 f8fc 	bl	8004e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <xPortStartScheduler+0x140>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0f      	ldr	r2, [pc, #60]	; (8004c50 <xPortStartScheduler+0x140>)
 8004c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c18:	f7ff ff66 	bl	8004ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c1c:	f7ff f848 	bl	8003cb0 <vTaskSwitchContext>
	prvTaskExitError();
 8004c20:	f7ff ff1e 	bl	8004a60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	e000ed00 	.word	0xe000ed00
 8004c34:	410fc271 	.word	0x410fc271
 8004c38:	410fc270 	.word	0x410fc270
 8004c3c:	e000e400 	.word	0xe000e400
 8004c40:	20000ee4 	.word	0x20000ee4
 8004c44:	20000ee8 	.word	0x20000ee8
 8004c48:	e000ed20 	.word	0xe000ed20
 8004c4c:	2000000c 	.word	0x2000000c
 8004c50:	e000ef34 	.word	0xe000ef34

08004c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	607b      	str	r3, [r7, #4]
}
 8004c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <vPortEnterCritical+0x58>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <vPortEnterCritical+0x58>)
 8004c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <vPortEnterCritical+0x58>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10f      	bne.n	8004ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortEnterCritical+0x5c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	603b      	str	r3, [r7, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <vPortEnterCritical+0x4a>
	}
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	2000000c 	.word	0x2000000c
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <vPortExitCritical+0x50>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <vPortExitCritical+0x24>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	607b      	str	r3, [r7, #4]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <vPortExitCritical+0x50>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <vPortExitCritical+0x42>
 8004cea:	2300      	movs	r3, #0
 8004cec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f383 8811 	msr	BASEPRI, r3
}
 8004cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000000c 	.word	0x2000000c
	...

08004d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d10:	f3ef 8009 	mrs	r0, PSP
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <pxCurrentTCBConst>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f01e 0f10 	tst.w	lr, #16
 8004d20:	bf08      	it	eq
 8004d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d34:	f380 8811 	msr	BASEPRI, r0
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f7fe ffb6 	bl	8003cb0 <vTaskSwitchContext>
 8004d44:	f04f 0000 	mov.w	r0, #0
 8004d48:	f380 8811 	msr	BASEPRI, r0
 8004d4c:	bc09      	pop	{r0, r3}
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	6808      	ldr	r0, [r1, #0]
 8004d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d56:	f01e 0f10 	tst.w	lr, #16
 8004d5a:	bf08      	it	eq
 8004d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d60:	f380 8809 	msr	PSP, r0
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	f3af 8000 	nop.w

08004d70 <pxCurrentTCBConst>:
 8004d70:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop

08004d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
}
 8004d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d92:	f7fe fed3 	bl	8003b3c <xTaskIncrementTick>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <xPortSysTickHandler+0x40>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	2300      	movs	r3, #0
 8004da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f383 8811 	msr	BASEPRI, r3
}
 8004dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <vPortSetupTimerInterrupt+0x38>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <vPortSetupTimerInterrupt+0x3c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <vPortSetupTimerInterrupt+0x40>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <vPortSetupTimerInterrupt+0x44>)
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dde:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004de0:	2207      	movs	r2, #7
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	e000e010 	.word	0xe000e010
 8004df4:	e000e018 	.word	0xe000e018
 8004df8:	20000000 	.word	0x20000000
 8004dfc:	10624dd3 	.word	0x10624dd3
 8004e00:	e000e014 	.word	0xe000e014

08004e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e14 <vPortEnableVFP+0x10>
 8004e08:	6801      	ldr	r1, [r0, #0]
 8004e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e0e:	6001      	str	r1, [r0, #0]
 8004e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e12:	bf00      	nop
 8004e14:	e000ed88 	.word	0xe000ed88

08004e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e1e:	f3ef 8305 	mrs	r3, IPSR
 8004e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b0f      	cmp	r3, #15
 8004e28:	d914      	bls.n	8004e54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <vPortValidateInterruptPriority+0x70>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <vPortValidateInterruptPriority+0x74>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	7afa      	ldrb	r2, [r7, #11]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d20a      	bcs.n	8004e54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <vPortValidateInterruptPriority+0x78>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <vPortValidateInterruptPriority+0x7c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d90a      	bls.n	8004e7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	603b      	str	r3, [r7, #0]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <vPortValidateInterruptPriority+0x60>
	}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	e000e3f0 	.word	0xe000e3f0
 8004e8c:	20000ee4 	.word	0x20000ee4
 8004e90:	e000ed0c 	.word	0xe000ed0c
 8004e94:	20000ee8 	.word	0x20000ee8

08004e98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ea4:	f7fe fd8e 	bl	80039c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ea8:	4b5b      	ldr	r3, [pc, #364]	; (8005018 <pvPortMalloc+0x180>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004eb0:	f000 f920 	bl	80050f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004eb4:	4b59      	ldr	r3, [pc, #356]	; (800501c <pvPortMalloc+0x184>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 8093 	bne.w	8004fe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01d      	beq.n	8004f04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ec8:	2208      	movs	r2, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d014      	beq.n	8004f04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f023 0307 	bic.w	r3, r3, #7
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <pvPortMalloc+0x6c>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	617b      	str	r3, [r7, #20]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d06e      	beq.n	8004fe8 <pvPortMalloc+0x150>
 8004f0a:	4b45      	ldr	r3, [pc, #276]	; (8005020 <pvPortMalloc+0x188>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d869      	bhi.n	8004fe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f14:	4b43      	ldr	r3, [pc, #268]	; (8005024 <pvPortMalloc+0x18c>)
 8004f16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f18:	4b42      	ldr	r3, [pc, #264]	; (8005024 <pvPortMalloc+0x18c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f1e:	e004      	b.n	8004f2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d903      	bls.n	8004f3c <pvPortMalloc+0xa4>
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f1      	bne.n	8004f20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f3c:	4b36      	ldr	r3, [pc, #216]	; (8005018 <pvPortMalloc+0x180>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d050      	beq.n	8004fe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	4413      	add	r3, r2
 8004f4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	2308      	movs	r3, #8
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d91f      	bls.n	8004fa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <pvPortMalloc+0xf8>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	613b      	str	r3, [r7, #16]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fa2:	69b8      	ldr	r0, [r7, #24]
 8004fa4:	f000 f908 	bl	80051b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <pvPortMalloc+0x188>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <pvPortMalloc+0x188>)
 8004fb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <pvPortMalloc+0x188>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <pvPortMalloc+0x190>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d203      	bcs.n	8004fca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fc2:	4b17      	ldr	r3, [pc, #92]	; (8005020 <pvPortMalloc+0x188>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a18      	ldr	r2, [pc, #96]	; (8005028 <pvPortMalloc+0x190>)
 8004fc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <pvPortMalloc+0x184>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <pvPortMalloc+0x194>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	4a11      	ldr	r2, [pc, #68]	; (800502c <pvPortMalloc+0x194>)
 8004fe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fe8:	f7fe fcfa 	bl	80039e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <pvPortMalloc+0x174>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60fb      	str	r3, [r7, #12]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <pvPortMalloc+0x172>
	return pvReturn;
 800500c:	69fb      	ldr	r3, [r7, #28]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3728      	adds	r7, #40	; 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20004af4 	.word	0x20004af4
 800501c:	20004b08 	.word	0x20004b08
 8005020:	20004af8 	.word	0x20004af8
 8005024:	20004aec 	.word	0x20004aec
 8005028:	20004afc 	.word	0x20004afc
 800502c:	20004b00 	.word	0x20004b00

08005030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d04d      	beq.n	80050de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005042:	2308      	movs	r3, #8
 8005044:	425b      	negs	r3, r3
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <vPortFree+0xb8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <vPortFree+0x44>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60fb      	str	r3, [r7, #12]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <vPortFree+0x62>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60bb      	str	r3, [r7, #8]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <vPortFree+0xb8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01e      	beq.n	80050de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11a      	bne.n	80050de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <vPortFree+0xb8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	401a      	ands	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050b8:	f7fe fc84 	bl	80039c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <vPortFree+0xbc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4413      	add	r3, r2
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <vPortFree+0xbc>)
 80050c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ca:	6938      	ldr	r0, [r7, #16]
 80050cc:	f000 f874 	bl	80051b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <vPortFree+0xc0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3301      	adds	r3, #1
 80050d6:	4a06      	ldr	r2, [pc, #24]	; (80050f0 <vPortFree+0xc0>)
 80050d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050da:	f7fe fc81 	bl	80039e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20004b08 	.word	0x20004b08
 80050ec:	20004af8 	.word	0x20004af8
 80050f0:	20004b04 	.word	0x20004b04

080050f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005100:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <prvHeapInit+0xac>)
 8005102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00c      	beq.n	8005128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3307      	adds	r3, #7
 8005112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <prvHeapInit+0xac>)
 8005124:	4413      	add	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <prvHeapInit+0xb0>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005132:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <prvHeapInit+0xb0>)
 8005134:	2200      	movs	r2, #0
 8005136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4413      	add	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005140:	2208      	movs	r2, #8
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <prvHeapInit+0xb4>)
 8005154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <prvHeapInit+0xb4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <prvHeapInit+0xb4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <prvHeapInit+0xb4>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <prvHeapInit+0xb8>)
 8005182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <prvHeapInit+0xbc>)
 800518a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <prvHeapInit+0xc0>)
 800518e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005192:	601a      	str	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20000eec 	.word	0x20000eec
 80051a4:	20004aec 	.word	0x20004aec
 80051a8:	20004af4 	.word	0x20004af4
 80051ac:	20004afc 	.word	0x20004afc
 80051b0:	20004af8 	.word	0x20004af8
 80051b4:	20004b08 	.word	0x20004b08

080051b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051c0:	4b28      	ldr	r3, [pc, #160]	; (8005264 <prvInsertBlockIntoFreeList+0xac>)
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e002      	b.n	80051cc <prvInsertBlockIntoFreeList+0x14>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d8f7      	bhi.n	80051c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	4413      	add	r3, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d108      	bne.n	80051fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	441a      	add	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d118      	bne.n	8005240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <prvInsertBlockIntoFreeList+0xb0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d00d      	beq.n	8005236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	441a      	add	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e008      	b.n	8005248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <prvInsertBlockIntoFreeList+0xb0>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e003      	b.n	8005248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d002      	beq.n	8005256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005256:	bf00      	nop
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20004aec 	.word	0x20004aec
 8005268:	20004af4 	.word	0x20004af4

0800526c <std>:
 800526c:	2300      	movs	r3, #0
 800526e:	b510      	push	{r4, lr}
 8005270:	4604      	mov	r4, r0
 8005272:	e9c0 3300 	strd	r3, r3, [r0]
 8005276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800527a:	6083      	str	r3, [r0, #8]
 800527c:	8181      	strh	r1, [r0, #12]
 800527e:	6643      	str	r3, [r0, #100]	; 0x64
 8005280:	81c2      	strh	r2, [r0, #14]
 8005282:	6183      	str	r3, [r0, #24]
 8005284:	4619      	mov	r1, r3
 8005286:	2208      	movs	r2, #8
 8005288:	305c      	adds	r0, #92	; 0x5c
 800528a:	f000 f9e5 	bl	8005658 <memset>
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <std+0x58>)
 8005290:	6263      	str	r3, [r4, #36]	; 0x24
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <std+0x5c>)
 8005294:	62a3      	str	r3, [r4, #40]	; 0x28
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <std+0x60>)
 8005298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800529a:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <std+0x64>)
 800529c:	6323      	str	r3, [r4, #48]	; 0x30
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <std+0x68>)
 80052a0:	6224      	str	r4, [r4, #32]
 80052a2:	429c      	cmp	r4, r3
 80052a4:	d006      	beq.n	80052b4 <std+0x48>
 80052a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80052aa:	4294      	cmp	r4, r2
 80052ac:	d002      	beq.n	80052b4 <std+0x48>
 80052ae:	33d0      	adds	r3, #208	; 0xd0
 80052b0:	429c      	cmp	r4, r3
 80052b2:	d105      	bne.n	80052c0 <std+0x54>
 80052b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052bc:	f000 ba9a 	b.w	80057f4 <__retarget_lock_init_recursive>
 80052c0:	bd10      	pop	{r4, pc}
 80052c2:	bf00      	nop
 80052c4:	080054a9 	.word	0x080054a9
 80052c8:	080054cb 	.word	0x080054cb
 80052cc:	08005503 	.word	0x08005503
 80052d0:	08005527 	.word	0x08005527
 80052d4:	20004b0c 	.word	0x20004b0c

080052d8 <stdio_exit_handler>:
 80052d8:	4a02      	ldr	r2, [pc, #8]	; (80052e4 <stdio_exit_handler+0xc>)
 80052da:	4903      	ldr	r1, [pc, #12]	; (80052e8 <stdio_exit_handler+0x10>)
 80052dc:	4803      	ldr	r0, [pc, #12]	; (80052ec <stdio_exit_handler+0x14>)
 80052de:	f000 b869 	b.w	80053b4 <_fwalk_sglue>
 80052e2:	bf00      	nop
 80052e4:	20000010 	.word	0x20000010
 80052e8:	08005b15 	.word	0x08005b15
 80052ec:	2000001c 	.word	0x2000001c

080052f0 <cleanup_stdio>:
 80052f0:	6841      	ldr	r1, [r0, #4]
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <cleanup_stdio+0x34>)
 80052f4:	4299      	cmp	r1, r3
 80052f6:	b510      	push	{r4, lr}
 80052f8:	4604      	mov	r4, r0
 80052fa:	d001      	beq.n	8005300 <cleanup_stdio+0x10>
 80052fc:	f000 fc0a 	bl	8005b14 <_fflush_r>
 8005300:	68a1      	ldr	r1, [r4, #8]
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <cleanup_stdio+0x38>)
 8005304:	4299      	cmp	r1, r3
 8005306:	d002      	beq.n	800530e <cleanup_stdio+0x1e>
 8005308:	4620      	mov	r0, r4
 800530a:	f000 fc03 	bl	8005b14 <_fflush_r>
 800530e:	68e1      	ldr	r1, [r4, #12]
 8005310:	4b06      	ldr	r3, [pc, #24]	; (800532c <cleanup_stdio+0x3c>)
 8005312:	4299      	cmp	r1, r3
 8005314:	d004      	beq.n	8005320 <cleanup_stdio+0x30>
 8005316:	4620      	mov	r0, r4
 8005318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800531c:	f000 bbfa 	b.w	8005b14 <_fflush_r>
 8005320:	bd10      	pop	{r4, pc}
 8005322:	bf00      	nop
 8005324:	20004b0c 	.word	0x20004b0c
 8005328:	20004b74 	.word	0x20004b74
 800532c:	20004bdc 	.word	0x20004bdc

08005330 <global_stdio_init.part.0>:
 8005330:	b510      	push	{r4, lr}
 8005332:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <global_stdio_init.part.0+0x30>)
 8005334:	4c0b      	ldr	r4, [pc, #44]	; (8005364 <global_stdio_init.part.0+0x34>)
 8005336:	4a0c      	ldr	r2, [pc, #48]	; (8005368 <global_stdio_init.part.0+0x38>)
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	4620      	mov	r0, r4
 800533c:	2200      	movs	r2, #0
 800533e:	2104      	movs	r1, #4
 8005340:	f7ff ff94 	bl	800526c <std>
 8005344:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005348:	2201      	movs	r2, #1
 800534a:	2109      	movs	r1, #9
 800534c:	f7ff ff8e 	bl	800526c <std>
 8005350:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005354:	2202      	movs	r2, #2
 8005356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800535a:	2112      	movs	r1, #18
 800535c:	f7ff bf86 	b.w	800526c <std>
 8005360:	20004c44 	.word	0x20004c44
 8005364:	20004b0c 	.word	0x20004b0c
 8005368:	080052d9 	.word	0x080052d9

0800536c <__sfp_lock_acquire>:
 800536c:	4801      	ldr	r0, [pc, #4]	; (8005374 <__sfp_lock_acquire+0x8>)
 800536e:	f000 ba42 	b.w	80057f6 <__retarget_lock_acquire_recursive>
 8005372:	bf00      	nop
 8005374:	20004c4d 	.word	0x20004c4d

08005378 <__sfp_lock_release>:
 8005378:	4801      	ldr	r0, [pc, #4]	; (8005380 <__sfp_lock_release+0x8>)
 800537a:	f000 ba3d 	b.w	80057f8 <__retarget_lock_release_recursive>
 800537e:	bf00      	nop
 8005380:	20004c4d 	.word	0x20004c4d

08005384 <__sinit>:
 8005384:	b510      	push	{r4, lr}
 8005386:	4604      	mov	r4, r0
 8005388:	f7ff fff0 	bl	800536c <__sfp_lock_acquire>
 800538c:	6a23      	ldr	r3, [r4, #32]
 800538e:	b11b      	cbz	r3, 8005398 <__sinit+0x14>
 8005390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005394:	f7ff bff0 	b.w	8005378 <__sfp_lock_release>
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <__sinit+0x28>)
 800539a:	6223      	str	r3, [r4, #32]
 800539c:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <__sinit+0x2c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f5      	bne.n	8005390 <__sinit+0xc>
 80053a4:	f7ff ffc4 	bl	8005330 <global_stdio_init.part.0>
 80053a8:	e7f2      	b.n	8005390 <__sinit+0xc>
 80053aa:	bf00      	nop
 80053ac:	080052f1 	.word	0x080052f1
 80053b0:	20004c44 	.word	0x20004c44

080053b4 <_fwalk_sglue>:
 80053b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b8:	4607      	mov	r7, r0
 80053ba:	4688      	mov	r8, r1
 80053bc:	4614      	mov	r4, r2
 80053be:	2600      	movs	r6, #0
 80053c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053c4:	f1b9 0901 	subs.w	r9, r9, #1
 80053c8:	d505      	bpl.n	80053d6 <_fwalk_sglue+0x22>
 80053ca:	6824      	ldr	r4, [r4, #0]
 80053cc:	2c00      	cmp	r4, #0
 80053ce:	d1f7      	bne.n	80053c0 <_fwalk_sglue+0xc>
 80053d0:	4630      	mov	r0, r6
 80053d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053d6:	89ab      	ldrh	r3, [r5, #12]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d907      	bls.n	80053ec <_fwalk_sglue+0x38>
 80053dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053e0:	3301      	adds	r3, #1
 80053e2:	d003      	beq.n	80053ec <_fwalk_sglue+0x38>
 80053e4:	4629      	mov	r1, r5
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c0      	blx	r8
 80053ea:	4306      	orrs	r6, r0
 80053ec:	3568      	adds	r5, #104	; 0x68
 80053ee:	e7e9      	b.n	80053c4 <_fwalk_sglue+0x10>

080053f0 <_puts_r>:
 80053f0:	6a03      	ldr	r3, [r0, #32]
 80053f2:	b570      	push	{r4, r5, r6, lr}
 80053f4:	6884      	ldr	r4, [r0, #8]
 80053f6:	4605      	mov	r5, r0
 80053f8:	460e      	mov	r6, r1
 80053fa:	b90b      	cbnz	r3, 8005400 <_puts_r+0x10>
 80053fc:	f7ff ffc2 	bl	8005384 <__sinit>
 8005400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005402:	07db      	lsls	r3, r3, #31
 8005404:	d405      	bmi.n	8005412 <_puts_r+0x22>
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	0598      	lsls	r0, r3, #22
 800540a:	d402      	bmi.n	8005412 <_puts_r+0x22>
 800540c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800540e:	f000 f9f2 	bl	80057f6 <__retarget_lock_acquire_recursive>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	0719      	lsls	r1, r3, #28
 8005416:	d513      	bpl.n	8005440 <_puts_r+0x50>
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	b18b      	cbz	r3, 8005440 <_puts_r+0x50>
 800541c:	3e01      	subs	r6, #1
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005424:	3b01      	subs	r3, #1
 8005426:	60a3      	str	r3, [r4, #8]
 8005428:	b9e9      	cbnz	r1, 8005466 <_puts_r+0x76>
 800542a:	2b00      	cmp	r3, #0
 800542c:	da2e      	bge.n	800548c <_puts_r+0x9c>
 800542e:	4622      	mov	r2, r4
 8005430:	210a      	movs	r1, #10
 8005432:	4628      	mov	r0, r5
 8005434:	f000 f87b 	bl	800552e <__swbuf_r>
 8005438:	3001      	adds	r0, #1
 800543a:	d007      	beq.n	800544c <_puts_r+0x5c>
 800543c:	250a      	movs	r5, #10
 800543e:	e007      	b.n	8005450 <_puts_r+0x60>
 8005440:	4621      	mov	r1, r4
 8005442:	4628      	mov	r0, r5
 8005444:	f000 f8b0 	bl	80055a8 <__swsetup_r>
 8005448:	2800      	cmp	r0, #0
 800544a:	d0e7      	beq.n	800541c <_puts_r+0x2c>
 800544c:	f04f 35ff 	mov.w	r5, #4294967295
 8005450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005452:	07da      	lsls	r2, r3, #31
 8005454:	d405      	bmi.n	8005462 <_puts_r+0x72>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	059b      	lsls	r3, r3, #22
 800545a:	d402      	bmi.n	8005462 <_puts_r+0x72>
 800545c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800545e:	f000 f9cb 	bl	80057f8 <__retarget_lock_release_recursive>
 8005462:	4628      	mov	r0, r5
 8005464:	bd70      	pop	{r4, r5, r6, pc}
 8005466:	2b00      	cmp	r3, #0
 8005468:	da04      	bge.n	8005474 <_puts_r+0x84>
 800546a:	69a2      	ldr	r2, [r4, #24]
 800546c:	429a      	cmp	r2, r3
 800546e:	dc06      	bgt.n	800547e <_puts_r+0x8e>
 8005470:	290a      	cmp	r1, #10
 8005472:	d004      	beq.n	800547e <_puts_r+0x8e>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	7019      	strb	r1, [r3, #0]
 800547c:	e7cf      	b.n	800541e <_puts_r+0x2e>
 800547e:	4622      	mov	r2, r4
 8005480:	4628      	mov	r0, r5
 8005482:	f000 f854 	bl	800552e <__swbuf_r>
 8005486:	3001      	adds	r0, #1
 8005488:	d1c9      	bne.n	800541e <_puts_r+0x2e>
 800548a:	e7df      	b.n	800544c <_puts_r+0x5c>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	250a      	movs	r5, #10
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	6022      	str	r2, [r4, #0]
 8005494:	701d      	strb	r5, [r3, #0]
 8005496:	e7db      	b.n	8005450 <_puts_r+0x60>

08005498 <puts>:
 8005498:	4b02      	ldr	r3, [pc, #8]	; (80054a4 <puts+0xc>)
 800549a:	4601      	mov	r1, r0
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	f7ff bfa7 	b.w	80053f0 <_puts_r>
 80054a2:	bf00      	nop
 80054a4:	20000068 	.word	0x20000068

080054a8 <__sread>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	460c      	mov	r4, r1
 80054ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b0:	f000 f952 	bl	8005758 <_read_r>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	bfab      	itete	ge
 80054b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054ba:	89a3      	ldrhlt	r3, [r4, #12]
 80054bc:	181b      	addge	r3, r3, r0
 80054be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054c2:	bfac      	ite	ge
 80054c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80054c6:	81a3      	strhlt	r3, [r4, #12]
 80054c8:	bd10      	pop	{r4, pc}

080054ca <__swrite>:
 80054ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ce:	461f      	mov	r7, r3
 80054d0:	898b      	ldrh	r3, [r1, #12]
 80054d2:	05db      	lsls	r3, r3, #23
 80054d4:	4605      	mov	r5, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	4616      	mov	r6, r2
 80054da:	d505      	bpl.n	80054e8 <__swrite+0x1e>
 80054dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e0:	2302      	movs	r3, #2
 80054e2:	2200      	movs	r2, #0
 80054e4:	f000 f926 	bl	8005734 <_lseek_r>
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054f2:	81a3      	strh	r3, [r4, #12]
 80054f4:	4632      	mov	r2, r6
 80054f6:	463b      	mov	r3, r7
 80054f8:	4628      	mov	r0, r5
 80054fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054fe:	f000 b93d 	b.w	800577c <_write_r>

08005502 <__sseek>:
 8005502:	b510      	push	{r4, lr}
 8005504:	460c      	mov	r4, r1
 8005506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550a:	f000 f913 	bl	8005734 <_lseek_r>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	bf15      	itete	ne
 8005514:	6560      	strne	r0, [r4, #84]	; 0x54
 8005516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800551a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800551e:	81a3      	strheq	r3, [r4, #12]
 8005520:	bf18      	it	ne
 8005522:	81a3      	strhne	r3, [r4, #12]
 8005524:	bd10      	pop	{r4, pc}

08005526 <__sclose>:
 8005526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552a:	f000 b89d 	b.w	8005668 <_close_r>

0800552e <__swbuf_r>:
 800552e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005530:	460e      	mov	r6, r1
 8005532:	4614      	mov	r4, r2
 8005534:	4605      	mov	r5, r0
 8005536:	b118      	cbz	r0, 8005540 <__swbuf_r+0x12>
 8005538:	6a03      	ldr	r3, [r0, #32]
 800553a:	b90b      	cbnz	r3, 8005540 <__swbuf_r+0x12>
 800553c:	f7ff ff22 	bl	8005384 <__sinit>
 8005540:	69a3      	ldr	r3, [r4, #24]
 8005542:	60a3      	str	r3, [r4, #8]
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	071a      	lsls	r2, r3, #28
 8005548:	d525      	bpl.n	8005596 <__swbuf_r+0x68>
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	b31b      	cbz	r3, 8005596 <__swbuf_r+0x68>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	6922      	ldr	r2, [r4, #16]
 8005552:	1a98      	subs	r0, r3, r2
 8005554:	6963      	ldr	r3, [r4, #20]
 8005556:	b2f6      	uxtb	r6, r6
 8005558:	4283      	cmp	r3, r0
 800555a:	4637      	mov	r7, r6
 800555c:	dc04      	bgt.n	8005568 <__swbuf_r+0x3a>
 800555e:	4621      	mov	r1, r4
 8005560:	4628      	mov	r0, r5
 8005562:	f000 fad7 	bl	8005b14 <_fflush_r>
 8005566:	b9e0      	cbnz	r0, 80055a2 <__swbuf_r+0x74>
 8005568:	68a3      	ldr	r3, [r4, #8]
 800556a:	3b01      	subs	r3, #1
 800556c:	60a3      	str	r3, [r4, #8]
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	6022      	str	r2, [r4, #0]
 8005574:	701e      	strb	r6, [r3, #0]
 8005576:	6962      	ldr	r2, [r4, #20]
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	429a      	cmp	r2, r3
 800557c:	d004      	beq.n	8005588 <__swbuf_r+0x5a>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	07db      	lsls	r3, r3, #31
 8005582:	d506      	bpl.n	8005592 <__swbuf_r+0x64>
 8005584:	2e0a      	cmp	r6, #10
 8005586:	d104      	bne.n	8005592 <__swbuf_r+0x64>
 8005588:	4621      	mov	r1, r4
 800558a:	4628      	mov	r0, r5
 800558c:	f000 fac2 	bl	8005b14 <_fflush_r>
 8005590:	b938      	cbnz	r0, 80055a2 <__swbuf_r+0x74>
 8005592:	4638      	mov	r0, r7
 8005594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005596:	4621      	mov	r1, r4
 8005598:	4628      	mov	r0, r5
 800559a:	f000 f805 	bl	80055a8 <__swsetup_r>
 800559e:	2800      	cmp	r0, #0
 80055a0:	d0d5      	beq.n	800554e <__swbuf_r+0x20>
 80055a2:	f04f 37ff 	mov.w	r7, #4294967295
 80055a6:	e7f4      	b.n	8005592 <__swbuf_r+0x64>

080055a8 <__swsetup_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4b2a      	ldr	r3, [pc, #168]	; (8005654 <__swsetup_r+0xac>)
 80055ac:	4605      	mov	r5, r0
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	460c      	mov	r4, r1
 80055b2:	b118      	cbz	r0, 80055bc <__swsetup_r+0x14>
 80055b4:	6a03      	ldr	r3, [r0, #32]
 80055b6:	b90b      	cbnz	r3, 80055bc <__swsetup_r+0x14>
 80055b8:	f7ff fee4 	bl	8005384 <__sinit>
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c2:	0718      	lsls	r0, r3, #28
 80055c4:	d422      	bmi.n	800560c <__swsetup_r+0x64>
 80055c6:	06d9      	lsls	r1, r3, #27
 80055c8:	d407      	bmi.n	80055da <__swsetup_r+0x32>
 80055ca:	2309      	movs	r3, #9
 80055cc:	602b      	str	r3, [r5, #0]
 80055ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055d2:	81a3      	strh	r3, [r4, #12]
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	e034      	b.n	8005644 <__swsetup_r+0x9c>
 80055da:	0758      	lsls	r0, r3, #29
 80055dc:	d512      	bpl.n	8005604 <__swsetup_r+0x5c>
 80055de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055e0:	b141      	cbz	r1, 80055f4 <__swsetup_r+0x4c>
 80055e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055e6:	4299      	cmp	r1, r3
 80055e8:	d002      	beq.n	80055f0 <__swsetup_r+0x48>
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f914 	bl	8005818 <_free_r>
 80055f0:	2300      	movs	r3, #0
 80055f2:	6363      	str	r3, [r4, #52]	; 0x34
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055fa:	81a3      	strh	r3, [r4, #12]
 80055fc:	2300      	movs	r3, #0
 80055fe:	6063      	str	r3, [r4, #4]
 8005600:	6923      	ldr	r3, [r4, #16]
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	f043 0308 	orr.w	r3, r3, #8
 800560a:	81a3      	strh	r3, [r4, #12]
 800560c:	6923      	ldr	r3, [r4, #16]
 800560e:	b94b      	cbnz	r3, 8005624 <__swsetup_r+0x7c>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800561a:	d003      	beq.n	8005624 <__swsetup_r+0x7c>
 800561c:	4621      	mov	r1, r4
 800561e:	4628      	mov	r0, r5
 8005620:	f000 fac6 	bl	8005bb0 <__smakebuf_r>
 8005624:	89a0      	ldrh	r0, [r4, #12]
 8005626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800562a:	f010 0301 	ands.w	r3, r0, #1
 800562e:	d00a      	beq.n	8005646 <__swsetup_r+0x9e>
 8005630:	2300      	movs	r3, #0
 8005632:	60a3      	str	r3, [r4, #8]
 8005634:	6963      	ldr	r3, [r4, #20]
 8005636:	425b      	negs	r3, r3
 8005638:	61a3      	str	r3, [r4, #24]
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	b943      	cbnz	r3, 8005650 <__swsetup_r+0xa8>
 800563e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005642:	d1c4      	bne.n	80055ce <__swsetup_r+0x26>
 8005644:	bd38      	pop	{r3, r4, r5, pc}
 8005646:	0781      	lsls	r1, r0, #30
 8005648:	bf58      	it	pl
 800564a:	6963      	ldrpl	r3, [r4, #20]
 800564c:	60a3      	str	r3, [r4, #8]
 800564e:	e7f4      	b.n	800563a <__swsetup_r+0x92>
 8005650:	2000      	movs	r0, #0
 8005652:	e7f7      	b.n	8005644 <__swsetup_r+0x9c>
 8005654:	20000068 	.word	0x20000068

08005658 <memset>:
 8005658:	4402      	add	r2, r0
 800565a:	4603      	mov	r3, r0
 800565c:	4293      	cmp	r3, r2
 800565e:	d100      	bne.n	8005662 <memset+0xa>
 8005660:	4770      	bx	lr
 8005662:	f803 1b01 	strb.w	r1, [r3], #1
 8005666:	e7f9      	b.n	800565c <memset+0x4>

08005668 <_close_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4d06      	ldr	r5, [pc, #24]	; (8005684 <_close_r+0x1c>)
 800566c:	2300      	movs	r3, #0
 800566e:	4604      	mov	r4, r0
 8005670:	4608      	mov	r0, r1
 8005672:	602b      	str	r3, [r5, #0]
 8005674:	f7fb f9a3 	bl	80009be <_close>
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	d102      	bne.n	8005682 <_close_r+0x1a>
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	b103      	cbz	r3, 8005682 <_close_r+0x1a>
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	bd38      	pop	{r3, r4, r5, pc}
 8005684:	20004c48 	.word	0x20004c48

08005688 <_reclaim_reent>:
 8005688:	4b29      	ldr	r3, [pc, #164]	; (8005730 <_reclaim_reent+0xa8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4283      	cmp	r3, r0
 800568e:	b570      	push	{r4, r5, r6, lr}
 8005690:	4604      	mov	r4, r0
 8005692:	d04b      	beq.n	800572c <_reclaim_reent+0xa4>
 8005694:	69c3      	ldr	r3, [r0, #28]
 8005696:	b143      	cbz	r3, 80056aa <_reclaim_reent+0x22>
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d144      	bne.n	8005728 <_reclaim_reent+0xa0>
 800569e:	69e3      	ldr	r3, [r4, #28]
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	b111      	cbz	r1, 80056aa <_reclaim_reent+0x22>
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 f8b7 	bl	8005818 <_free_r>
 80056aa:	6961      	ldr	r1, [r4, #20]
 80056ac:	b111      	cbz	r1, 80056b4 <_reclaim_reent+0x2c>
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 f8b2 	bl	8005818 <_free_r>
 80056b4:	69e1      	ldr	r1, [r4, #28]
 80056b6:	b111      	cbz	r1, 80056be <_reclaim_reent+0x36>
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 f8ad 	bl	8005818 <_free_r>
 80056be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80056c0:	b111      	cbz	r1, 80056c8 <_reclaim_reent+0x40>
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 f8a8 	bl	8005818 <_free_r>
 80056c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ca:	b111      	cbz	r1, 80056d2 <_reclaim_reent+0x4a>
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 f8a3 	bl	8005818 <_free_r>
 80056d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056d4:	b111      	cbz	r1, 80056dc <_reclaim_reent+0x54>
 80056d6:	4620      	mov	r0, r4
 80056d8:	f000 f89e 	bl	8005818 <_free_r>
 80056dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056de:	b111      	cbz	r1, 80056e6 <_reclaim_reent+0x5e>
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 f899 	bl	8005818 <_free_r>
 80056e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80056e8:	b111      	cbz	r1, 80056f0 <_reclaim_reent+0x68>
 80056ea:	4620      	mov	r0, r4
 80056ec:	f000 f894 	bl	8005818 <_free_r>
 80056f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80056f2:	b111      	cbz	r1, 80056fa <_reclaim_reent+0x72>
 80056f4:	4620      	mov	r0, r4
 80056f6:	f000 f88f 	bl	8005818 <_free_r>
 80056fa:	6a23      	ldr	r3, [r4, #32]
 80056fc:	b1b3      	cbz	r3, 800572c <_reclaim_reent+0xa4>
 80056fe:	4620      	mov	r0, r4
 8005700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005704:	4718      	bx	r3
 8005706:	5949      	ldr	r1, [r1, r5]
 8005708:	b941      	cbnz	r1, 800571c <_reclaim_reent+0x94>
 800570a:	3504      	adds	r5, #4
 800570c:	69e3      	ldr	r3, [r4, #28]
 800570e:	2d80      	cmp	r5, #128	; 0x80
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	d1f8      	bne.n	8005706 <_reclaim_reent+0x7e>
 8005714:	4620      	mov	r0, r4
 8005716:	f000 f87f 	bl	8005818 <_free_r>
 800571a:	e7c0      	b.n	800569e <_reclaim_reent+0x16>
 800571c:	680e      	ldr	r6, [r1, #0]
 800571e:	4620      	mov	r0, r4
 8005720:	f000 f87a 	bl	8005818 <_free_r>
 8005724:	4631      	mov	r1, r6
 8005726:	e7ef      	b.n	8005708 <_reclaim_reent+0x80>
 8005728:	2500      	movs	r5, #0
 800572a:	e7ef      	b.n	800570c <_reclaim_reent+0x84>
 800572c:	bd70      	pop	{r4, r5, r6, pc}
 800572e:	bf00      	nop
 8005730:	20000068 	.word	0x20000068

08005734 <_lseek_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d07      	ldr	r5, [pc, #28]	; (8005754 <_lseek_r+0x20>)
 8005738:	4604      	mov	r4, r0
 800573a:	4608      	mov	r0, r1
 800573c:	4611      	mov	r1, r2
 800573e:	2200      	movs	r2, #0
 8005740:	602a      	str	r2, [r5, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	f7fb f962 	bl	8000a0c <_lseek>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_lseek_r+0x1e>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_lseek_r+0x1e>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	20004c48 	.word	0x20004c48

08005758 <_read_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d07      	ldr	r5, [pc, #28]	; (8005778 <_read_r+0x20>)
 800575c:	4604      	mov	r4, r0
 800575e:	4608      	mov	r0, r1
 8005760:	4611      	mov	r1, r2
 8005762:	2200      	movs	r2, #0
 8005764:	602a      	str	r2, [r5, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	f7fb f90c 	bl	8000984 <_read>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_read_r+0x1e>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b103      	cbz	r3, 8005776 <_read_r+0x1e>
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	20004c48 	.word	0x20004c48

0800577c <_write_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4d07      	ldr	r5, [pc, #28]	; (800579c <_write_r+0x20>)
 8005780:	4604      	mov	r4, r0
 8005782:	4608      	mov	r0, r1
 8005784:	4611      	mov	r1, r2
 8005786:	2200      	movs	r2, #0
 8005788:	602a      	str	r2, [r5, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	f7fa fea6 	bl	80004dc <_write>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d102      	bne.n	800579a <_write_r+0x1e>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	b103      	cbz	r3, 800579a <_write_r+0x1e>
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	20004c48 	.word	0x20004c48

080057a0 <__errno>:
 80057a0:	4b01      	ldr	r3, [pc, #4]	; (80057a8 <__errno+0x8>)
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000068 	.word	0x20000068

080057ac <__libc_init_array>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4d0d      	ldr	r5, [pc, #52]	; (80057e4 <__libc_init_array+0x38>)
 80057b0:	4c0d      	ldr	r4, [pc, #52]	; (80057e8 <__libc_init_array+0x3c>)
 80057b2:	1b64      	subs	r4, r4, r5
 80057b4:	10a4      	asrs	r4, r4, #2
 80057b6:	2600      	movs	r6, #0
 80057b8:	42a6      	cmp	r6, r4
 80057ba:	d109      	bne.n	80057d0 <__libc_init_array+0x24>
 80057bc:	4d0b      	ldr	r5, [pc, #44]	; (80057ec <__libc_init_array+0x40>)
 80057be:	4c0c      	ldr	r4, [pc, #48]	; (80057f0 <__libc_init_array+0x44>)
 80057c0:	f000 fa64 	bl	8005c8c <_init>
 80057c4:	1b64      	subs	r4, r4, r5
 80057c6:	10a4      	asrs	r4, r4, #2
 80057c8:	2600      	movs	r6, #0
 80057ca:	42a6      	cmp	r6, r4
 80057cc:	d105      	bne.n	80057da <__libc_init_array+0x2e>
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d4:	4798      	blx	r3
 80057d6:	3601      	adds	r6, #1
 80057d8:	e7ee      	b.n	80057b8 <__libc_init_array+0xc>
 80057da:	f855 3b04 	ldr.w	r3, [r5], #4
 80057de:	4798      	blx	r3
 80057e0:	3601      	adds	r6, #1
 80057e2:	e7f2      	b.n	80057ca <__libc_init_array+0x1e>
 80057e4:	08005d18 	.word	0x08005d18
 80057e8:	08005d18 	.word	0x08005d18
 80057ec:	08005d18 	.word	0x08005d18
 80057f0:	08005d1c 	.word	0x08005d1c

080057f4 <__retarget_lock_init_recursive>:
 80057f4:	4770      	bx	lr

080057f6 <__retarget_lock_acquire_recursive>:
 80057f6:	4770      	bx	lr

080057f8 <__retarget_lock_release_recursive>:
 80057f8:	4770      	bx	lr

080057fa <memcpy>:
 80057fa:	440a      	add	r2, r1
 80057fc:	4291      	cmp	r1, r2
 80057fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8005802:	d100      	bne.n	8005806 <memcpy+0xc>
 8005804:	4770      	bx	lr
 8005806:	b510      	push	{r4, lr}
 8005808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800580c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005810:	4291      	cmp	r1, r2
 8005812:	d1f9      	bne.n	8005808 <memcpy+0xe>
 8005814:	bd10      	pop	{r4, pc}
	...

08005818 <_free_r>:
 8005818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800581a:	2900      	cmp	r1, #0
 800581c:	d044      	beq.n	80058a8 <_free_r+0x90>
 800581e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005822:	9001      	str	r0, [sp, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f1a1 0404 	sub.w	r4, r1, #4
 800582a:	bfb8      	it	lt
 800582c:	18e4      	addlt	r4, r4, r3
 800582e:	f000 f8df 	bl	80059f0 <__malloc_lock>
 8005832:	4a1e      	ldr	r2, [pc, #120]	; (80058ac <_free_r+0x94>)
 8005834:	9801      	ldr	r0, [sp, #4]
 8005836:	6813      	ldr	r3, [r2, #0]
 8005838:	b933      	cbnz	r3, 8005848 <_free_r+0x30>
 800583a:	6063      	str	r3, [r4, #4]
 800583c:	6014      	str	r4, [r2, #0]
 800583e:	b003      	add	sp, #12
 8005840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005844:	f000 b8da 	b.w	80059fc <__malloc_unlock>
 8005848:	42a3      	cmp	r3, r4
 800584a:	d908      	bls.n	800585e <_free_r+0x46>
 800584c:	6825      	ldr	r5, [r4, #0]
 800584e:	1961      	adds	r1, r4, r5
 8005850:	428b      	cmp	r3, r1
 8005852:	bf01      	itttt	eq
 8005854:	6819      	ldreq	r1, [r3, #0]
 8005856:	685b      	ldreq	r3, [r3, #4]
 8005858:	1949      	addeq	r1, r1, r5
 800585a:	6021      	streq	r1, [r4, #0]
 800585c:	e7ed      	b.n	800583a <_free_r+0x22>
 800585e:	461a      	mov	r2, r3
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	b10b      	cbz	r3, 8005868 <_free_r+0x50>
 8005864:	42a3      	cmp	r3, r4
 8005866:	d9fa      	bls.n	800585e <_free_r+0x46>
 8005868:	6811      	ldr	r1, [r2, #0]
 800586a:	1855      	adds	r5, r2, r1
 800586c:	42a5      	cmp	r5, r4
 800586e:	d10b      	bne.n	8005888 <_free_r+0x70>
 8005870:	6824      	ldr	r4, [r4, #0]
 8005872:	4421      	add	r1, r4
 8005874:	1854      	adds	r4, r2, r1
 8005876:	42a3      	cmp	r3, r4
 8005878:	6011      	str	r1, [r2, #0]
 800587a:	d1e0      	bne.n	800583e <_free_r+0x26>
 800587c:	681c      	ldr	r4, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	6053      	str	r3, [r2, #4]
 8005882:	440c      	add	r4, r1
 8005884:	6014      	str	r4, [r2, #0]
 8005886:	e7da      	b.n	800583e <_free_r+0x26>
 8005888:	d902      	bls.n	8005890 <_free_r+0x78>
 800588a:	230c      	movs	r3, #12
 800588c:	6003      	str	r3, [r0, #0]
 800588e:	e7d6      	b.n	800583e <_free_r+0x26>
 8005890:	6825      	ldr	r5, [r4, #0]
 8005892:	1961      	adds	r1, r4, r5
 8005894:	428b      	cmp	r3, r1
 8005896:	bf04      	itt	eq
 8005898:	6819      	ldreq	r1, [r3, #0]
 800589a:	685b      	ldreq	r3, [r3, #4]
 800589c:	6063      	str	r3, [r4, #4]
 800589e:	bf04      	itt	eq
 80058a0:	1949      	addeq	r1, r1, r5
 80058a2:	6021      	streq	r1, [r4, #0]
 80058a4:	6054      	str	r4, [r2, #4]
 80058a6:	e7ca      	b.n	800583e <_free_r+0x26>
 80058a8:	b003      	add	sp, #12
 80058aa:	bd30      	pop	{r4, r5, pc}
 80058ac:	20004c50 	.word	0x20004c50

080058b0 <sbrk_aligned>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	4e0e      	ldr	r6, [pc, #56]	; (80058ec <sbrk_aligned+0x3c>)
 80058b4:	460c      	mov	r4, r1
 80058b6:	6831      	ldr	r1, [r6, #0]
 80058b8:	4605      	mov	r5, r0
 80058ba:	b911      	cbnz	r1, 80058c2 <sbrk_aligned+0x12>
 80058bc:	f000 f9d6 	bl	8005c6c <_sbrk_r>
 80058c0:	6030      	str	r0, [r6, #0]
 80058c2:	4621      	mov	r1, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 f9d1 	bl	8005c6c <_sbrk_r>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	d00a      	beq.n	80058e4 <sbrk_aligned+0x34>
 80058ce:	1cc4      	adds	r4, r0, #3
 80058d0:	f024 0403 	bic.w	r4, r4, #3
 80058d4:	42a0      	cmp	r0, r4
 80058d6:	d007      	beq.n	80058e8 <sbrk_aligned+0x38>
 80058d8:	1a21      	subs	r1, r4, r0
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 f9c6 	bl	8005c6c <_sbrk_r>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d101      	bne.n	80058e8 <sbrk_aligned+0x38>
 80058e4:	f04f 34ff 	mov.w	r4, #4294967295
 80058e8:	4620      	mov	r0, r4
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	20004c54 	.word	0x20004c54

080058f0 <_malloc_r>:
 80058f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f4:	1ccd      	adds	r5, r1, #3
 80058f6:	f025 0503 	bic.w	r5, r5, #3
 80058fa:	3508      	adds	r5, #8
 80058fc:	2d0c      	cmp	r5, #12
 80058fe:	bf38      	it	cc
 8005900:	250c      	movcc	r5, #12
 8005902:	2d00      	cmp	r5, #0
 8005904:	4607      	mov	r7, r0
 8005906:	db01      	blt.n	800590c <_malloc_r+0x1c>
 8005908:	42a9      	cmp	r1, r5
 800590a:	d905      	bls.n	8005918 <_malloc_r+0x28>
 800590c:	230c      	movs	r3, #12
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	2600      	movs	r6, #0
 8005912:	4630      	mov	r0, r6
 8005914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005918:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059ec <_malloc_r+0xfc>
 800591c:	f000 f868 	bl	80059f0 <__malloc_lock>
 8005920:	f8d8 3000 	ldr.w	r3, [r8]
 8005924:	461c      	mov	r4, r3
 8005926:	bb5c      	cbnz	r4, 8005980 <_malloc_r+0x90>
 8005928:	4629      	mov	r1, r5
 800592a:	4638      	mov	r0, r7
 800592c:	f7ff ffc0 	bl	80058b0 <sbrk_aligned>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	4604      	mov	r4, r0
 8005934:	d155      	bne.n	80059e2 <_malloc_r+0xf2>
 8005936:	f8d8 4000 	ldr.w	r4, [r8]
 800593a:	4626      	mov	r6, r4
 800593c:	2e00      	cmp	r6, #0
 800593e:	d145      	bne.n	80059cc <_malloc_r+0xdc>
 8005940:	2c00      	cmp	r4, #0
 8005942:	d048      	beq.n	80059d6 <_malloc_r+0xe6>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	4631      	mov	r1, r6
 8005948:	4638      	mov	r0, r7
 800594a:	eb04 0903 	add.w	r9, r4, r3
 800594e:	f000 f98d 	bl	8005c6c <_sbrk_r>
 8005952:	4581      	cmp	r9, r0
 8005954:	d13f      	bne.n	80059d6 <_malloc_r+0xe6>
 8005956:	6821      	ldr	r1, [r4, #0]
 8005958:	1a6d      	subs	r5, r5, r1
 800595a:	4629      	mov	r1, r5
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff ffa7 	bl	80058b0 <sbrk_aligned>
 8005962:	3001      	adds	r0, #1
 8005964:	d037      	beq.n	80059d6 <_malloc_r+0xe6>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	442b      	add	r3, r5
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	f8d8 3000 	ldr.w	r3, [r8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d038      	beq.n	80059e6 <_malloc_r+0xf6>
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	42a2      	cmp	r2, r4
 8005978:	d12b      	bne.n	80059d2 <_malloc_r+0xe2>
 800597a:	2200      	movs	r2, #0
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	e00f      	b.n	80059a0 <_malloc_r+0xb0>
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	1b52      	subs	r2, r2, r5
 8005984:	d41f      	bmi.n	80059c6 <_malloc_r+0xd6>
 8005986:	2a0b      	cmp	r2, #11
 8005988:	d917      	bls.n	80059ba <_malloc_r+0xca>
 800598a:	1961      	adds	r1, r4, r5
 800598c:	42a3      	cmp	r3, r4
 800598e:	6025      	str	r5, [r4, #0]
 8005990:	bf18      	it	ne
 8005992:	6059      	strne	r1, [r3, #4]
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	bf08      	it	eq
 8005998:	f8c8 1000 	streq.w	r1, [r8]
 800599c:	5162      	str	r2, [r4, r5]
 800599e:	604b      	str	r3, [r1, #4]
 80059a0:	4638      	mov	r0, r7
 80059a2:	f104 060b 	add.w	r6, r4, #11
 80059a6:	f000 f829 	bl	80059fc <__malloc_unlock>
 80059aa:	f026 0607 	bic.w	r6, r6, #7
 80059ae:	1d23      	adds	r3, r4, #4
 80059b0:	1af2      	subs	r2, r6, r3
 80059b2:	d0ae      	beq.n	8005912 <_malloc_r+0x22>
 80059b4:	1b9b      	subs	r3, r3, r6
 80059b6:	50a3      	str	r3, [r4, r2]
 80059b8:	e7ab      	b.n	8005912 <_malloc_r+0x22>
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	6862      	ldr	r2, [r4, #4]
 80059be:	d1dd      	bne.n	800597c <_malloc_r+0x8c>
 80059c0:	f8c8 2000 	str.w	r2, [r8]
 80059c4:	e7ec      	b.n	80059a0 <_malloc_r+0xb0>
 80059c6:	4623      	mov	r3, r4
 80059c8:	6864      	ldr	r4, [r4, #4]
 80059ca:	e7ac      	b.n	8005926 <_malloc_r+0x36>
 80059cc:	4634      	mov	r4, r6
 80059ce:	6876      	ldr	r6, [r6, #4]
 80059d0:	e7b4      	b.n	800593c <_malloc_r+0x4c>
 80059d2:	4613      	mov	r3, r2
 80059d4:	e7cc      	b.n	8005970 <_malloc_r+0x80>
 80059d6:	230c      	movs	r3, #12
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	4638      	mov	r0, r7
 80059dc:	f000 f80e 	bl	80059fc <__malloc_unlock>
 80059e0:	e797      	b.n	8005912 <_malloc_r+0x22>
 80059e2:	6025      	str	r5, [r4, #0]
 80059e4:	e7dc      	b.n	80059a0 <_malloc_r+0xb0>
 80059e6:	605b      	str	r3, [r3, #4]
 80059e8:	deff      	udf	#255	; 0xff
 80059ea:	bf00      	nop
 80059ec:	20004c50 	.word	0x20004c50

080059f0 <__malloc_lock>:
 80059f0:	4801      	ldr	r0, [pc, #4]	; (80059f8 <__malloc_lock+0x8>)
 80059f2:	f7ff bf00 	b.w	80057f6 <__retarget_lock_acquire_recursive>
 80059f6:	bf00      	nop
 80059f8:	20004c4c 	.word	0x20004c4c

080059fc <__malloc_unlock>:
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <__malloc_unlock+0x8>)
 80059fe:	f7ff befb 	b.w	80057f8 <__retarget_lock_release_recursive>
 8005a02:	bf00      	nop
 8005a04:	20004c4c 	.word	0x20004c4c

08005a08 <__sflush_r>:
 8005a08:	898a      	ldrh	r2, [r1, #12]
 8005a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	4605      	mov	r5, r0
 8005a10:	0710      	lsls	r0, r2, #28
 8005a12:	460c      	mov	r4, r1
 8005a14:	d458      	bmi.n	8005ac8 <__sflush_r+0xc0>
 8005a16:	684b      	ldr	r3, [r1, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	dc05      	bgt.n	8005a28 <__sflush_r+0x20>
 8005a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	dc02      	bgt.n	8005a28 <__sflush_r+0x20>
 8005a22:	2000      	movs	r0, #0
 8005a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a2a:	2e00      	cmp	r6, #0
 8005a2c:	d0f9      	beq.n	8005a22 <__sflush_r+0x1a>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a34:	682f      	ldr	r7, [r5, #0]
 8005a36:	6a21      	ldr	r1, [r4, #32]
 8005a38:	602b      	str	r3, [r5, #0]
 8005a3a:	d032      	beq.n	8005aa2 <__sflush_r+0x9a>
 8005a3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	075a      	lsls	r2, r3, #29
 8005a42:	d505      	bpl.n	8005a50 <__sflush_r+0x48>
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	1ac0      	subs	r0, r0, r3
 8005a48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a4a:	b10b      	cbz	r3, 8005a50 <__sflush_r+0x48>
 8005a4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a4e:	1ac0      	subs	r0, r0, r3
 8005a50:	2300      	movs	r3, #0
 8005a52:	4602      	mov	r2, r0
 8005a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a56:	6a21      	ldr	r1, [r4, #32]
 8005a58:	4628      	mov	r0, r5
 8005a5a:	47b0      	blx	r6
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	d106      	bne.n	8005a70 <__sflush_r+0x68>
 8005a62:	6829      	ldr	r1, [r5, #0]
 8005a64:	291d      	cmp	r1, #29
 8005a66:	d82b      	bhi.n	8005ac0 <__sflush_r+0xb8>
 8005a68:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <__sflush_r+0x108>)
 8005a6a:	410a      	asrs	r2, r1
 8005a6c:	07d6      	lsls	r6, r2, #31
 8005a6e:	d427      	bmi.n	8005ac0 <__sflush_r+0xb8>
 8005a70:	2200      	movs	r2, #0
 8005a72:	6062      	str	r2, [r4, #4]
 8005a74:	04d9      	lsls	r1, r3, #19
 8005a76:	6922      	ldr	r2, [r4, #16]
 8005a78:	6022      	str	r2, [r4, #0]
 8005a7a:	d504      	bpl.n	8005a86 <__sflush_r+0x7e>
 8005a7c:	1c42      	adds	r2, r0, #1
 8005a7e:	d101      	bne.n	8005a84 <__sflush_r+0x7c>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	b903      	cbnz	r3, 8005a86 <__sflush_r+0x7e>
 8005a84:	6560      	str	r0, [r4, #84]	; 0x54
 8005a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a88:	602f      	str	r7, [r5, #0]
 8005a8a:	2900      	cmp	r1, #0
 8005a8c:	d0c9      	beq.n	8005a22 <__sflush_r+0x1a>
 8005a8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a92:	4299      	cmp	r1, r3
 8005a94:	d002      	beq.n	8005a9c <__sflush_r+0x94>
 8005a96:	4628      	mov	r0, r5
 8005a98:	f7ff febe 	bl	8005818 <_free_r>
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	6360      	str	r0, [r4, #52]	; 0x34
 8005aa0:	e7c0      	b.n	8005a24 <__sflush_r+0x1c>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b0      	blx	r6
 8005aa8:	1c41      	adds	r1, r0, #1
 8005aaa:	d1c8      	bne.n	8005a3e <__sflush_r+0x36>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0c5      	beq.n	8005a3e <__sflush_r+0x36>
 8005ab2:	2b1d      	cmp	r3, #29
 8005ab4:	d001      	beq.n	8005aba <__sflush_r+0xb2>
 8005ab6:	2b16      	cmp	r3, #22
 8005ab8:	d101      	bne.n	8005abe <__sflush_r+0xb6>
 8005aba:	602f      	str	r7, [r5, #0]
 8005abc:	e7b1      	b.n	8005a22 <__sflush_r+0x1a>
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	e7ad      	b.n	8005a24 <__sflush_r+0x1c>
 8005ac8:	690f      	ldr	r7, [r1, #16]
 8005aca:	2f00      	cmp	r7, #0
 8005acc:	d0a9      	beq.n	8005a22 <__sflush_r+0x1a>
 8005ace:	0793      	lsls	r3, r2, #30
 8005ad0:	680e      	ldr	r6, [r1, #0]
 8005ad2:	bf08      	it	eq
 8005ad4:	694b      	ldreq	r3, [r1, #20]
 8005ad6:	600f      	str	r7, [r1, #0]
 8005ad8:	bf18      	it	ne
 8005ada:	2300      	movne	r3, #0
 8005adc:	eba6 0807 	sub.w	r8, r6, r7
 8005ae0:	608b      	str	r3, [r1, #8]
 8005ae2:	f1b8 0f00 	cmp.w	r8, #0
 8005ae6:	dd9c      	ble.n	8005a22 <__sflush_r+0x1a>
 8005ae8:	6a21      	ldr	r1, [r4, #32]
 8005aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005aec:	4643      	mov	r3, r8
 8005aee:	463a      	mov	r2, r7
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b0      	blx	r6
 8005af4:	2800      	cmp	r0, #0
 8005af6:	dc06      	bgt.n	8005b06 <__sflush_r+0xfe>
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295
 8005b04:	e78e      	b.n	8005a24 <__sflush_r+0x1c>
 8005b06:	4407      	add	r7, r0
 8005b08:	eba8 0800 	sub.w	r8, r8, r0
 8005b0c:	e7e9      	b.n	8005ae2 <__sflush_r+0xda>
 8005b0e:	bf00      	nop
 8005b10:	dfbffffe 	.word	0xdfbffffe

08005b14 <_fflush_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	690b      	ldr	r3, [r1, #16]
 8005b18:	4605      	mov	r5, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	b913      	cbnz	r3, 8005b24 <_fflush_r+0x10>
 8005b1e:	2500      	movs	r5, #0
 8005b20:	4628      	mov	r0, r5
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	b118      	cbz	r0, 8005b2e <_fflush_r+0x1a>
 8005b26:	6a03      	ldr	r3, [r0, #32]
 8005b28:	b90b      	cbnz	r3, 8005b2e <_fflush_r+0x1a>
 8005b2a:	f7ff fc2b 	bl	8005384 <__sinit>
 8005b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f3      	beq.n	8005b1e <_fflush_r+0xa>
 8005b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b38:	07d0      	lsls	r0, r2, #31
 8005b3a:	d404      	bmi.n	8005b46 <_fflush_r+0x32>
 8005b3c:	0599      	lsls	r1, r3, #22
 8005b3e:	d402      	bmi.n	8005b46 <_fflush_r+0x32>
 8005b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b42:	f7ff fe58 	bl	80057f6 <__retarget_lock_acquire_recursive>
 8005b46:	4628      	mov	r0, r5
 8005b48:	4621      	mov	r1, r4
 8005b4a:	f7ff ff5d 	bl	8005a08 <__sflush_r>
 8005b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b50:	07da      	lsls	r2, r3, #31
 8005b52:	4605      	mov	r5, r0
 8005b54:	d4e4      	bmi.n	8005b20 <_fflush_r+0xc>
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	059b      	lsls	r3, r3, #22
 8005b5a:	d4e1      	bmi.n	8005b20 <_fflush_r+0xc>
 8005b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b5e:	f7ff fe4b 	bl	80057f8 <__retarget_lock_release_recursive>
 8005b62:	e7dd      	b.n	8005b20 <_fflush_r+0xc>

08005b64 <__swhatbuf_r>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	460c      	mov	r4, r1
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	b096      	sub	sp, #88	; 0x58
 8005b70:	4615      	mov	r5, r2
 8005b72:	461e      	mov	r6, r3
 8005b74:	da0d      	bge.n	8005b92 <__swhatbuf_r+0x2e>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b7c:	f04f 0100 	mov.w	r1, #0
 8005b80:	bf0c      	ite	eq
 8005b82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005b86:	2340      	movne	r3, #64	; 0x40
 8005b88:	2000      	movs	r0, #0
 8005b8a:	6031      	str	r1, [r6, #0]
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	b016      	add	sp, #88	; 0x58
 8005b90:	bd70      	pop	{r4, r5, r6, pc}
 8005b92:	466a      	mov	r2, sp
 8005b94:	f000 f848 	bl	8005c28 <_fstat_r>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	dbec      	blt.n	8005b76 <__swhatbuf_r+0x12>
 8005b9c:	9901      	ldr	r1, [sp, #4]
 8005b9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ba2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005ba6:	4259      	negs	r1, r3
 8005ba8:	4159      	adcs	r1, r3
 8005baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bae:	e7eb      	b.n	8005b88 <__swhatbuf_r+0x24>

08005bb0 <__smakebuf_r>:
 8005bb0:	898b      	ldrh	r3, [r1, #12]
 8005bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bb4:	079d      	lsls	r5, r3, #30
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	d507      	bpl.n	8005bcc <__smakebuf_r+0x1c>
 8005bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	6163      	str	r3, [r4, #20]
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	ab01      	add	r3, sp, #4
 8005bce:	466a      	mov	r2, sp
 8005bd0:	f7ff ffc8 	bl	8005b64 <__swhatbuf_r>
 8005bd4:	9900      	ldr	r1, [sp, #0]
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7ff fe89 	bl	80058f0 <_malloc_r>
 8005bde:	b948      	cbnz	r0, 8005bf4 <__smakebuf_r+0x44>
 8005be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be4:	059a      	lsls	r2, r3, #22
 8005be6:	d4ef      	bmi.n	8005bc8 <__smakebuf_r+0x18>
 8005be8:	f023 0303 	bic.w	r3, r3, #3
 8005bec:	f043 0302 	orr.w	r3, r3, #2
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	e7e3      	b.n	8005bbc <__smakebuf_r+0xc>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	6020      	str	r0, [r4, #0]
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	9b00      	ldr	r3, [sp, #0]
 8005c00:	6163      	str	r3, [r4, #20]
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	6120      	str	r0, [r4, #16]
 8005c06:	b15b      	cbz	r3, 8005c20 <__smakebuf_r+0x70>
 8005c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f000 f81d 	bl	8005c4c <_isatty_r>
 8005c12:	b128      	cbz	r0, 8005c20 <__smakebuf_r+0x70>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	431d      	orrs	r5, r3
 8005c24:	81a5      	strh	r5, [r4, #12]
 8005c26:	e7cf      	b.n	8005bc8 <__smakebuf_r+0x18>

08005c28 <_fstat_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4d07      	ldr	r5, [pc, #28]	; (8005c48 <_fstat_r+0x20>)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	4611      	mov	r1, r2
 8005c34:	602b      	str	r3, [r5, #0]
 8005c36:	f7fa fece 	bl	80009d6 <_fstat>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	d102      	bne.n	8005c44 <_fstat_r+0x1c>
 8005c3e:	682b      	ldr	r3, [r5, #0]
 8005c40:	b103      	cbz	r3, 8005c44 <_fstat_r+0x1c>
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	bd38      	pop	{r3, r4, r5, pc}
 8005c46:	bf00      	nop
 8005c48:	20004c48 	.word	0x20004c48

08005c4c <_isatty_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d06      	ldr	r5, [pc, #24]	; (8005c68 <_isatty_r+0x1c>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fa fecd 	bl	80009f6 <_isatty>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_isatty_r+0x1a>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_isatty_r+0x1a>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20004c48 	.word	0x20004c48

08005c6c <_sbrk_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d06      	ldr	r5, [pc, #24]	; (8005c88 <_sbrk_r+0x1c>)
 8005c70:	2300      	movs	r3, #0
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	f7fa fed6 	bl	8000a28 <_sbrk>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_sbrk_r+0x1a>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_sbrk_r+0x1a>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	20004c48 	.word	0x20004c48

08005c8c <_init>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr

08005c98 <_fini>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr
