
FreeRTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae0  08004ae0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ae8  08004ae8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b98  20000060  08004b50  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bf8  08004b50  00024bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e51  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002daf  00000000  00000000  00033f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00036cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8b  00000000  00000000  00037e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d40  00000000  00000000  00038bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c1f  00000000  00000000  0003b93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095b9d  00000000  00000000  0004e55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ca0  00000000  00000000  000e40f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e8d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a40 	.word	0x08004a40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004a40 	.word	0x08004a40

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa18 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f824 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f880 	bl	80005ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f001 fc40 	bl	8001d70 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <main+0x3c>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <main+0x40>)
 80004f6:	f001 fc85 	bl	8001e04 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <main+0x44>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <main+0x48>)
 8000502:	2100      	movs	r1, #0
 8000504:	4808      	ldr	r0, [pc, #32]	; (8000528 <main+0x4c>)
 8000506:	f001 fc7d 	bl	8001e04 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <main+0x50>)
 800050e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000510:	f001 fc52 	bl	8001db8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x38>
 8000516:	bf00      	nop
 8000518:	08004a80 	.word	0x08004a80
 800051c:	080006a1 	.word	0x080006a1
 8000520:	2000007c 	.word	0x2000007c
 8000524:	08004aa4 	.word	0x08004aa4
 8000528:	080006c1 	.word	0x080006c1
 800052c:	20000080 	.word	0x20000080

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 f994 	bl	800486c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xb4>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xb4>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xb4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <SystemClock_Config+0xb8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <SystemClock_Config+0xb8>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SystemClock_Config+0xb8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fcb7 	bl	8000f14 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005ac:	f000 f8aa 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 ff1a 	bl	8001404 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005d6:	f000 f895 	bl	8000704 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b23      	ldr	r3, [pc, #140]	; (8000694 <MX_GPIO_Init+0xa8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a22      	ldr	r2, [pc, #136]	; (8000694 <MX_GPIO_Init+0xa8>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_GPIO_Init+0xa8>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_GPIO_Init+0xa8>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <MX_GPIO_Init+0xa8>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_GPIO_Init+0xa8>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4816      	ldr	r0, [pc, #88]	; (8000698 <MX_GPIO_Init+0xac>)
 8000640:	f000 fc10 	bl	8000e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4619      	mov	r1, r3
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <MX_GPIO_Init+0xb0>)
 800065c:	f000 fa7e 	bl	8000b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	4808      	ldr	r0, [pc, #32]	; (8000698 <MX_GPIO_Init+0xac>)
 8000678:	f000 fa70 	bl	8000b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2105      	movs	r1, #5
 8000680:	2028      	movs	r0, #40	; 0x28
 8000682:	f000 fa41 	bl	8000b08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000686:	2028      	movs	r0, #40	; 0x28
 8000688:	f000 fa5a 	bl	8000b40 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40020000 	.word	0x40020000
 800069c:	40020800 	.word	0x40020800

080006a0 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006a8:	2120      	movs	r1, #32
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <StartBlink01+0x1c>)
 80006ac:	f000 fbf3 	bl	8000e96 <HAL_GPIO_TogglePin>
    osDelay(500);
 80006b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b4:	f001 fc38 	bl	8001f28 <osDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006b8:	e7f6      	b.n	80006a8 <StartBlink01+0x8>
 80006ba:	bf00      	nop
 80006bc:	40020000 	.word	0x40020000

080006c0 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006c8:	2120      	movs	r1, #32
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <StartBlink02+0x1c>)
 80006cc:	f000 fbe3 	bl	8000e96 <HAL_GPIO_TogglePin>
    osDelay(600);
 80006d0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80006d4:	f001 fc28 	bl	8001f28 <osDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006d8:	e7f6      	b.n	80006c8 <StartBlink02+0x8>
 80006da:	bf00      	nop
 80006dc:	40020000 	.word	0x40020000

080006e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006f2:	f000 f931 	bl	8000958 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40014400 	.word	0x40014400

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_MspInit+0x54>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <HAL_MspInit+0x54>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x54>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <HAL_MspInit+0x54>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <HAL_MspInit+0x54>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_MspInit+0x54>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	210f      	movs	r1, #15
 8000752:	f06f 0001 	mvn.w	r0, #1
 8000756:	f000 f9d7 	bl	8000b08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <HAL_InitTick+0xd0>)
 800077e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000780:	4a2d      	ldr	r2, [pc, #180]	; (8000838 <HAL_InitTick+0xd0>)
 8000782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000786:	6453      	str	r3, [r2, #68]	; 0x44
 8000788:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <HAL_InitTick+0xd0>)
 800078a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000794:	f107 020c 	add.w	r2, r7, #12
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fffc 	bl	800179c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007a4:	f000 ffe6 	bl	8001774 <HAL_RCC_GetPCLK2Freq>
 80007a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ac:	4a23      	ldr	r2, [pc, #140]	; (800083c <HAL_InitTick+0xd4>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	0c9b      	lsrs	r3, r3, #18
 80007b4:	3b01      	subs	r3, #1
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <HAL_InitTick+0xd8>)
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <HAL_InitTick+0xdc>)
 80007bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <HAL_InitTick+0xd8>)
 80007c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80007c6:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <HAL_InitTick+0xd8>)
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <HAL_InitTick+0xd8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_InitTick+0xd8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_InitTick+0xd8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80007de:	4818      	ldr	r0, [pc, #96]	; (8000840 <HAL_InitTick+0xd8>)
 80007e0:	f001 f80e 	bl	8001800 <HAL_TIM_Base_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d11b      	bne.n	800082a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80007f2:	4813      	ldr	r0, [pc, #76]	; (8000840 <HAL_InitTick+0xd8>)
 80007f4:	f001 f85e 	bl	80018b4 <HAL_TIM_Base_Start_IT>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80007fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000802:	2b00      	cmp	r3, #0
 8000804:	d111      	bne.n	800082a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000806:	2019      	movs	r0, #25
 8000808:	f000 f99a 	bl	8000b40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b0f      	cmp	r3, #15
 8000810:	d808      	bhi.n	8000824 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000812:	2200      	movs	r2, #0
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	2019      	movs	r0, #25
 8000818:	f000 f976 	bl	8000b08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_InitTick+0xe0>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e002      	b.n	800082a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800082a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800082e:	4618      	mov	r0, r3
 8000830:	3730      	adds	r7, #48	; 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	431bde83 	.word	0x431bde83
 8000840:	20000084 	.word	0x20000084
 8000844:	40014400 	.word	0x40014400
 8000848:	20000004 	.word	0x20000004

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800087e:	f001 f87b 	bl	8001978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000084 	.word	0x20000084

0800088c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000890:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000894:	f000 fb1a 	bl	8000ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008c4:	f7ff ffea 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	; (8000900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	; (800090c <LoopFillZerobss+0x22>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f004 f81b 	bl	8004928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fdf3 	bl	80004dc <main>
  bx  lr    
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000904:	08004af0 	.word	0x08004af0
  ldr r2, =_sbss
 8000908:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800090c:	20004bf8 	.word	0x20004bf8

08000910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <HAL_Init+0x40>)
 800091e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_Init+0x40>)
 800092a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x40>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f8d8 	bl	8000af2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f7ff ff10 	bl	8000768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff fee2 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00

08000958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	200000cc 	.word	0x200000cc

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	200000cc 	.word	0x200000cc

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ff4c 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b1a:	f7ff ff61 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	68b9      	ldr	r1, [r7, #8]
 8000b24:	6978      	ldr	r0, [r7, #20]
 8000b26:	f7ff ffb1 	bl	8000a8c <NVIC_EncodePriority>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff80 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff54 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	e159      	b.n	8000e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b78:	2201      	movs	r2, #1
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	f040 8148 	bne.w	8000e26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d005      	beq.n	8000bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d130      	bne.n	8000c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be4:	2201      	movs	r2, #1
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	091b      	lsrs	r3, r3, #4
 8000bfa:	f003 0201 	and.w	r2, r3, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d017      	beq.n	8000c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d123      	bne.n	8000ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	08da      	lsrs	r2, r3, #3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	691a      	ldr	r2, [r3, #16]
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3208      	adds	r2, #8
 8000c9a:	69b9      	ldr	r1, [r7, #24]
 8000c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0203 	and.w	r2, r3, #3
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f000 80a2 	beq.w	8000e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b57      	ldr	r3, [pc, #348]	; (8000e44 <HAL_GPIO_Init+0x2e8>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a56      	ldr	r2, [pc, #344]	; (8000e44 <HAL_GPIO_Init+0x2e8>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b54      	ldr	r3, [pc, #336]	; (8000e44 <HAL_GPIO_Init+0x2e8>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cfe:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <HAL_GPIO_Init+0x2ec>)
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	3302      	adds	r3, #2
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	220f      	movs	r2, #15
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a49      	ldr	r2, [pc, #292]	; (8000e4c <HAL_GPIO_Init+0x2f0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d019      	beq.n	8000d5e <HAL_GPIO_Init+0x202>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a48      	ldr	r2, [pc, #288]	; (8000e50 <HAL_GPIO_Init+0x2f4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d013      	beq.n	8000d5a <HAL_GPIO_Init+0x1fe>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a47      	ldr	r2, [pc, #284]	; (8000e54 <HAL_GPIO_Init+0x2f8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_GPIO_Init+0x1fa>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a46      	ldr	r2, [pc, #280]	; (8000e58 <HAL_GPIO_Init+0x2fc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d007      	beq.n	8000d52 <HAL_GPIO_Init+0x1f6>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a45      	ldr	r2, [pc, #276]	; (8000e5c <HAL_GPIO_Init+0x300>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x1f2>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e008      	b.n	8000d60 <HAL_GPIO_Init+0x204>
 8000d4e:	2307      	movs	r3, #7
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x204>
 8000d52:	2303      	movs	r3, #3
 8000d54:	e004      	b.n	8000d60 <HAL_GPIO_Init+0x204>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e002      	b.n	8000d60 <HAL_GPIO_Init+0x204>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <HAL_GPIO_Init+0x204>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	f002 0203 	and.w	r2, r2, #3
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	4093      	lsls	r3, r2
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d70:	4935      	ldr	r1, [pc, #212]	; (8000e48 <HAL_GPIO_Init+0x2ec>)
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3302      	adds	r3, #2
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7e:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <HAL_GPIO_Init+0x304>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000da2:	4a2f      	ldr	r2, [pc, #188]	; (8000e60 <HAL_GPIO_Init+0x304>)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_GPIO_Init+0x304>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dcc:	4a24      	ldr	r2, [pc, #144]	; (8000e60 <HAL_GPIO_Init+0x304>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_GPIO_Init+0x304>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000df6:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <HAL_GPIO_Init+0x304>)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_GPIO_Init+0x304>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e20:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <HAL_GPIO_Init+0x304>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	2b0f      	cmp	r3, #15
 8000e30:	f67f aea2 	bls.w	8000b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40013800 	.word	0x40013800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40013c00 	.word	0x40013c00

08000e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
 8000e70:	4613      	mov	r3, r2
 8000e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e74:	787b      	ldrb	r3, [r7, #1]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e7a:	887a      	ldrh	r2, [r7, #2]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e80:	e003      	b.n	8000e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	041a      	lsls	r2, r3, #16
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	619a      	str	r2, [r3, #24]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ea8:	887a      	ldrh	r2, [r7, #2]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4013      	ands	r3, r2
 8000eae:	041a      	lsls	r2, r3, #16
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	400b      	ands	r3, r1
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ed8:	695a      	ldr	r2, [r3, #20]
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d006      	beq.n	8000ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f806 	bl	8000efc <HAL_GPIO_EXTI_Callback>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40013c00 	.word	0x40013c00

08000efc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e267      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d075      	beq.n	800101e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f32:	4b88      	ldr	r3, [pc, #544]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d00c      	beq.n	8000f58 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f3e:	4b85      	ldr	r3, [pc, #532]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d112      	bne.n	8000f70 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f4a:	4b82      	ldr	r3, [pc, #520]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f56:	d10b      	bne.n	8000f70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f58:	4b7e      	ldr	r3, [pc, #504]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d05b      	beq.n	800101c <HAL_RCC_OscConfig+0x108>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d157      	bne.n	800101c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e242      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f78:	d106      	bne.n	8000f88 <HAL_RCC_OscConfig+0x74>
 8000f7a:	4b76      	ldr	r3, [pc, #472]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a75      	ldr	r2, [pc, #468]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e01d      	b.n	8000fc4 <HAL_RCC_OscConfig+0xb0>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f90:	d10c      	bne.n	8000fac <HAL_RCC_OscConfig+0x98>
 8000f92:	4b70      	ldr	r3, [pc, #448]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6f      	ldr	r2, [pc, #444]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b6d      	ldr	r3, [pc, #436]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a6c      	ldr	r2, [pc, #432]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e00b      	b.n	8000fc4 <HAL_RCC_OscConfig+0xb0>
 8000fac:	4b69      	ldr	r3, [pc, #420]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a68      	ldr	r2, [pc, #416]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b66      	ldr	r3, [pc, #408]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a65      	ldr	r2, [pc, #404]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d013      	beq.n	8000ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fcd8 	bl	8000980 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fcd4 	bl	8000980 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b64      	cmp	r3, #100	; 0x64
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e207      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe6:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0f0      	beq.n	8000fd4 <HAL_RCC_OscConfig+0xc0>
 8000ff2:	e014      	b.n	800101e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fcc4 	bl	8000980 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fcc0 	bl	8000980 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	; 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e1f3      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100e:	4b51      	ldr	r3, [pc, #324]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f0      	bne.n	8000ffc <HAL_RCC_OscConfig+0xe8>
 800101a:	e000      	b.n	800101e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d063      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800102a:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00b      	beq.n	800104e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001036:	4b47      	ldr	r3, [pc, #284]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800103e:	2b08      	cmp	r3, #8
 8001040:	d11c      	bne.n	800107c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001042:	4b44      	ldr	r3, [pc, #272]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d116      	bne.n	800107c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104e:	4b41      	ldr	r3, [pc, #260]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d005      	beq.n	8001066 <HAL_RCC_OscConfig+0x152>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d001      	beq.n	8001066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e1c7      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4937      	ldr	r1, [pc, #220]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8001076:	4313      	orrs	r3, r2
 8001078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	e03a      	b.n	80010f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d020      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001084:	4b34      	ldr	r3, [pc, #208]	; (8001158 <HAL_RCC_OscConfig+0x244>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108a:	f7ff fc79 	bl	8000980 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fc75 	bl	8000980 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e1a8      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0f0      	beq.n	8001092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	4925      	ldr	r1, [pc, #148]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
 80010c4:	e015      	b.n	80010f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c6:	4b24      	ldr	r3, [pc, #144]	; (8001158 <HAL_RCC_OscConfig+0x244>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fc58 	bl	8000980 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d4:	f7ff fc54 	bl	8000980 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e187      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d036      	beq.n	800116c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d016      	beq.n	8001134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_RCC_OscConfig+0x248>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110c:	f7ff fc38 	bl	8000980 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001114:	f7ff fc34 	bl	8000980 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e167      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_RCC_OscConfig+0x240>)
 8001128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0x200>
 8001132:	e01b      	b.n	800116c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_RCC_OscConfig+0x248>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff fc21 	bl	8000980 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	e00e      	b.n	8001160 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001142:	f7ff fc1d 	bl	8000980 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d907      	bls.n	8001160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e150      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
 8001154:	40023800 	.word	0x40023800
 8001158:	42470000 	.word	0x42470000
 800115c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001160:	4b88      	ldr	r3, [pc, #544]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1ea      	bne.n	8001142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 8097 	beq.w	80012a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117e:	4b81      	ldr	r3, [pc, #516]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10f      	bne.n	80011aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b7d      	ldr	r3, [pc, #500]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a7c      	ldr	r2, [pc, #496]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b7a      	ldr	r3, [pc, #488]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011aa:	4b77      	ldr	r3, [pc, #476]	; (8001388 <HAL_RCC_OscConfig+0x474>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d118      	bne.n	80011e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b6:	4b74      	ldr	r3, [pc, #464]	; (8001388 <HAL_RCC_OscConfig+0x474>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a73      	ldr	r2, [pc, #460]	; (8001388 <HAL_RCC_OscConfig+0x474>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fbdd 	bl	8000980 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ca:	f7ff fbd9 	bl	8000980 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e10c      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <HAL_RCC_OscConfig+0x474>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x2ea>
 80011f0:	4b64      	ldr	r3, [pc, #400]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f4:	4a63      	ldr	r2, [pc, #396]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6713      	str	r3, [r2, #112]	; 0x70
 80011fc:	e01c      	b.n	8001238 <HAL_RCC_OscConfig+0x324>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b05      	cmp	r3, #5
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x30c>
 8001206:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120a:	4a5e      	ldr	r2, [pc, #376]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6713      	str	r3, [r2, #112]	; 0x70
 8001212:	4b5c      	ldr	r3, [pc, #368]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001216:	4a5b      	ldr	r2, [pc, #364]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6713      	str	r3, [r2, #112]	; 0x70
 800121e:	e00b      	b.n	8001238 <HAL_RCC_OscConfig+0x324>
 8001220:	4b58      	ldr	r3, [pc, #352]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001224:	4a57      	ldr	r2, [pc, #348]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	6713      	str	r3, [r2, #112]	; 0x70
 800122c:	4b55      	ldr	r3, [pc, #340]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 800122e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001230:	4a54      	ldr	r2, [pc, #336]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001232:	f023 0304 	bic.w	r3, r3, #4
 8001236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d015      	beq.n	800126c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001240:	f7ff fb9e 	bl	8000980 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001246:	e00a      	b.n	800125e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001248:	f7ff fb9a 	bl	8000980 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f241 3288 	movw	r2, #5000	; 0x1388
 8001256:	4293      	cmp	r3, r2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e0cb      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125e:	4b49      	ldr	r3, [pc, #292]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0ee      	beq.n	8001248 <HAL_RCC_OscConfig+0x334>
 800126a:	e014      	b.n	8001296 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126c:	f7ff fb88 	bl	8000980 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001272:	e00a      	b.n	800128a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f7ff fb84 	bl	8000980 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e0b5      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128a:	4b3e      	ldr	r3, [pc, #248]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1ee      	bne.n	8001274 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d105      	bne.n	80012a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a38      	ldr	r2, [pc, #224]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 80012a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80a1 	beq.w	80013f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012b2:	4b34      	ldr	r3, [pc, #208]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d05c      	beq.n	8001378 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d141      	bne.n	800134a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c6:	4b31      	ldr	r3, [pc, #196]	; (800138c <HAL_RCC_OscConfig+0x478>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fb58 	bl	8000980 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fb54 	bl	8000980 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e087      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69da      	ldr	r2, [r3, #28]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	019b      	lsls	r3, r3, #6
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	085b      	lsrs	r3, r3, #1
 800130a:	3b01      	subs	r3, #1
 800130c:	041b      	lsls	r3, r3, #16
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	061b      	lsls	r3, r3, #24
 8001316:	491b      	ldr	r1, [pc, #108]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_RCC_OscConfig+0x478>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff fb2d 	bl	8000980 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132a:	f7ff fb29 	bl	8000980 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e05c      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x416>
 8001348:	e054      	b.n	80013f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_RCC_OscConfig+0x478>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb16 	bl	8000980 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff fb12 	bl	8000980 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e045      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_RCC_OscConfig+0x470>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x444>
 8001376:	e03d      	b.n	80013f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d107      	bne.n	8001390 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e038      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
 8001384:	40023800 	.word	0x40023800
 8001388:	40007000 	.word	0x40007000
 800138c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_RCC_OscConfig+0x4ec>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d028      	beq.n	80013f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d121      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d11a      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013c0:	4013      	ands	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d111      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	085b      	lsrs	r3, r3, #1
 80013d8:	3b01      	subs	r3, #1
 80013da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013dc:	429a      	cmp	r2, r3
 80013de:	d107      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0cc      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d90c      	bls.n	8001440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001426:	4b65      	ldr	r3, [pc, #404]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0b8      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d020      	beq.n	800148e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001458:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001462:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001470:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800147a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	494d      	ldr	r1, [pc, #308]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	4313      	orrs	r3, r2
 800148c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d044      	beq.n	8001524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d119      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e07f      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d003      	beq.n	80014c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e06f      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e067      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f023 0203 	bic.w	r2, r3, #3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4934      	ldr	r1, [pc, #208]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f4:	f7ff fa44 	bl	8000980 <HAL_GetTick>
 80014f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fa:	e00a      	b.n	8001512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014fc:	f7ff fa40 	bl	8000980 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	; 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e04f      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 020c 	and.w	r2, r3, #12
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	429a      	cmp	r2, r3
 8001522:	d1eb      	bne.n	80014fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001524:	4b25      	ldr	r3, [pc, #148]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d20c      	bcs.n	800154c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e032      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4916      	ldr	r1, [pc, #88]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	490e      	ldr	r1, [pc, #56]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800158a:	f000 f821 	bl	80015d0 <HAL_RCC_GetSysClockFreq>
 800158e:	4602      	mov	r2, r0
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	490a      	ldr	r1, [pc, #40]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	5ccb      	ldrb	r3, [r1, r3]
 800159e:	fa22 f303 	lsr.w	r3, r2, r3
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1c8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff f8dc 	bl	8000768 <HAL_InitTick>

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00
 80015c0:	40023800 	.word	0x40023800
 80015c4:	08004ac8 	.word	0x08004ac8
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015d4:	b090      	sub	sp, #64	; 0x40
 80015d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015e8:	4b59      	ldr	r3, [pc, #356]	; (8001750 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d00d      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x40>
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	f200 80a1 	bhi.w	800173c <HAL_RCC_GetSysClockFreq+0x16c>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <HAL_RCC_GetSysClockFreq+0x34>
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d003      	beq.n	800160a <HAL_RCC_GetSysClockFreq+0x3a>
 8001602:	e09b      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001604:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_GetSysClockFreq+0x184>)
 8001606:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001608:	e09b      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800160a:	4b53      	ldr	r3, [pc, #332]	; (8001758 <HAL_RCC_GetSysClockFreq+0x188>)
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800160e:	e098      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001610:	4b4f      	ldr	r3, [pc, #316]	; (8001750 <HAL_RCC_GetSysClockFreq+0x180>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161a:	4b4d      	ldr	r3, [pc, #308]	; (8001750 <HAL_RCC_GetSysClockFreq+0x180>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d028      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <HAL_RCC_GetSysClockFreq+0x180>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	099b      	lsrs	r3, r3, #6
 800162c:	2200      	movs	r2, #0
 800162e:	623b      	str	r3, [r7, #32]
 8001630:	627a      	str	r2, [r7, #36]	; 0x24
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001638:	2100      	movs	r1, #0
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_GetSysClockFreq+0x188>)
 800163c:	fb03 f201 	mul.w	r2, r3, r1
 8001640:	2300      	movs	r3, #0
 8001642:	fb00 f303 	mul.w	r3, r0, r3
 8001646:	4413      	add	r3, r2
 8001648:	4a43      	ldr	r2, [pc, #268]	; (8001758 <HAL_RCC_GetSysClockFreq+0x188>)
 800164a:	fba0 1202 	umull	r1, r2, r0, r2
 800164e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001650:	460a      	mov	r2, r1
 8001652:	62ba      	str	r2, [r7, #40]	; 0x28
 8001654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001656:	4413      	add	r3, r2
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165c:	2200      	movs	r2, #0
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	61fa      	str	r2, [r7, #28]
 8001662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001666:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800166a:	f7fe fdb9 	bl	80001e0 <__aeabi_uldivmod>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4613      	mov	r3, r2
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001676:	e053      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <HAL_RCC_GetSysClockFreq+0x180>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	2200      	movs	r2, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	617a      	str	r2, [r7, #20]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800168a:	f04f 0b00 	mov.w	fp, #0
 800168e:	4652      	mov	r2, sl
 8001690:	465b      	mov	r3, fp
 8001692:	f04f 0000 	mov.w	r0, #0
 8001696:	f04f 0100 	mov.w	r1, #0
 800169a:	0159      	lsls	r1, r3, #5
 800169c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a0:	0150      	lsls	r0, r2, #5
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	ebb2 080a 	subs.w	r8, r2, sl
 80016aa:	eb63 090b 	sbc.w	r9, r3, fp
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016c2:	ebb2 0408 	subs.w	r4, r2, r8
 80016c6:	eb63 0509 	sbc.w	r5, r3, r9
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	00eb      	lsls	r3, r5, #3
 80016d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016d8:	00e2      	lsls	r2, r4, #3
 80016da:	4614      	mov	r4, r2
 80016dc:	461d      	mov	r5, r3
 80016de:	eb14 030a 	adds.w	r3, r4, sl
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	eb45 030b 	adc.w	r3, r5, fp
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016f6:	4629      	mov	r1, r5
 80016f8:	028b      	lsls	r3, r1, #10
 80016fa:	4621      	mov	r1, r4
 80016fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001700:	4621      	mov	r1, r4
 8001702:	028a      	lsls	r2, r1, #10
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170a:	2200      	movs	r2, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	60fa      	str	r2, [r7, #12]
 8001710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001714:	f7fe fd64 	bl	80001e0 <__aeabi_uldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4613      	mov	r3, r2
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_GetSysClockFreq+0x180>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	0c1b      	lsrs	r3, r3, #16
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	3301      	adds	r3, #1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800173a:	e002      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_RCC_GetSysClockFreq+0x184>)
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001744:	4618      	mov	r0, r3
 8001746:	3740      	adds	r7, #64	; 0x40
 8001748:	46bd      	mov	sp, r7
 800174a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	00f42400 	.word	0x00f42400
 8001758:	017d7840 	.word	0x017d7840

0800175c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_RCC_GetHCLKFreq+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000000 	.word	0x20000000

08001774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001778:	f7ff fff0 	bl	800175c <HAL_RCC_GetHCLKFreq>
 800177c:	4602      	mov	r2, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	0b5b      	lsrs	r3, r3, #13
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4903      	ldr	r1, [pc, #12]	; (8001798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	08004ad8 	.word	0x08004ad8

0800179c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	220f      	movs	r2, #15
 80017aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0203 	and.w	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <HAL_RCC_GetClockConfig+0x60>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0207 	and.w	r2, r3, #7
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	601a      	str	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40023c00 	.word	0x40023c00

08001800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e041      	b.n	8001896 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f839 	bl	800189e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f000 f9b2 	bl	8001ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d001      	beq.n	80018cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e044      	b.n	8001956 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <HAL_TIM_Base_Start_IT+0xb0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d018      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x6c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f6:	d013      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x6c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <HAL_TIM_Base_Start_IT+0xb4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00e      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x6c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a19      	ldr	r2, [pc, #100]	; (800196c <HAL_TIM_Base_Start_IT+0xb8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d009      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x6c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <HAL_TIM_Base_Start_IT+0xbc>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d004      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x6c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a16      	ldr	r2, [pc, #88]	; (8001974 <HAL_TIM_Base_Start_IT+0xc0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d111      	bne.n	8001944 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b06      	cmp	r3, #6
 8001930:	d010      	beq.n	8001954 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001942:	e007      	b.n	8001954 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40010000 	.word	0x40010000
 8001968:	40000400 	.word	0x40000400
 800196c:	40000800 	.word	0x40000800
 8001970:	40000c00 	.word	0x40000c00
 8001974:	40014000 	.word	0x40014000

08001978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d020      	beq.n	80019dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d01b      	beq.n	80019dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0202 	mvn.w	r2, #2
 80019ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f8d2 	bl	8001b6c <HAL_TIM_IC_CaptureCallback>
 80019c8:	e005      	b.n	80019d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f8c4 	bl	8001b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f8d5 	bl	8001b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d020      	beq.n	8001a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01b      	beq.n	8001a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f06f 0204 	mvn.w	r2, #4
 80019f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2202      	movs	r2, #2
 80019fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8ac 	bl	8001b6c <HAL_TIM_IC_CaptureCallback>
 8001a14:	e005      	b.n	8001a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f89e 	bl	8001b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f8af 	bl	8001b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d020      	beq.n	8001a74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01b      	beq.n	8001a74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0208 	mvn.w	r2, #8
 8001a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2204      	movs	r2, #4
 8001a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f886 	bl	8001b6c <HAL_TIM_IC_CaptureCallback>
 8001a60:	e005      	b.n	8001a6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f878 	bl	8001b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f889 	bl	8001b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d020      	beq.n	8001ac0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d01b      	beq.n	8001ac0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f06f 0210 	mvn.w	r2, #16
 8001a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2208      	movs	r2, #8
 8001a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f860 	bl	8001b6c <HAL_TIM_IC_CaptureCallback>
 8001aac:	e005      	b.n	8001aba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f852 	bl	8001b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f863 	bl	8001b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f06f 0201 	mvn.w	r2, #1
 8001adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe fdfe 	bl	80006e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8e6 	bl	8001cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f834 	bl	8001b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00c      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0220 	mvn.w	r2, #32
 8001b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8b8 	bl	8001cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a3a      	ldr	r2, [pc, #232]	; (8001ca4 <TIM_Base_SetConfig+0xfc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00f      	beq.n	8001be0 <TIM_Base_SetConfig+0x38>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc6:	d00b      	beq.n	8001be0 <TIM_Base_SetConfig+0x38>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a37      	ldr	r2, [pc, #220]	; (8001ca8 <TIM_Base_SetConfig+0x100>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <TIM_Base_SetConfig+0x38>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a36      	ldr	r2, [pc, #216]	; (8001cac <TIM_Base_SetConfig+0x104>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <TIM_Base_SetConfig+0x38>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a35      	ldr	r2, [pc, #212]	; (8001cb0 <TIM_Base_SetConfig+0x108>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d108      	bne.n	8001bf2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <TIM_Base_SetConfig+0xfc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01b      	beq.n	8001c32 <TIM_Base_SetConfig+0x8a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c00:	d017      	beq.n	8001c32 <TIM_Base_SetConfig+0x8a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <TIM_Base_SetConfig+0x100>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <TIM_Base_SetConfig+0x8a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a27      	ldr	r2, [pc, #156]	; (8001cac <TIM_Base_SetConfig+0x104>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00f      	beq.n	8001c32 <TIM_Base_SetConfig+0x8a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <TIM_Base_SetConfig+0x108>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00b      	beq.n	8001c32 <TIM_Base_SetConfig+0x8a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <TIM_Base_SetConfig+0x10c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <TIM_Base_SetConfig+0x8a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <TIM_Base_SetConfig+0x110>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d003      	beq.n	8001c32 <TIM_Base_SetConfig+0x8a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <TIM_Base_SetConfig+0x114>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d108      	bne.n	8001c44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <TIM_Base_SetConfig+0xfc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d103      	bne.n	8001c78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d105      	bne.n	8001c96 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f023 0201 	bic.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	611a      	str	r2, [r3, #16]
  }
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40000800 	.word	0x40000800
 8001cb0:	40000c00 	.word	0x40000c00
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	40014400 	.word	0x40014400
 8001cbc:	40014800 	.word	0x40014800

08001cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <__NVIC_SetPriority>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Handler+0x1c>)
 8001d42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001d44:	f001 fd28 	bl	8003798 <xTaskGetSchedulerState>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001d4e:	f002 fb13 	bl	8004378 <xPortSysTickHandler>
  }
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001d60:	2100      	movs	r1, #0
 8001d62:	f06f 0004 	mvn.w	r0, #4
 8001d66:	f7ff ffbf 	bl	8001ce8 <__NVIC_SetPriority>
#endif
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d76:	f3ef 8305 	mrs	r3, IPSR
 8001d7a:	603b      	str	r3, [r7, #0]
  return(result);
 8001d7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001d82:	f06f 0305 	mvn.w	r3, #5
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	e00c      	b.n	8001da4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <osKernelInitialize+0x44>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d105      	bne.n	8001d9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <osKernelInitialize+0x44>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	e002      	b.n	8001da4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001da4:	687b      	ldr	r3, [r7, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	200000d0 	.word	0x200000d0

08001db8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dbe:	f3ef 8305 	mrs	r3, IPSR
 8001dc2:	603b      	str	r3, [r7, #0]
  return(result);
 8001dc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001dca:	f06f 0305 	mvn.w	r3, #5
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	e010      	b.n	8001df4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <osKernelStart+0x48>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d109      	bne.n	8001dee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001dda:	f7ff ffbf 	bl	8001d5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <osKernelStart+0x48>)
 8001de0:	2202      	movs	r2, #2
 8001de2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001de4:	f001 f87c 	bl	8002ee0 <vTaskStartScheduler>
      stat = osOK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e002      	b.n	8001df4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200000d0 	.word	0x200000d0

08001e04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08e      	sub	sp, #56	; 0x38
 8001e08:	af04      	add	r7, sp, #16
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e14:	f3ef 8305 	mrs	r3, IPSR
 8001e18:	617b      	str	r3, [r7, #20]
  return(result);
 8001e1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d17e      	bne.n	8001f1e <osThreadNew+0x11a>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d07b      	beq.n	8001f1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001e2a:	2318      	movs	r3, #24
 8001e2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d045      	beq.n	8001eca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <osThreadNew+0x48>
        name = attr->name;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <osThreadNew+0x6e>
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2b38      	cmp	r3, #56	; 0x38
 8001e64:	d805      	bhi.n	8001e72 <osThreadNew+0x6e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <osThreadNew+0x72>
        return (NULL);
 8001e72:	2300      	movs	r3, #0
 8001e74:	e054      	b.n	8001f20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00e      	beq.n	8001eac <osThreadNew+0xa8>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2ba7      	cmp	r3, #167	; 0xa7
 8001e94:	d90a      	bls.n	8001eac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <osThreadNew+0xa8>
        mem = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	e010      	b.n	8001ece <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10c      	bne.n	8001ece <osThreadNew+0xca>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d108      	bne.n	8001ece <osThreadNew+0xca>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d104      	bne.n	8001ece <osThreadNew+0xca>
          mem = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	e001      	b.n	8001ece <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d110      	bne.n	8001ef6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001edc:	9202      	str	r2, [sp, #8]
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	6a3a      	ldr	r2, [r7, #32]
 8001ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fe0c 	bl	8002b08 <xTaskCreateStatic>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	e013      	b.n	8001f1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d110      	bne.n	8001f1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fe57 	bl	8002bc2 <xTaskCreate>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <osThreadNew+0x11a>
            hTask = NULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f1e:	693b      	ldr	r3, [r7, #16]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f30:	f3ef 8305 	mrs	r3, IPSR
 8001f34:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <osDelay+0x1c>
    stat = osErrorISR;
 8001f3c:	f06f 0305 	mvn.w	r3, #5
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e007      	b.n	8001f54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 ff92 	bl	8002e78 <vTaskDelay>
    }
  }

  return (stat);
 8001f54:	68fb      	ldr	r3, [r7, #12]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <vApplicationGetIdleTaskMemory+0x2c>)
 8001f70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <vApplicationGetIdleTaskMemory+0x30>)
 8001f76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	601a      	str	r2, [r3, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	200000d4 	.word	0x200000d4
 8001f90:	2000017c 	.word	0x2000017c

08001f94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8001fa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <vApplicationGetTimerTaskMemory+0x30>)
 8001faa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb2:	601a      	str	r2, [r3, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	2000037c 	.word	0x2000037c
 8001fc4:	20000424 	.word	0x20000424

08001fc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f103 0208 	add.w	r2, r3, #8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f103 0208 	add.w	r2, r3, #8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f103 0208 	add.w	r2, r3, #8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	601a      	str	r2, [r3, #0]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d103      	bne.n	800208a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e00c      	b.n	80020a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3308      	adds	r3, #8
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e002      	b.n	8002098 <vListInsert+0x2e>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d2f6      	bcs.n	8002092 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6892      	ldr	r2, [r2, #8]
 80020f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6852      	ldr	r2, [r2, #4]
 80020fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	d103      	bne.n	8002110 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10a      	bne.n	800215a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002156:	bf00      	nop
 8002158:	e7fe      	b.n	8002158 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800215a:	f002 f87b 	bl	8004254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	68f9      	ldr	r1, [r7, #12]
 8002168:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	441a      	add	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	3b01      	subs	r3, #1
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	441a      	add	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	22ff      	movs	r2, #255	; 0xff
 800219e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	22ff      	movs	r2, #255	; 0xff
 80021a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d114      	bne.n	80021da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01a      	beq.n	80021ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3310      	adds	r3, #16
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 f929 	bl	8003414 <xTaskRemoveFromEventList>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d012      	beq.n	80021ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <xQueueGenericReset+0xcc>)
 80021ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f3bf 8f4f 	dsb	sy
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	e009      	b.n	80021ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3310      	adds	r3, #16
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fef2 	bl	8001fc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3324      	adds	r3, #36	; 0x24
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff feed 	bl	8001fc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80021ee:	f002 f861 	bl	80042b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80021f2:	2301      	movs	r3, #1
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	e000ed04 	.word	0xe000ed04

08002200 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08e      	sub	sp, #56	; 0x38
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10a      	bne.n	800222a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002226:	bf00      	nop
 8002228:	e7fe      	b.n	8002228 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002242:	bf00      	nop
 8002244:	e7fe      	b.n	8002244 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <xQueueGenericCreateStatic+0x52>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <xQueueGenericCreateStatic+0x56>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <xQueueGenericCreateStatic+0x58>
 8002256:	2300      	movs	r3, #0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800225c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002260:	f383 8811 	msr	BASEPRI, r3
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	623b      	str	r3, [r7, #32]
}
 800226e:	bf00      	nop
 8002270:	e7fe      	b.n	8002270 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <xQueueGenericCreateStatic+0x7e>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <xQueueGenericCreateStatic+0x82>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <xQueueGenericCreateStatic+0x84>
 8002282:	2300      	movs	r3, #0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	61fb      	str	r3, [r7, #28]
}
 800229a:	bf00      	nop
 800229c:	e7fe      	b.n	800229c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800229e:	2350      	movs	r3, #80	; 0x50
 80022a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b50      	cmp	r3, #80	; 0x50
 80022a6:	d00a      	beq.n	80022be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	61bb      	str	r3, [r7, #24]
}
 80022ba:	bf00      	nop
 80022bc:	e7fe      	b.n	80022bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80022be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00d      	beq.n	80022e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	4613      	mov	r3, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f805 	bl	80022f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e002      	b.n	8002312 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800231e:	2101      	movs	r1, #1
 8002320:	69b8      	ldr	r0, [r7, #24]
 8002322:	f7ff ff05 	bl	8002130 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08e      	sub	sp, #56	; 0x38
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002346:	2300      	movs	r3, #0
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <xQueueGenericSend+0x32>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002366:	bf00      	nop
 8002368:	e7fe      	b.n	8002368 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <xQueueGenericSend+0x40>
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <xQueueGenericSend+0x44>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <xQueueGenericSend+0x46>
 800237c:	2300      	movs	r3, #0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10a      	bne.n	8002398 <xQueueGenericSend+0x60>
	__asm volatile
 8002382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002394:	bf00      	nop
 8002396:	e7fe      	b.n	8002396 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d103      	bne.n	80023a6 <xQueueGenericSend+0x6e>
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <xQueueGenericSend+0x72>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <xQueueGenericSend+0x74>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80023b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b4:	f383 8811 	msr	BASEPRI, r3
 80023b8:	f3bf 8f6f 	isb	sy
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	623b      	str	r3, [r7, #32]
}
 80023c2:	bf00      	nop
 80023c4:	e7fe      	b.n	80023c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023c6:	f001 f9e7 	bl	8003798 <xTaskGetSchedulerState>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <xQueueGenericSend+0x9e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <xQueueGenericSend+0xa2>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <xQueueGenericSend+0xa4>
 80023da:	2300      	movs	r3, #0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80023e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e4:	f383 8811 	msr	BASEPRI, r3
 80023e8:	f3bf 8f6f 	isb	sy
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	61fb      	str	r3, [r7, #28]
}
 80023f2:	bf00      	nop
 80023f4:	e7fe      	b.n	80023f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023f6:	f001 ff2d 	bl	8004254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <xQueueGenericSend+0xd4>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d129      	bne.n	8002460 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002412:	f000 fa0b 	bl	800282c <prvCopyDataToQueue>
 8002416:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	2b00      	cmp	r3, #0
 800241e:	d010      	beq.n	8002442 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	3324      	adds	r3, #36	; 0x24
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fff5 	bl	8003414 <xTaskRemoveFromEventList>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <xQueueGenericSend+0x1f8>)
 8002432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	e00a      	b.n	8002458 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <xQueueGenericSend+0x1f8>)
 800244a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002458:	f001 ff2c 	bl	80042b4 <vPortExitCritical>
				return pdPASS;
 800245c:	2301      	movs	r3, #1
 800245e:	e063      	b.n	8002528 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002466:	f001 ff25 	bl	80042b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800246a:	2300      	movs	r3, #0
 800246c:	e05c      	b.n	8002528 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4618      	mov	r0, r3
 800247a:	f001 f82f 	bl	80034dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800247e:	2301      	movs	r3, #1
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002482:	f001 ff17 	bl	80042b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002486:	f000 fd9b 	bl	8002fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800248a:	f001 fee3 	bl	8004254 <vPortEnterCritical>
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002494:	b25b      	sxtb	r3, r3
 8002496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249a:	d103      	bne.n	80024a4 <xQueueGenericSend+0x16c>
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024aa:	b25b      	sxtb	r3, r3
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d103      	bne.n	80024ba <xQueueGenericSend+0x182>
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024ba:	f001 fefb 	bl	80042b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024be:	1d3a      	adds	r2, r7, #4
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f001 f81e 	bl	8003508 <xTaskCheckForTimeOut>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d124      	bne.n	800251c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80024d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024d4:	f000 faa2 	bl	8002a1c <prvIsQueueFull>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d018      	beq.n	8002510 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	3310      	adds	r3, #16
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 ff44 	bl	8003374 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80024ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ee:	f000 fa2d 	bl	800294c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80024f2:	f000 fd73 	bl	8002fdc <xTaskResumeAll>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f47f af7c 	bne.w	80023f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <xQueueGenericSend+0x1f8>)
 8002500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	e772      	b.n	80023f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002512:	f000 fa1b 	bl	800294c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002516:	f000 fd61 	bl	8002fdc <xTaskResumeAll>
 800251a:	e76c      	b.n	80023f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800251c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800251e:	f000 fa15 	bl	800294c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002522:	f000 fd5b 	bl	8002fdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002526:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002528:	4618      	mov	r0, r3
 800252a:	3738      	adds	r7, #56	; 0x38
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	e000ed04 	.word	0xe000ed04

08002534 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b090      	sub	sp, #64	; 0x40
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d103      	bne.n	8002570 <xQueueGenericSendFromISR+0x3c>
 8002568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <xQueueGenericSendFromISR+0x40>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <xQueueGenericSendFromISR+0x42>
 8002574:	2300      	movs	r3, #0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800257a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800258c:	bf00      	nop
 800258e:	e7fe      	b.n	800258e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d103      	bne.n	800259e <xQueueGenericSendFromISR+0x6a>
 8002596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <xQueueGenericSendFromISR+0x6e>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <xQueueGenericSendFromISR+0x70>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80025a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	623b      	str	r3, [r7, #32]
}
 80025ba:	bf00      	nop
 80025bc:	e7fe      	b.n	80025bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025be:	f001 ff2b 	bl	8004418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80025c2:	f3ef 8211 	mrs	r2, BASEPRI
 80025c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	61fa      	str	r2, [r7, #28]
 80025d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80025da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d302      	bcc.n	80025f0 <xQueueGenericSendFromISR+0xbc>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d12f      	bne.n	8002650 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002606:	f000 f911 	bl	800282c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800260a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d112      	bne.n	800263a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d016      	beq.n	800264a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	3324      	adds	r3, #36	; 0x24
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fef7 	bl	8003414 <xTaskRemoveFromEventList>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00e      	beq.n	800264a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e007      	b.n	800264a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800263a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800263e:	3301      	adds	r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	b25a      	sxtb	r2, r3
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800264a:	2301      	movs	r3, #1
 800264c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800264e:	e001      	b.n	8002654 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002650:	2300      	movs	r3, #0
 8002652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002656:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800265e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002662:	4618      	mov	r0, r3
 8002664:	3740      	adds	r7, #64	; 0x40
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	; 0x30
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10a      	bne.n	800269c <xQueueReceive+0x30>
	__asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	623b      	str	r3, [r7, #32]
}
 8002698:	bf00      	nop
 800269a:	e7fe      	b.n	800269a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <xQueueReceive+0x3e>
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <xQueueReceive+0x42>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <xQueueReceive+0x44>
 80026ae:	2300      	movs	r3, #0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <xQueueReceive+0x5e>
	__asm volatile
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	61fb      	str	r3, [r7, #28]
}
 80026c6:	bf00      	nop
 80026c8:	e7fe      	b.n	80026c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026ca:	f001 f865 	bl	8003798 <xTaskGetSchedulerState>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <xQueueReceive+0x6e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <xQueueReceive+0x72>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <xQueueReceive+0x74>
 80026de:	2300      	movs	r3, #0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <xQueueReceive+0x8e>
	__asm volatile
 80026e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	f3bf 8f4f 	dsb	sy
 80026f4:	61bb      	str	r3, [r7, #24]
}
 80026f6:	bf00      	nop
 80026f8:	e7fe      	b.n	80026f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026fa:	f001 fdab 	bl	8004254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01f      	beq.n	800274a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800270e:	f000 f8f7 	bl	8002900 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	1e5a      	subs	r2, r3, #1
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00f      	beq.n	8002742 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	3310      	adds	r3, #16
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fe74 	bl	8003414 <xTaskRemoveFromEventList>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002732:	4b3d      	ldr	r3, [pc, #244]	; (8002828 <xQueueReceive+0x1bc>)
 8002734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002742:	f001 fdb7 	bl	80042b4 <vPortExitCritical>
				return pdPASS;
 8002746:	2301      	movs	r3, #1
 8002748:	e069      	b.n	800281e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002750:	f001 fdb0 	bl	80042b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002754:	2300      	movs	r3, #0
 8002756:	e062      	b.n	800281e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	4618      	mov	r0, r3
 8002764:	f000 feba 	bl	80034dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002768:	2301      	movs	r3, #1
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800276c:	f001 fda2 	bl	80042b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002770:	f000 fc26 	bl	8002fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002774:	f001 fd6e 	bl	8004254 <vPortEnterCritical>
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800277e:	b25b      	sxtb	r3, r3
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d103      	bne.n	800278e <xQueueReceive+0x122>
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002794:	b25b      	sxtb	r3, r3
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d103      	bne.n	80027a4 <xQueueReceive+0x138>
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027a4:	f001 fd86 	bl	80042b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027a8:	1d3a      	adds	r2, r7, #4
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fea9 	bl	8003508 <xTaskCheckForTimeOut>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d123      	bne.n	8002804 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027be:	f000 f917 	bl	80029f0 <prvIsQueueEmpty>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d017      	beq.n	80027f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	3324      	adds	r3, #36	; 0x24
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fdcf 	bl	8003374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027d8:	f000 f8b8 	bl	800294c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027dc:	f000 fbfe 	bl	8002fdc <xTaskResumeAll>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d189      	bne.n	80026fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <xQueueReceive+0x1bc>)
 80027e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	e780      	b.n	80026fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80027f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027fa:	f000 f8a7 	bl	800294c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027fe:	f000 fbed 	bl	8002fdc <xTaskResumeAll>
 8002802:	e77a      	b.n	80026fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002806:	f000 f8a1 	bl	800294c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800280a:	f000 fbe7 	bl	8002fdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800280e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002810:	f000 f8ee 	bl	80029f0 <prvIsQueueEmpty>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	f43f af6f 	beq.w	80026fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800281c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800281e:	4618      	mov	r0, r3
 8002820:	3730      	adds	r7, #48	; 0x30
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d14d      	bne.n	80028ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	4618      	mov	r0, r3
 8002858:	f000 ffbc 	bl	80037d4 <xTaskPriorityDisinherit>
 800285c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e043      	b.n	80028ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d119      	bne.n	80028a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6858      	ldr	r0, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	461a      	mov	r2, r3
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	f002 f87c 	bl	8004974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	441a      	add	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	429a      	cmp	r2, r3
 8002894:	d32b      	bcc.n	80028ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	e026      	b.n	80028ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68d8      	ldr	r0, [r3, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	461a      	mov	r2, r3
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	f002 f862 	bl	8004974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	425b      	negs	r3, r3
 80028ba:	441a      	add	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	425b      	negs	r3, r3
 80028d6:	441a      	add	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d105      	bne.n	80028ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80028f6:	697b      	ldr	r3, [r7, #20]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d018      	beq.n	8002944 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	441a      	add	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	429a      	cmp	r2, r3
 800292a:	d303      	bcc.n	8002934 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68d9      	ldr	r1, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	461a      	mov	r2, r3
 800293e:	6838      	ldr	r0, [r7, #0]
 8002940:	f002 f818 	bl	8004974 <memcpy>
	}
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002954:	f001 fc7e 	bl	8004254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800295e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002960:	e011      	b.n	8002986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d012      	beq.n	8002990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3324      	adds	r3, #36	; 0x24
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fd50 	bl	8003414 <xTaskRemoveFromEventList>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800297a:	f000 fe27 	bl	80035cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	3b01      	subs	r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	dce9      	bgt.n	8002962 <prvUnlockQueue+0x16>
 800298e:	e000      	b.n	8002992 <prvUnlockQueue+0x46>
					break;
 8002990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	22ff      	movs	r2, #255	; 0xff
 8002996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800299a:	f001 fc8b 	bl	80042b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800299e:	f001 fc59 	bl	8004254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029aa:	e011      	b.n	80029d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d012      	beq.n	80029da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3310      	adds	r3, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fd2b 	bl	8003414 <xTaskRemoveFromEventList>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80029c4:	f000 fe02 	bl	80035cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80029c8:	7bbb      	ldrb	r3, [r7, #14]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	dce9      	bgt.n	80029ac <prvUnlockQueue+0x60>
 80029d8:	e000      	b.n	80029dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80029da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	22ff      	movs	r2, #255	; 0xff
 80029e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80029e4:	f001 fc66 	bl	80042b4 <vPortExitCritical>
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029f8:	f001 fc2c 	bl	8004254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a04:	2301      	movs	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e001      	b.n	8002a0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a0e:	f001 fc51 	bl	80042b4 <vPortExitCritical>

	return xReturn;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a24:	f001 fc16 	bl	8004254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d102      	bne.n	8002a3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a34:	2301      	movs	r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e001      	b.n	8002a3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a3e:	f001 fc39 	bl	80042b4 <vPortExitCritical>

	return xReturn;
 8002a42:	68fb      	ldr	r3, [r7, #12]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e014      	b.n	8002a86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002a5c:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <vQueueAddToRegistry+0x50>)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10b      	bne.n	8002a80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002a68:	490c      	ldr	r1, [pc, #48]	; (8002a9c <vQueueAddToRegistry+0x50>)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <vQueueAddToRegistry+0x50>)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002a7e:	e006      	b.n	8002a8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3301      	adds	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b07      	cmp	r3, #7
 8002a8a:	d9e7      	bls.n	8002a5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000824 	.word	0x20000824

08002aa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ab0:	f001 fbd0 	bl	8004254 <vPortEnterCritical>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aba:	b25b      	sxtb	r3, r3
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d103      	bne.n	8002aca <vQueueWaitForMessageRestricted+0x2a>
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d103      	bne.n	8002ae0 <vQueueWaitForMessageRestricted+0x40>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae0:	f001 fbe8 	bl	80042b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d106      	bne.n	8002afa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3324      	adds	r3, #36	; 0x24
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fc61 	bl	80033bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff26 	bl	800294c <prvUnlockQueue>
	}
 8002b00:	bf00      	nop
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08e      	sub	sp, #56	; 0x38
 8002b0c:	af04      	add	r7, sp, #16
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	623b      	str	r3, [r7, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xTaskCreateStatic+0x46>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	61fb      	str	r3, [r7, #28]
}
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b4e:	23a8      	movs	r3, #168	; 0xa8
 8002b50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2ba8      	cmp	r3, #168	; 0xa8
 8002b56:	d00a      	beq.n	8002b6e <xTaskCreateStatic+0x66>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	61bb      	str	r3, [r7, #24]
}
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01e      	beq.n	8002bb4 <xTaskCreateStatic+0xac>
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01b      	beq.n	8002bb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9303      	str	r3, [sp, #12]
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	9302      	str	r3, [sp, #8]
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f850 	bl	8002c4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bae:	f000 f8f3 	bl	8002d98 <prvAddNewTaskToReadyList>
 8002bb2:	e001      	b.n	8002bb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002bb8:	697b      	ldr	r3, [r7, #20]
	}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3728      	adds	r7, #40	; 0x28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b08c      	sub	sp, #48	; 0x30
 8002bc6:	af04      	add	r7, sp, #16
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f001 fc5e 	bl	8004498 <pvPortMalloc>
 8002bdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00e      	beq.n	8002c02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002be4:	20a8      	movs	r0, #168	; 0xa8
 8002be6:	f001 fc57 	bl	8004498 <pvPortMalloc>
 8002bea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf8:	e005      	b.n	8002c06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f001 fd18 	bl	8004630 <vPortFree>
 8002c00:	e001      	b.n	8002c06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d017      	beq.n	8002c3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	2300      	movs	r3, #0
 8002c18:	9303      	str	r3, [sp, #12]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	9302      	str	r3, [sp, #8]
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f80e 	bl	8002c4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c30:	69f8      	ldr	r0, [r7, #28]
 8002c32:	f000 f8b1 	bl	8002d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	e002      	b.n	8002c42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c42:	69bb      	ldr	r3, [r7, #24]
	}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	461a      	mov	r2, r3
 8002c64:	21a5      	movs	r1, #165	; 0xa5
 8002c66:	f001 fe01 	bl	800486c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c74:	3b01      	subs	r3, #1
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f023 0307 	bic.w	r3, r3, #7
 8002c82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	617b      	str	r3, [r7, #20]
}
 8002ca0:	bf00      	nop
 8002ca2:	e7fe      	b.n	8002ca2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01f      	beq.n	8002cea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e012      	b.n	8002cd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	7819      	ldrb	r1, [r3, #0]
 8002cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3334      	adds	r3, #52	; 0x34
 8002cc0:	460a      	mov	r2, r1
 8002cc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d006      	beq.n	8002cde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d9e9      	bls.n	8002cb0 <prvInitialiseNewTask+0x64>
 8002cdc:	e000      	b.n	8002ce0 <prvInitialiseNewTask+0x94>
			{
				break;
 8002cde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ce8:	e003      	b.n	8002cf2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	2b37      	cmp	r3, #55	; 0x37
 8002cf6:	d901      	bls.n	8002cfc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cf8:	2337      	movs	r3, #55	; 0x37
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	3304      	adds	r3, #4
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff f978 	bl	8002008 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	3318      	adds	r3, #24
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f973 	bl	8002008 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	3354      	adds	r3, #84	; 0x54
 8002d4c:	224c      	movs	r2, #76	; 0x4c
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 fd8b 	bl	800486c <memset>
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	4a0c      	ldr	r2, [pc, #48]	; (8002d8c <prvInitialiseNewTask+0x140>)
 8002d5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <prvInitialiseNewTask+0x144>)
 8002d60:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <prvInitialiseNewTask+0x148>)
 8002d66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	68f9      	ldr	r1, [r7, #12]
 8002d6c:	69b8      	ldr	r0, [r7, #24]
 8002d6e:	f001 f941 	bl	8003ff4 <pxPortInitialiseStack>
 8002d72:	4602      	mov	r2, r0
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d84:	bf00      	nop
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20004ab8 	.word	0x20004ab8
 8002d90:	20004b20 	.word	0x20004b20
 8002d94:	20004b88 	.word	0x20004b88

08002d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002da0:	f001 fa58 	bl	8004254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <prvAddNewTaskToReadyList+0xc4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <prvAddNewTaskToReadyList+0xc4>)
 8002dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <prvAddNewTaskToReadyList+0xc8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002db6:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <prvAddNewTaskToReadyList+0xc8>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <prvAddNewTaskToReadyList+0xc4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d110      	bne.n	8002de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dc4:	f000 fc26 	bl	8003614 <prvInitialiseTaskLists>
 8002dc8:	e00d      	b.n	8002de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002dca:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <prvAddNewTaskToReadyList+0xcc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <prvAddNewTaskToReadyList+0xc8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d802      	bhi.n	8002de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <prvAddNewTaskToReadyList+0xc8>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <prvAddNewTaskToReadyList+0xd0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3301      	adds	r3, #1
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <prvAddNewTaskToReadyList+0xd0>)
 8002dee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <prvAddNewTaskToReadyList+0xd0>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <prvAddNewTaskToReadyList+0xd4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d903      	bls.n	8002e0c <prvAddNewTaskToReadyList+0x74>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <prvAddNewTaskToReadyList+0xd4>)
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <prvAddNewTaskToReadyList+0xd8>)
 8002e1a:	441a      	add	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f7ff f8fd 	bl	8002022 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e28:	f001 fa44 	bl	80042b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <prvAddNewTaskToReadyList+0xcc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <prvAddNewTaskToReadyList+0xc8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d207      	bcs.n	8002e52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <prvAddNewTaskToReadyList+0xdc>)
 8002e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000d38 	.word	0x20000d38
 8002e60:	20000864 	.word	0x20000864
 8002e64:	20000d44 	.word	0x20000d44
 8002e68:	20000d54 	.word	0x20000d54
 8002e6c:	20000d40 	.word	0x20000d40
 8002e70:	20000868 	.word	0x20000868
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d017      	beq.n	8002eba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e8a:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <vTaskDelay+0x60>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <vTaskDelay+0x30>
	__asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	60bb      	str	r3, [r7, #8]
}
 8002ea4:	bf00      	nop
 8002ea6:	e7fe      	b.n	8002ea6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ea8:	f000 f88a 	bl	8002fc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002eac:	2100      	movs	r1, #0
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fcfe 	bl	80038b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002eb4:	f000 f892 	bl	8002fdc <xTaskResumeAll>
 8002eb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <vTaskDelay+0x64>)
 8002ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000d60 	.word	0x20000d60
 8002edc:	e000ed04 	.word	0xe000ed04

08002ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002eee:	463a      	mov	r2, r7
 8002ef0:	1d39      	adds	r1, r7, #4
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff f832 	bl	8001f60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002efc:	6839      	ldr	r1, [r7, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	9202      	str	r2, [sp, #8]
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	2300      	movs	r3, #0
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	460a      	mov	r2, r1
 8002f0e:	4924      	ldr	r1, [pc, #144]	; (8002fa0 <vTaskStartScheduler+0xc0>)
 8002f10:	4824      	ldr	r0, [pc, #144]	; (8002fa4 <vTaskStartScheduler+0xc4>)
 8002f12:	f7ff fdf9 	bl	8002b08 <xTaskCreateStatic>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4a23      	ldr	r2, [pc, #140]	; (8002fa8 <vTaskStartScheduler+0xc8>)
 8002f1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f1c:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <vTaskStartScheduler+0xc8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f24:	2301      	movs	r3, #1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	e001      	b.n	8002f2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d102      	bne.n	8002f3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f34:	f000 fd10 	bl	8003958 <xTimerCreateTimerTask>
 8002f38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d11b      	bne.n	8002f78 <vTaskStartScheduler+0x98>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	613b      	str	r3, [r7, #16]
}
 8002f52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <vTaskStartScheduler+0xcc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3354      	adds	r3, #84	; 0x54
 8002f5a:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <vTaskStartScheduler+0xd0>)
 8002f5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <vTaskStartScheduler+0xd4>)
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <vTaskStartScheduler+0xd8>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <vTaskStartScheduler+0xdc>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f72:	f001 f8cd 	bl	8004110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f76:	e00e      	b.n	8002f96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d10a      	bne.n	8002f96 <vTaskStartScheduler+0xb6>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	60fb      	str	r3, [r7, #12]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <vTaskStartScheduler+0xb4>
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	08004a68 	.word	0x08004a68
 8002fa4:	080035e5 	.word	0x080035e5
 8002fa8:	20000d5c 	.word	0x20000d5c
 8002fac:	20000864 	.word	0x20000864
 8002fb0:	2000005c 	.word	0x2000005c
 8002fb4:	20000d58 	.word	0x20000d58
 8002fb8:	20000d44 	.word	0x20000d44
 8002fbc:	20000d3c 	.word	0x20000d3c

08002fc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <vTaskSuspendAll+0x18>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	4a03      	ldr	r2, [pc, #12]	; (8002fd8 <vTaskSuspendAll+0x18>)
 8002fcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	20000d60 	.word	0x20000d60

08002fdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fea:	4b42      	ldr	r3, [pc, #264]	; (80030f4 <xTaskResumeAll+0x118>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <xTaskResumeAll+0x2c>
	__asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	603b      	str	r3, [r7, #0]
}
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003008:	f001 f924 	bl	8004254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800300c:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <xTaskResumeAll+0x118>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3b01      	subs	r3, #1
 8003012:	4a38      	ldr	r2, [pc, #224]	; (80030f4 <xTaskResumeAll+0x118>)
 8003014:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <xTaskResumeAll+0x118>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d162      	bne.n	80030e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800301e:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <xTaskResumeAll+0x11c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d05e      	beq.n	80030e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003026:	e02f      	b.n	8003088 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003028:	4b34      	ldr	r3, [pc, #208]	; (80030fc <xTaskResumeAll+0x120>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3318      	adds	r3, #24
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f851 	bl	80020dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3304      	adds	r3, #4
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f84c 	bl	80020dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003048:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <xTaskResumeAll+0x124>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d903      	bls.n	8003058 <xTaskResumeAll+0x7c>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	4a2a      	ldr	r2, [pc, #168]	; (8003100 <xTaskResumeAll+0x124>)
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <xTaskResumeAll+0x128>)
 8003066:	441a      	add	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f7fe ffd7 	bl	8002022 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <xTaskResumeAll+0x12c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003082:	4b22      	ldr	r3, [pc, #136]	; (800310c <xTaskResumeAll+0x130>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <xTaskResumeAll+0x120>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1cb      	bne.n	8003028 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003096:	f000 fb5f 	bl	8003758 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800309a:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <xTaskResumeAll+0x134>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030a6:	f000 f847 	bl	8003138 <xTaskIncrementTick>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80030b0:	4b16      	ldr	r3, [pc, #88]	; (800310c <xTaskResumeAll+0x130>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f1      	bne.n	80030a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <xTaskResumeAll+0x134>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030c8:	4b10      	ldr	r3, [pc, #64]	; (800310c <xTaskResumeAll+0x130>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <xTaskResumeAll+0x138>)
 80030d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030e4:	f001 f8e6 	bl	80042b4 <vPortExitCritical>

	return xAlreadyYielded;
 80030e8:	68bb      	ldr	r3, [r7, #8]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000d60 	.word	0x20000d60
 80030f8:	20000d38 	.word	0x20000d38
 80030fc:	20000cf8 	.word	0x20000cf8
 8003100:	20000d40 	.word	0x20000d40
 8003104:	20000868 	.word	0x20000868
 8003108:	20000864 	.word	0x20000864
 800310c:	20000d4c 	.word	0x20000d4c
 8003110:	20000d48 	.word	0x20000d48
 8003114:	e000ed04 	.word	0xe000ed04

08003118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <xTaskGetTickCount+0x1c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003124:	687b      	ldr	r3, [r7, #4]
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000d3c 	.word	0x20000d3c

08003138 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003142:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <xTaskIncrementTick+0x148>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 808f 	bne.w	800326a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800314c:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <xTaskIncrementTick+0x14c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003154:	4a4b      	ldr	r2, [pc, #300]	; (8003284 <xTaskIncrementTick+0x14c>)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d120      	bne.n	80031a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003160:	4b49      	ldr	r3, [pc, #292]	; (8003288 <xTaskIncrementTick+0x150>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <xTaskIncrementTick+0x48>
	__asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	603b      	str	r3, [r7, #0]
}
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <xTaskIncrementTick+0x46>
 8003180:	4b41      	ldr	r3, [pc, #260]	; (8003288 <xTaskIncrementTick+0x150>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <xTaskIncrementTick+0x154>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a3f      	ldr	r2, [pc, #252]	; (8003288 <xTaskIncrementTick+0x150>)
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4a3f      	ldr	r2, [pc, #252]	; (800328c <xTaskIncrementTick+0x154>)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <xTaskIncrementTick+0x158>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	4a3d      	ldr	r2, [pc, #244]	; (8003290 <xTaskIncrementTick+0x158>)
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	f000 fadb 	bl	8003758 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031a2:	4b3c      	ldr	r3, [pc, #240]	; (8003294 <xTaskIncrementTick+0x15c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d349      	bcc.n	8003240 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ac:	4b36      	ldr	r3, [pc, #216]	; (8003288 <xTaskIncrementTick+0x150>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <xTaskIncrementTick+0x15c>)
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	601a      	str	r2, [r3, #0]
					break;
 80031be:	e03f      	b.n	8003240 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031c0:	4b31      	ldr	r3, [pc, #196]	; (8003288 <xTaskIncrementTick+0x150>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d203      	bcs.n	80031e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031d8:	4a2e      	ldr	r2, [pc, #184]	; (8003294 <xTaskIncrementTick+0x15c>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031de:	e02f      	b.n	8003240 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe ff79 	bl	80020dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3318      	adds	r3, #24
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe ff70 	bl	80020dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <xTaskIncrementTick+0x160>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d903      	bls.n	8003210 <xTaskIncrementTick+0xd8>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4a22      	ldr	r2, [pc, #136]	; (8003298 <xTaskIncrementTick+0x160>)
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4a1f      	ldr	r2, [pc, #124]	; (800329c <xTaskIncrementTick+0x164>)
 800321e:	441a      	add	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f7fe fefb 	bl	8002022 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <xTaskIncrementTick+0x168>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	429a      	cmp	r2, r3
 8003238:	d3b8      	bcc.n	80031ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800323a:	2301      	movs	r3, #1
 800323c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800323e:	e7b5      	b.n	80031ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <xTaskIncrementTick+0x168>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003246:	4915      	ldr	r1, [pc, #84]	; (800329c <xTaskIncrementTick+0x164>)
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d901      	bls.n	800325c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003258:	2301      	movs	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <xTaskIncrementTick+0x16c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003264:	2301      	movs	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	e004      	b.n	8003274 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <xTaskIncrementTick+0x170>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <xTaskIncrementTick+0x170>)
 8003272:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003274:	697b      	ldr	r3, [r7, #20]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000d60 	.word	0x20000d60
 8003284:	20000d3c 	.word	0x20000d3c
 8003288:	20000cf0 	.word	0x20000cf0
 800328c:	20000cf4 	.word	0x20000cf4
 8003290:	20000d50 	.word	0x20000d50
 8003294:	20000d58 	.word	0x20000d58
 8003298:	20000d40 	.word	0x20000d40
 800329c:	20000868 	.word	0x20000868
 80032a0:	20000864 	.word	0x20000864
 80032a4:	20000d4c 	.word	0x20000d4c
 80032a8:	20000d48 	.word	0x20000d48

080032ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032b2:	4b2a      	ldr	r3, [pc, #168]	; (800335c <vTaskSwitchContext+0xb0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032ba:	4b29      	ldr	r3, [pc, #164]	; (8003360 <vTaskSwitchContext+0xb4>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032c0:	e046      	b.n	8003350 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <vTaskSwitchContext+0xb4>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c8:	4b26      	ldr	r3, [pc, #152]	; (8003364 <vTaskSwitchContext+0xb8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e010      	b.n	80032f2 <vTaskSwitchContext+0x46>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <vTaskSwitchContext+0x40>
	__asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	607b      	str	r3, [r7, #4]
}
 80032e8:	bf00      	nop
 80032ea:	e7fe      	b.n	80032ea <vTaskSwitchContext+0x3e>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	491d      	ldr	r1, [pc, #116]	; (8003368 <vTaskSwitchContext+0xbc>)
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0e4      	beq.n	80032d0 <vTaskSwitchContext+0x24>
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4a15      	ldr	r2, [pc, #84]	; (8003368 <vTaskSwitchContext+0xbc>)
 8003312:	4413      	add	r3, r2
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3308      	adds	r3, #8
 8003328:	429a      	cmp	r2, r3
 800332a:	d104      	bne.n	8003336 <vTaskSwitchContext+0x8a>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a0b      	ldr	r2, [pc, #44]	; (800336c <vTaskSwitchContext+0xc0>)
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4a08      	ldr	r2, [pc, #32]	; (8003364 <vTaskSwitchContext+0xb8>)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <vTaskSwitchContext+0xc0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3354      	adds	r3, #84	; 0x54
 800334c:	4a08      	ldr	r2, [pc, #32]	; (8003370 <vTaskSwitchContext+0xc4>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	20000d60 	.word	0x20000d60
 8003360:	20000d4c 	.word	0x20000d4c
 8003364:	20000d40 	.word	0x20000d40
 8003368:	20000868 	.word	0x20000868
 800336c:	20000864 	.word	0x20000864
 8003370:	2000005c 	.word	0x2000005c

08003374 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60fb      	str	r3, [r7, #12]
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <vTaskPlaceOnEventList+0x44>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3318      	adds	r3, #24
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fe fe61 	bl	800206a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033a8:	2101      	movs	r1, #1
 80033aa:	6838      	ldr	r0, [r7, #0]
 80033ac:	f000 fa80 	bl	80038b0 <prvAddCurrentTaskToDelayedList>
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000864 	.word	0x20000864

080033bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	617b      	str	r3, [r7, #20]
}
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <vTaskPlaceOnEventListRestricted+0x54>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3318      	adds	r3, #24
 80033ea:	4619      	mov	r1, r3
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7fe fe18 	bl	8002022 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
 80033fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68b8      	ldr	r0, [r7, #8]
 8003402:	f000 fa55 	bl	80038b0 <prvAddCurrentTaskToDelayedList>
	}
 8003406:	bf00      	nop
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000864 	.word	0x20000864

08003414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	60fb      	str	r3, [r7, #12]
}
 800343c:	bf00      	nop
 800343e:	e7fe      	b.n	800343e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3318      	adds	r3, #24
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fe49 	bl	80020dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344a:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <xTaskRemoveFromEventList+0xb0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d11d      	bne.n	800348e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3304      	adds	r3, #4
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fe40 	bl	80020dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <xTaskRemoveFromEventList+0xb4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d903      	bls.n	8003470 <xTaskRemoveFromEventList+0x5c>
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <xTaskRemoveFromEventList+0xb4>)
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4a13      	ldr	r2, [pc, #76]	; (80034cc <xTaskRemoveFromEventList+0xb8>)
 800347e:	441a      	add	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f7fe fdcb 	bl	8002022 <vListInsertEnd>
 800348c:	e005      	b.n	800349a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	3318      	adds	r3, #24
 8003492:	4619      	mov	r1, r3
 8003494:	480e      	ldr	r0, [pc, #56]	; (80034d0 <xTaskRemoveFromEventList+0xbc>)
 8003496:	f7fe fdc4 	bl	8002022 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <xTaskRemoveFromEventList+0xc0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d905      	bls.n	80034b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80034a8:	2301      	movs	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <xTaskRemoveFromEventList+0xc4>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e001      	b.n	80034b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80034b8:	697b      	ldr	r3, [r7, #20]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000d60 	.word	0x20000d60
 80034c8:	20000d40 	.word	0x20000d40
 80034cc:	20000868 	.word	0x20000868
 80034d0:	20000cf8 	.word	0x20000cf8
 80034d4:	20000864 	.word	0x20000864
 80034d8:	20000d4c 	.word	0x20000d4c

080034dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <vTaskInternalSetTimeOutState+0x24>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <vTaskInternalSetTimeOutState+0x28>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	605a      	str	r2, [r3, #4]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	20000d50 	.word	0x20000d50
 8003504:	20000d3c 	.word	0x20000d3c

08003508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	613b      	str	r3, [r7, #16]
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	60fb      	str	r3, [r7, #12]
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800354a:	f000 fe83 	bl	8004254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800354e:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <xTaskCheckForTimeOut+0xbc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d102      	bne.n	800356e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	e023      	b.n	80035b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <xTaskCheckForTimeOut+0xc0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d007      	beq.n	800358a <xTaskCheckForTimeOut+0x82>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	429a      	cmp	r2, r3
 8003582:	d302      	bcc.n	800358a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003584:	2301      	movs	r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	e015      	b.n	80035b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	429a      	cmp	r2, r3
 8003592:	d20b      	bcs.n	80035ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	1ad2      	subs	r2, r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ff9b 	bl	80034dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	e004      	b.n	80035b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80035b2:	2301      	movs	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80035b6:	f000 fe7d 	bl	80042b4 <vPortExitCritical>

	return xReturn;
 80035ba:	69fb      	ldr	r3, [r7, #28]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000d3c 	.word	0x20000d3c
 80035c8:	20000d50 	.word	0x20000d50

080035cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <vTaskMissedYield+0x14>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	20000d4c 	.word	0x20000d4c

080035e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035ec:	f000 f852 	bl	8003694 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <prvIdleTask+0x28>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d9f9      	bls.n	80035ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <prvIdleTask+0x2c>)
 80035fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003608:	e7f0      	b.n	80035ec <prvIdleTask+0x8>
 800360a:	bf00      	nop
 800360c:	20000868 	.word	0x20000868
 8003610:	e000ed04 	.word	0xe000ed04

08003614 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800361a:	2300      	movs	r3, #0
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	e00c      	b.n	800363a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <prvInitialiseTaskLists+0x60>)
 800362c:	4413      	add	r3, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fcca 	bl	8001fc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3301      	adds	r3, #1
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b37      	cmp	r3, #55	; 0x37
 800363e:	d9ef      	bls.n	8003620 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003640:	480d      	ldr	r0, [pc, #52]	; (8003678 <prvInitialiseTaskLists+0x64>)
 8003642:	f7fe fcc1 	bl	8001fc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003646:	480d      	ldr	r0, [pc, #52]	; (800367c <prvInitialiseTaskLists+0x68>)
 8003648:	f7fe fcbe 	bl	8001fc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800364c:	480c      	ldr	r0, [pc, #48]	; (8003680 <prvInitialiseTaskLists+0x6c>)
 800364e:	f7fe fcbb 	bl	8001fc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003652:	480c      	ldr	r0, [pc, #48]	; (8003684 <prvInitialiseTaskLists+0x70>)
 8003654:	f7fe fcb8 	bl	8001fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003658:	480b      	ldr	r0, [pc, #44]	; (8003688 <prvInitialiseTaskLists+0x74>)
 800365a:	f7fe fcb5 	bl	8001fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <prvInitialiseTaskLists+0x78>)
 8003660:	4a05      	ldr	r2, [pc, #20]	; (8003678 <prvInitialiseTaskLists+0x64>)
 8003662:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <prvInitialiseTaskLists+0x7c>)
 8003666:	4a05      	ldr	r2, [pc, #20]	; (800367c <prvInitialiseTaskLists+0x68>)
 8003668:	601a      	str	r2, [r3, #0]
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000868 	.word	0x20000868
 8003678:	20000cc8 	.word	0x20000cc8
 800367c:	20000cdc 	.word	0x20000cdc
 8003680:	20000cf8 	.word	0x20000cf8
 8003684:	20000d0c 	.word	0x20000d0c
 8003688:	20000d24 	.word	0x20000d24
 800368c:	20000cf0 	.word	0x20000cf0
 8003690:	20000cf4 	.word	0x20000cf4

08003694 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800369a:	e019      	b.n	80036d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800369c:	f000 fdda 	bl	8004254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <prvCheckTasksWaitingTermination+0x50>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe fd15 	bl	80020dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <prvCheckTasksWaitingTermination+0x54>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <prvCheckTasksWaitingTermination+0x54>)
 80036ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <prvCheckTasksWaitingTermination+0x58>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <prvCheckTasksWaitingTermination+0x58>)
 80036c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036c6:	f000 fdf5 	bl	80042b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f810 	bl	80036f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <prvCheckTasksWaitingTermination+0x58>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e1      	bne.n	800369c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000d0c 	.word	0x20000d0c
 80036e8:	20000d38 	.word	0x20000d38
 80036ec:	20000d20 	.word	0x20000d20

080036f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3354      	adds	r3, #84	; 0x54
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 f8bd 	bl	800487c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003708:	2b00      	cmp	r3, #0
 800370a:	d108      	bne.n	800371e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	4618      	mov	r0, r3
 8003712:	f000 ff8d 	bl	8004630 <vPortFree>
				vPortFree( pxTCB );
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 ff8a 	bl	8004630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800371c:	e018      	b.n	8003750 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003724:	2b01      	cmp	r3, #1
 8003726:	d103      	bne.n	8003730 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 ff81 	bl	8004630 <vPortFree>
	}
 800372e:	e00f      	b.n	8003750 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003736:	2b02      	cmp	r3, #2
 8003738:	d00a      	beq.n	8003750 <prvDeleteTCB+0x60>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	60fb      	str	r3, [r7, #12]
}
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <prvDeleteTCB+0x5e>
	}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <prvResetNextTaskUnblockTime+0x38>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <prvResetNextTaskUnblockTime+0x3c>)
 800376a:	f04f 32ff 	mov.w	r2, #4294967295
 800376e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003770:	e008      	b.n	8003784 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <prvResetNextTaskUnblockTime+0x38>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <prvResetNextTaskUnblockTime+0x3c>)
 8003782:	6013      	str	r3, [r2, #0]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20000cf0 	.word	0x20000cf0
 8003794:	20000d58 	.word	0x20000d58

08003798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <xTaskGetSchedulerState+0x34>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d102      	bne.n	80037ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037a6:	2301      	movs	r3, #1
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	e008      	b.n	80037be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <xTaskGetSchedulerState+0x38>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037b4:	2302      	movs	r3, #2
 80037b6:	607b      	str	r3, [r7, #4]
 80037b8:	e001      	b.n	80037be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80037be:	687b      	ldr	r3, [r7, #4]
	}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	20000d44 	.word	0x20000d44
 80037d0:	20000d60 	.word	0x20000d60

080037d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d056      	beq.n	8003898 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80037ea:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <xTaskPriorityDisinherit+0xd0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d00a      	beq.n	800380a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	60fb      	str	r3, [r7, #12]
}
 8003806:	bf00      	nop
 8003808:	e7fe      	b.n	8003808 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60bb      	str	r3, [r7, #8]
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	1e5a      	subs	r2, r3, #1
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	429a      	cmp	r2, r3
 800383c:	d02c      	beq.n	8003898 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003842:	2b00      	cmp	r3, #0
 8003844:	d128      	bne.n	8003898 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	3304      	adds	r3, #4
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fc46 	bl	80020dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <xTaskPriorityDisinherit+0xd4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d903      	bls.n	8003878 <xTaskPriorityDisinherit+0xa4>
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <xTaskPriorityDisinherit+0xd4>)
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4a09      	ldr	r2, [pc, #36]	; (80038ac <xTaskPriorityDisinherit+0xd8>)
 8003886:	441a      	add	r2, r3
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f7fe fbc7 	bl	8002022 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003894:	2301      	movs	r3, #1
 8003896:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003898:	697b      	ldr	r3, [r7, #20]
	}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000864 	.word	0x20000864
 80038a8:	20000d40 	.word	0x20000d40
 80038ac:	20000868 	.word	0x20000868

080038b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038ba:	4b21      	ldr	r3, [pc, #132]	; (8003940 <prvAddCurrentTaskToDelayedList+0x90>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038c0:	4b20      	ldr	r3, [pc, #128]	; (8003944 <prvAddCurrentTaskToDelayedList+0x94>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fc08 	bl	80020dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d10a      	bne.n	80038ea <prvAddCurrentTaskToDelayedList+0x3a>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038da:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <prvAddCurrentTaskToDelayedList+0x94>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3304      	adds	r3, #4
 80038e0:	4619      	mov	r1, r3
 80038e2:	4819      	ldr	r0, [pc, #100]	; (8003948 <prvAddCurrentTaskToDelayedList+0x98>)
 80038e4:	f7fe fb9d 	bl	8002022 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038e8:	e026      	b.n	8003938 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <prvAddCurrentTaskToDelayedList+0x94>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d209      	bcs.n	8003916 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <prvAddCurrentTaskToDelayedList+0x94>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3304      	adds	r3, #4
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f7fe fbab 	bl	800206a <vListInsert>
}
 8003914:	e010      	b.n	8003938 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003916:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <prvAddCurrentTaskToDelayedList+0x94>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f7fe fba1 	bl	800206a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d202      	bcs.n	8003938 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003932:	4a08      	ldr	r2, [pc, #32]	; (8003954 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6013      	str	r3, [r2, #0]
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000d3c 	.word	0x20000d3c
 8003944:	20000864 	.word	0x20000864
 8003948:	20000d24 	.word	0x20000d24
 800394c:	20000cf4 	.word	0x20000cf4
 8003950:	20000cf0 	.word	0x20000cf0
 8003954:	20000d58 	.word	0x20000d58

08003958 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003962:	f000 fb07 	bl	8003f74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <xTimerCreateTimerTask+0x80>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d021      	beq.n	80039b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003976:	1d3a      	adds	r2, r7, #4
 8003978:	f107 0108 	add.w	r1, r7, #8
 800397c:	f107 030c 	add.w	r3, r7, #12
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fb07 	bl	8001f94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	9202      	str	r2, [sp, #8]
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	2302      	movs	r3, #2
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	2300      	movs	r3, #0
 8003996:	460a      	mov	r2, r1
 8003998:	4910      	ldr	r1, [pc, #64]	; (80039dc <xTimerCreateTimerTask+0x84>)
 800399a:	4811      	ldr	r0, [pc, #68]	; (80039e0 <xTimerCreateTimerTask+0x88>)
 800399c:	f7ff f8b4 	bl	8002b08 <xTaskCreateStatic>
 80039a0:	4603      	mov	r3, r0
 80039a2:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <xTimerCreateTimerTask+0x8c>)
 80039a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039a6:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <xTimerCreateTimerTask+0x8c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039ae:	2301      	movs	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	613b      	str	r3, [r7, #16]
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80039ce:	697b      	ldr	r3, [r7, #20]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000d94 	.word	0x20000d94
 80039dc:	08004a70 	.word	0x08004a70
 80039e0:	08003b1d 	.word	0x08003b1d
 80039e4:	20000d98 	.word	0x20000d98

080039e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	623b      	str	r3, [r7, #32]
}
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a16:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <xTimerGenericCommand+0x98>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d02a      	beq.n	8003a74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	dc18      	bgt.n	8003a62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a30:	f7ff feb2 	bl	8003798 <xTaskGetSchedulerState>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d109      	bne.n	8003a4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a3a:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <xTimerGenericCommand+0x98>)
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f107 0110 	add.w	r1, r7, #16
 8003a42:	2300      	movs	r3, #0
 8003a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a46:	f7fe fc77 	bl	8002338 <xQueueGenericSend>
 8003a4a:	6278      	str	r0, [r7, #36]	; 0x24
 8003a4c:	e012      	b.n	8003a74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <xTimerGenericCommand+0x98>)
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	f107 0110 	add.w	r1, r7, #16
 8003a56:	2300      	movs	r3, #0
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f7fe fc6d 	bl	8002338 <xQueueGenericSend>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8003a60:	e008      	b.n	8003a74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <xTimerGenericCommand+0x98>)
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	f107 0110 	add.w	r1, r7, #16
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	f7fe fd61 	bl	8002534 <xQueueGenericSendFromISR>
 8003a72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3728      	adds	r7, #40	; 0x28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000d94 	.word	0x20000d94

08003a84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a8e:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <prvProcessExpiredTimer+0x94>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fb1d 	bl	80020dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d022      	beq.n	8003af6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	699a      	ldr	r2, [r3, #24]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	18d1      	adds	r1, r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	6978      	ldr	r0, [r7, #20]
 8003abe:	f000 f8d1 	bl	8003c64 <prvInsertTimerInActiveList>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01f      	beq.n	8003b08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2300      	movs	r3, #0
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	6978      	ldr	r0, [r7, #20]
 8003ad4:	f7ff ff88 	bl	80039e8 <xTimerGenericCommand>
 8003ad8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d113      	bne.n	8003b08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	60fb      	str	r3, [r7, #12]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	6978      	ldr	r0, [r7, #20]
 8003b0e:	4798      	blx	r3
}
 8003b10:	bf00      	nop
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000d8c 	.word	0x20000d8c

08003b1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 f857 	bl	8003bdc <prvGetNextExpireTime>
 8003b2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4619      	mov	r1, r3
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f803 	bl	8003b40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b3a:	f000 f8d5 	bl	8003ce8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b3e:	e7f1      	b.n	8003b24 <prvTimerTask+0x8>

08003b40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b4a:	f7ff fa39 	bl	8002fc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b4e:	f107 0308 	add.w	r3, r7, #8
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f866 	bl	8003c24 <prvSampleTimeNow>
 8003b58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d130      	bne.n	8003bc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <prvProcessTimerOrBlockTask+0x3c>
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d806      	bhi.n	8003b7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b6e:	f7ff fa35 	bl	8002fdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b72:	68f9      	ldr	r1, [r7, #12]
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff85 	bl	8003a84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b7a:	e024      	b.n	8003bc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <prvProcessTimerOrBlockTask+0x90>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <prvProcessTimerOrBlockTask+0x50>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <prvProcessTimerOrBlockTask+0x52>
 8003b90:	2300      	movs	r3, #0
 8003b92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <prvProcessTimerOrBlockTask+0x94>)
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f7fe ff7d 	bl	8002aa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003ba6:	f7ff fa19 	bl	8002fdc <xTaskResumeAll>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <prvProcessTimerOrBlockTask+0x98>)
 8003bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	f3bf 8f6f 	isb	sy
}
 8003bc0:	e001      	b.n	8003bc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003bc2:	f7ff fa0b 	bl	8002fdc <xTaskResumeAll>
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000d90 	.word	0x20000d90
 8003bd4:	20000d94 	.word	0x20000d94
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003be4:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <prvGetNextExpireTime+0x44>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <prvGetNextExpireTime+0x16>
 8003bee:	2201      	movs	r2, #1
 8003bf0:	e000      	b.n	8003bf4 <prvGetNextExpireTime+0x18>
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <prvGetNextExpireTime+0x44>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e001      	b.n	8003c10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c10:	68fb      	ldr	r3, [r7, #12]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000d8c 	.word	0x20000d8c

08003c24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c2c:	f7ff fa74 	bl	8003118 <xTaskGetTickCount>
 8003c30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <prvSampleTimeNow+0x3c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d205      	bcs.n	8003c48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c3c:	f000 f936 	bl	8003eac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e002      	b.n	8003c4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c4e:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <prvSampleTimeNow+0x3c>)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c54:	68fb      	ldr	r3, [r7, #12]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000d9c 	.word	0x20000d9c

08003c64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d812      	bhi.n	8003cb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e01b      	b.n	8003cd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <prvInsertTimerInActiveList+0x7c>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f7fe f9de 	bl	800206a <vListInsert>
 8003cae:	e012      	b.n	8003cd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d206      	bcs.n	8003cc6 <prvInsertTimerInActiveList+0x62>
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d302      	bcc.n	8003cc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e007      	b.n	8003cd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <prvInsertTimerInActiveList+0x80>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f7fe f9ca 	bl	800206a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cd6:	697b      	ldr	r3, [r7, #20]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000d90 	.word	0x20000d90
 8003ce4:	20000d8c 	.word	0x20000d8c

08003ce8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08e      	sub	sp, #56	; 0x38
 8003cec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cee:	e0ca      	b.n	8003e86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	da18      	bge.n	8003d28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	61fb      	str	r3, [r7, #28]
}
 8003d14:	bf00      	nop
 8003d16:	e7fe      	b.n	8003d16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1e:	6850      	ldr	r0, [r2, #4]
 8003d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d22:	6892      	ldr	r2, [r2, #8]
 8003d24:	4611      	mov	r1, r2
 8003d26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f2c0 80ab 	blt.w	8003e86 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe f9cb 	bl	80020dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d46:	463b      	mov	r3, r7
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff6b 	bl	8003c24 <prvSampleTimeNow>
 8003d4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	f200 8096 	bhi.w	8003e84 <prvProcessReceivedCommands+0x19c>
 8003d58:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <prvProcessReceivedCommands+0x78>)
 8003d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5e:	bf00      	nop
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08003d89 	.word	0x08003d89
 8003d6c:	08003dfd 	.word	0x08003dfd
 8003d70:	08003e11 	.word	0x08003e11
 8003d74:	08003e5b 	.word	0x08003e5b
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003d89 	.word	0x08003d89
 8003d80:	08003dfd 	.word	0x08003dfd
 8003d84:	08003e11 	.word	0x08003e11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	18d1      	adds	r1, r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da8:	f7ff ff5c 	bl	8003c64 <prvInsertTimerInActiveList>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d069      	beq.n	8003e86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d05e      	beq.n	8003e86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	441a      	add	r2, r3
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dda:	f7ff fe05 	bl	80039e8 <xTimerGenericCommand>
 8003dde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d14f      	bne.n	8003e86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	61bb      	str	r3, [r7, #24]
}
 8003df8:	bf00      	nop
 8003dfa:	e7fe      	b.n	8003dfa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003e0e:	e03a      	b.n	8003e86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	617b      	str	r3, [r7, #20]
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	18d1      	adds	r1, r2, r3
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e54:	f7ff ff06 	bl	8003c64 <prvInsertTimerInActiveList>
					break;
 8003e58:	e015      	b.n	8003e86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d103      	bne.n	8003e70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e6a:	f000 fbe1 	bl	8004630 <vPortFree>
 8003e6e:	e00a      	b.n	8003e86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e82:	e000      	b.n	8003e86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003e84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <prvProcessReceivedCommands+0x1c0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1d39      	adds	r1, r7, #4
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fbec 	bl	800266c <xQueueReceive>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f47f af2a 	bne.w	8003cf0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	3730      	adds	r7, #48	; 0x30
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000d94 	.word	0x20000d94

08003eac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eb2:	e048      	b.n	8003f46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003eb4:	4b2d      	ldr	r3, [pc, #180]	; (8003f6c <prvSwitchTimerLists+0xc0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ebe:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <prvSwitchTimerLists+0xc0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe f905 	bl	80020dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d02e      	beq.n	8003f46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4413      	add	r3, r2
 8003ef0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d90e      	bls.n	8003f18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f06:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <prvSwitchTimerLists+0xc0>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f7fe f8aa 	bl	800206a <vListInsert>
 8003f16:	e016      	b.n	8003f46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	2100      	movs	r1, #0
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff fd60 	bl	80039e8 <xTimerGenericCommand>
 8003f28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	603b      	str	r3, [r7, #0]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <prvSwitchTimerLists+0xc0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1b1      	bne.n	8003eb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <prvSwitchTimerLists+0xc0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <prvSwitchTimerLists+0xc4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <prvSwitchTimerLists+0xc0>)
 8003f5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f5e:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <prvSwitchTimerLists+0xc4>)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	6013      	str	r3, [r2, #0]
}
 8003f64:	bf00      	nop
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000d8c 	.word	0x20000d8c
 8003f70:	20000d90 	.word	0x20000d90

08003f74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f7a:	f000 f96b 	bl	8004254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <prvCheckForValidListAndQueue+0x60>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d120      	bne.n	8003fc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f86:	4814      	ldr	r0, [pc, #80]	; (8003fd8 <prvCheckForValidListAndQueue+0x64>)
 8003f88:	f7fe f81e 	bl	8001fc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f8c:	4813      	ldr	r0, [pc, #76]	; (8003fdc <prvCheckForValidListAndQueue+0x68>)
 8003f8e:	f7fe f81b 	bl	8001fc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f92:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <prvCheckForValidListAndQueue+0x6c>)
 8003f94:	4a10      	ldr	r2, [pc, #64]	; (8003fd8 <prvCheckForValidListAndQueue+0x64>)
 8003f96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <prvCheckForValidListAndQueue+0x70>)
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <prvCheckForValidListAndQueue+0x68>)
 8003f9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <prvCheckForValidListAndQueue+0x74>)
 8003fa4:	4a11      	ldr	r2, [pc, #68]	; (8003fec <prvCheckForValidListAndQueue+0x78>)
 8003fa6:	2110      	movs	r1, #16
 8003fa8:	200a      	movs	r0, #10
 8003faa:	f7fe f929 	bl	8002200 <xQueueGenericCreateStatic>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <prvCheckForValidListAndQueue+0x60>)
 8003fb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003fb4:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <prvCheckForValidListAndQueue+0x60>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <prvCheckForValidListAndQueue+0x60>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	490b      	ldr	r1, [pc, #44]	; (8003ff0 <prvCheckForValidListAndQueue+0x7c>)
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fd42 	bl	8002a4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fc8:	f000 f974 	bl	80042b4 <vPortExitCritical>
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000d94 	.word	0x20000d94
 8003fd8:	20000d64 	.word	0x20000d64
 8003fdc:	20000d78 	.word	0x20000d78
 8003fe0:	20000d8c 	.word	0x20000d8c
 8003fe4:	20000d90 	.word	0x20000d90
 8003fe8:	20000e40 	.word	0x20000e40
 8003fec:	20000da0 	.word	0x20000da0
 8003ff0:	08004a78 	.word	0x08004a78

08003ff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3b04      	subs	r3, #4
 8004004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800400c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b04      	subs	r3, #4
 8004012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3b04      	subs	r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004024:	4a0c      	ldr	r2, [pc, #48]	; (8004058 <pxPortInitialiseStack+0x64>)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3b14      	subs	r3, #20
 800402e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3b04      	subs	r3, #4
 800403a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f06f 0202 	mvn.w	r2, #2
 8004042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3b20      	subs	r3, #32
 8004048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	0800405d 	.word	0x0800405d

0800405c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004066:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <prvTaskExitError+0x54>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d00a      	beq.n	8004086 <prvTaskExitError+0x2a>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	60fb      	str	r3, [r7, #12]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <prvTaskExitError+0x28>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	60bb      	str	r3, [r7, #8]
}
 8004098:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800409a:	bf00      	nop
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0fc      	beq.n	800409c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	2000000c 	.word	0x2000000c
	...

080040c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <pxCurrentTCBConst2>)
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	f380 8809 	msr	PSP, r0
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8811 	msr	BASEPRI, r0
 80040da:	4770      	bx	lr
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst2>:
 80040e0:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040e8:	4808      	ldr	r0, [pc, #32]	; (800410c <prvPortStartFirstTask+0x24>)
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f380 8808 	msr	MSP, r0
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8814 	msr	CONTROL, r0
 80040fa:	b662      	cpsie	i
 80040fc:	b661      	cpsie	f
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	df00      	svc	0
 8004108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800410a:	bf00      	nop
 800410c:	e000ed08 	.word	0xe000ed08

08004110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004116:	4b46      	ldr	r3, [pc, #280]	; (8004230 <xPortStartScheduler+0x120>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a46      	ldr	r2, [pc, #280]	; (8004234 <xPortStartScheduler+0x124>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10a      	bne.n	8004136 <xPortStartScheduler+0x26>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	613b      	str	r3, [r7, #16]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <xPortStartScheduler+0x120>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a3f      	ldr	r2, [pc, #252]	; (8004238 <xPortStartScheduler+0x128>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d10a      	bne.n	8004156 <xPortStartScheduler+0x46>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	60fb      	str	r3, [r7, #12]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004156:	4b39      	ldr	r3, [pc, #228]	; (800423c <xPortStartScheduler+0x12c>)
 8004158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	22ff      	movs	r2, #255	; 0xff
 8004166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004178:	b2da      	uxtb	r2, r3
 800417a:	4b31      	ldr	r3, [pc, #196]	; (8004240 <xPortStartScheduler+0x130>)
 800417c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800417e:	4b31      	ldr	r3, [pc, #196]	; (8004244 <xPortStartScheduler+0x134>)
 8004180:	2207      	movs	r2, #7
 8004182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004184:	e009      	b.n	800419a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004186:	4b2f      	ldr	r3, [pc, #188]	; (8004244 <xPortStartScheduler+0x134>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3b01      	subs	r3, #1
 800418c:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <xPortStartScheduler+0x134>)
 800418e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	b2db      	uxtb	r3, r3
 8004198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	d0ef      	beq.n	8004186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041a6:	4b27      	ldr	r3, [pc, #156]	; (8004244 <xPortStartScheduler+0x134>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1c3 0307 	rsb	r3, r3, #7
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d00a      	beq.n	80041c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60bb      	str	r3, [r7, #8]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041c8:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <xPortStartScheduler+0x134>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <xPortStartScheduler+0x134>)
 80041d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041d2:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <xPortStartScheduler+0x134>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <xPortStartScheduler+0x134>)
 80041dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041e6:	4b18      	ldr	r3, [pc, #96]	; (8004248 <xPortStartScheduler+0x138>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a17      	ldr	r2, [pc, #92]	; (8004248 <xPortStartScheduler+0x138>)
 80041ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <xPortStartScheduler+0x138>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a14      	ldr	r2, [pc, #80]	; (8004248 <xPortStartScheduler+0x138>)
 80041f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041fe:	f000 f8dd 	bl	80043bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <xPortStartScheduler+0x13c>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004208:	f000 f8fc 	bl	8004404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800420c:	4b10      	ldr	r3, [pc, #64]	; (8004250 <xPortStartScheduler+0x140>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0f      	ldr	r2, [pc, #60]	; (8004250 <xPortStartScheduler+0x140>)
 8004212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004218:	f7ff ff66 	bl	80040e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800421c:	f7ff f846 	bl	80032ac <vTaskSwitchContext>
	prvTaskExitError();
 8004220:	f7ff ff1c 	bl	800405c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	e000ed00 	.word	0xe000ed00
 8004234:	410fc271 	.word	0x410fc271
 8004238:	410fc270 	.word	0x410fc270
 800423c:	e000e400 	.word	0xe000e400
 8004240:	20000e90 	.word	0x20000e90
 8004244:	20000e94 	.word	0x20000e94
 8004248:	e000ed20 	.word	0xe000ed20
 800424c:	2000000c 	.word	0x2000000c
 8004250:	e000ef34 	.word	0xe000ef34

08004254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	607b      	str	r3, [r7, #4]
}
 800426c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <vPortEnterCritical+0x58>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	4a0d      	ldr	r2, [pc, #52]	; (80042ac <vPortEnterCritical+0x58>)
 8004276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <vPortEnterCritical+0x58>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10f      	bne.n	80042a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <vPortEnterCritical+0x5c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	603b      	str	r3, [r7, #0]
}
 800429c:	bf00      	nop
 800429e:	e7fe      	b.n	800429e <vPortEnterCritical+0x4a>
	}
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	2000000c 	.word	0x2000000c
 80042b0:	e000ed04 	.word	0xe000ed04

080042b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <vPortExitCritical+0x50>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <vPortExitCritical+0x24>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	607b      	str	r3, [r7, #4]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <vPortExitCritical+0x50>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3b01      	subs	r3, #1
 80042de:	4a09      	ldr	r2, [pc, #36]	; (8004304 <vPortExitCritical+0x50>)
 80042e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <vPortExitCritical+0x50>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d105      	bne.n	80042f6 <vPortExitCritical+0x42>
 80042ea:	2300      	movs	r3, #0
 80042ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f383 8811 	msr	BASEPRI, r3
}
 80042f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	2000000c 	.word	0x2000000c
	...

08004310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004310:	f3ef 8009 	mrs	r0, PSP
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <pxCurrentTCBConst>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	f01e 0f10 	tst.w	lr, #16
 8004320:	bf08      	it	eq
 8004322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	6010      	str	r0, [r2, #0]
 800432c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004334:	f380 8811 	msr	BASEPRI, r0
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f7fe ffb4 	bl	80032ac <vTaskSwitchContext>
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f380 8811 	msr	BASEPRI, r0
 800434c:	bc09      	pop	{r0, r3}
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	6808      	ldr	r0, [r1, #0]
 8004352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004356:	f01e 0f10 	tst.w	lr, #16
 800435a:	bf08      	it	eq
 800435c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004360:	f380 8809 	msr	PSP, r0
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	f3af 8000 	nop.w

08004370 <pxCurrentTCBConst>:
 8004370:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
}
 8004390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004392:	f7fe fed1 	bl	8003138 <xTaskIncrementTick>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <xPortSysTickHandler+0x40>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f383 8811 	msr	BASEPRI, r3
}
 80043ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <vPortSetupTimerInterrupt+0x38>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <vPortSetupTimerInterrupt+0x3c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <vPortSetupTimerInterrupt+0x40>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	4a09      	ldr	r2, [pc, #36]	; (8004400 <vPortSetupTimerInterrupt+0x44>)
 80043da:	3b01      	subs	r3, #1
 80043dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043de:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000e010 	.word	0xe000e010
 80043f4:	e000e018 	.word	0xe000e018
 80043f8:	20000000 	.word	0x20000000
 80043fc:	10624dd3 	.word	0x10624dd3
 8004400:	e000e014 	.word	0xe000e014

08004404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004414 <vPortEnableVFP+0x10>
 8004408:	6801      	ldr	r1, [r0, #0]
 800440a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800440e:	6001      	str	r1, [r0, #0]
 8004410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004412:	bf00      	nop
 8004414:	e000ed88 	.word	0xe000ed88

08004418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800441e:	f3ef 8305 	mrs	r3, IPSR
 8004422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b0f      	cmp	r3, #15
 8004428:	d914      	bls.n	8004454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800442a:	4a17      	ldr	r2, [pc, #92]	; (8004488 <vPortValidateInterruptPriority+0x70>)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004434:	4b15      	ldr	r3, [pc, #84]	; (800448c <vPortValidateInterruptPriority+0x74>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	7afa      	ldrb	r2, [r7, #11]
 800443a:	429a      	cmp	r2, r3
 800443c:	d20a      	bcs.n	8004454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	607b      	str	r3, [r7, #4]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004454:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <vPortValidateInterruptPriority+0x78>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <vPortValidateInterruptPriority+0x7c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d90a      	bls.n	800447a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	603b      	str	r3, [r7, #0]
}
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <vPortValidateInterruptPriority+0x60>
	}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000e3f0 	.word	0xe000e3f0
 800448c:	20000e90 	.word	0x20000e90
 8004490:	e000ed0c 	.word	0xe000ed0c
 8004494:	20000e94 	.word	0x20000e94

08004498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044a4:	f7fe fd8c 	bl	8002fc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044a8:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <pvPortMalloc+0x180>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044b0:	f000 f920 	bl	80046f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <pvPortMalloc+0x184>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f040 8093 	bne.w	80045e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01d      	beq.n	8004504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80044c8:	2208      	movs	r2, #8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d014      	beq.n	8004504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f023 0307 	bic.w	r3, r3, #7
 80044e0:	3308      	adds	r3, #8
 80044e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <pvPortMalloc+0x6c>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	617b      	str	r3, [r7, #20]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d06e      	beq.n	80045e8 <pvPortMalloc+0x150>
 800450a:	4b45      	ldr	r3, [pc, #276]	; (8004620 <pvPortMalloc+0x188>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d869      	bhi.n	80045e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004514:	4b43      	ldr	r3, [pc, #268]	; (8004624 <pvPortMalloc+0x18c>)
 8004516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004518:	4b42      	ldr	r3, [pc, #264]	; (8004624 <pvPortMalloc+0x18c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800451e:	e004      	b.n	800452a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d903      	bls.n	800453c <pvPortMalloc+0xa4>
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f1      	bne.n	8004520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800453c:	4b36      	ldr	r3, [pc, #216]	; (8004618 <pvPortMalloc+0x180>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004542:	429a      	cmp	r2, r3
 8004544:	d050      	beq.n	80045e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2208      	movs	r2, #8
 800454c:	4413      	add	r3, r2
 800454e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	1ad2      	subs	r2, r2, r3
 8004560:	2308      	movs	r3, #8
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	429a      	cmp	r2, r3
 8004566:	d91f      	bls.n	80045a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <pvPortMalloc+0xf8>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	613b      	str	r3, [r7, #16]
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	1ad2      	subs	r2, r2, r3
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045a2:	69b8      	ldr	r0, [r7, #24]
 80045a4:	f000 f908 	bl	80047b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <pvPortMalloc+0x188>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <pvPortMalloc+0x188>)
 80045b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <pvPortMalloc+0x188>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <pvPortMalloc+0x190>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d203      	bcs.n	80045ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <pvPortMalloc+0x188>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <pvPortMalloc+0x190>)
 80045c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <pvPortMalloc+0x184>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <pvPortMalloc+0x194>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a11      	ldr	r2, [pc, #68]	; (800462c <pvPortMalloc+0x194>)
 80045e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045e8:	f7fe fcf8 	bl	8002fdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <pvPortMalloc+0x174>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	60fb      	str	r3, [r7, #12]
}
 8004608:	bf00      	nop
 800460a:	e7fe      	b.n	800460a <pvPortMalloc+0x172>
	return pvReturn;
 800460c:	69fb      	ldr	r3, [r7, #28]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20004aa0 	.word	0x20004aa0
 800461c:	20004ab4 	.word	0x20004ab4
 8004620:	20004aa4 	.word	0x20004aa4
 8004624:	20004a98 	.word	0x20004a98
 8004628:	20004aa8 	.word	0x20004aa8
 800462c:	20004aac 	.word	0x20004aac

08004630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d04d      	beq.n	80046de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004642:	2308      	movs	r3, #8
 8004644:	425b      	negs	r3, r3
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4413      	add	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <vPortFree+0xb8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <vPortFree+0x44>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60fb      	str	r3, [r7, #12]
}
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <vPortFree+0x62>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	60bb      	str	r3, [r7, #8]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <vPortFree+0xb8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01e      	beq.n	80046de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d11a      	bne.n	80046de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <vPortFree+0xb8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	401a      	ands	r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046b8:	f7fe fc82 	bl	8002fc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <vPortFree+0xbc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	4a09      	ldr	r2, [pc, #36]	; (80046ec <vPortFree+0xbc>)
 80046c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ca:	6938      	ldr	r0, [r7, #16]
 80046cc:	f000 f874 	bl	80047b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046d0:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <vPortFree+0xc0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3301      	adds	r3, #1
 80046d6:	4a06      	ldr	r2, [pc, #24]	; (80046f0 <vPortFree+0xc0>)
 80046d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046da:	f7fe fc7f 	bl	8002fdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046de:	bf00      	nop
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20004ab4 	.word	0x20004ab4
 80046ec:	20004aa4 	.word	0x20004aa4
 80046f0:	20004ab0 	.word	0x20004ab0

080046f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80046fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004700:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <prvHeapInit+0xac>)
 8004702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3307      	adds	r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0307 	bic.w	r3, r3, #7
 800471a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <prvHeapInit+0xac>)
 8004724:	4413      	add	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800472c:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <prvHeapInit+0xb0>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004732:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <prvHeapInit+0xb0>)
 8004734:	2200      	movs	r2, #0
 8004736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4413      	add	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004740:	2208      	movs	r2, #8
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0307 	bic.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <prvHeapInit+0xb4>)
 8004754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <prvHeapInit+0xb4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2200      	movs	r2, #0
 800475c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <prvHeapInit+0xb4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <prvHeapInit+0xb4>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <prvHeapInit+0xb8>)
 8004782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <prvHeapInit+0xbc>)
 800478a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <prvHeapInit+0xc0>)
 800478e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000e98 	.word	0x20000e98
 80047a4:	20004a98 	.word	0x20004a98
 80047a8:	20004aa0 	.word	0x20004aa0
 80047ac:	20004aa8 	.word	0x20004aa8
 80047b0:	20004aa4 	.word	0x20004aa4
 80047b4:	20004ab4 	.word	0x20004ab4

080047b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047c0:	4b28      	ldr	r3, [pc, #160]	; (8004864 <prvInsertBlockIntoFreeList+0xac>)
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e002      	b.n	80047cc <prvInsertBlockIntoFreeList+0x14>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d8f7      	bhi.n	80047c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d108      	bne.n	80047fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	441a      	add	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	441a      	add	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d118      	bne.n	8004840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <prvInsertBlockIntoFreeList+0xb0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d00d      	beq.n	8004836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	441a      	add	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e008      	b.n	8004848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004836:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <prvInsertBlockIntoFreeList+0xb0>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e003      	b.n	8004848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d002      	beq.n	8004856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20004a98 	.word	0x20004a98
 8004868:	20004aa0 	.word	0x20004aa0

0800486c <memset>:
 800486c:	4402      	add	r2, r0
 800486e:	4603      	mov	r3, r0
 8004870:	4293      	cmp	r3, r2
 8004872:	d100      	bne.n	8004876 <memset+0xa>
 8004874:	4770      	bx	lr
 8004876:	f803 1b01 	strb.w	r1, [r3], #1
 800487a:	e7f9      	b.n	8004870 <memset+0x4>

0800487c <_reclaim_reent>:
 800487c:	4b29      	ldr	r3, [pc, #164]	; (8004924 <_reclaim_reent+0xa8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4283      	cmp	r3, r0
 8004882:	b570      	push	{r4, r5, r6, lr}
 8004884:	4604      	mov	r4, r0
 8004886:	d04b      	beq.n	8004920 <_reclaim_reent+0xa4>
 8004888:	69c3      	ldr	r3, [r0, #28]
 800488a:	b143      	cbz	r3, 800489e <_reclaim_reent+0x22>
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d144      	bne.n	800491c <_reclaim_reent+0xa0>
 8004892:	69e3      	ldr	r3, [r4, #28]
 8004894:	6819      	ldr	r1, [r3, #0]
 8004896:	b111      	cbz	r1, 800489e <_reclaim_reent+0x22>
 8004898:	4620      	mov	r0, r4
 800489a:	f000 f879 	bl	8004990 <_free_r>
 800489e:	6961      	ldr	r1, [r4, #20]
 80048a0:	b111      	cbz	r1, 80048a8 <_reclaim_reent+0x2c>
 80048a2:	4620      	mov	r0, r4
 80048a4:	f000 f874 	bl	8004990 <_free_r>
 80048a8:	69e1      	ldr	r1, [r4, #28]
 80048aa:	b111      	cbz	r1, 80048b2 <_reclaim_reent+0x36>
 80048ac:	4620      	mov	r0, r4
 80048ae:	f000 f86f 	bl	8004990 <_free_r>
 80048b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80048b4:	b111      	cbz	r1, 80048bc <_reclaim_reent+0x40>
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 f86a 	bl	8004990 <_free_r>
 80048bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048be:	b111      	cbz	r1, 80048c6 <_reclaim_reent+0x4a>
 80048c0:	4620      	mov	r0, r4
 80048c2:	f000 f865 	bl	8004990 <_free_r>
 80048c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80048c8:	b111      	cbz	r1, 80048d0 <_reclaim_reent+0x54>
 80048ca:	4620      	mov	r0, r4
 80048cc:	f000 f860 	bl	8004990 <_free_r>
 80048d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80048d2:	b111      	cbz	r1, 80048da <_reclaim_reent+0x5e>
 80048d4:	4620      	mov	r0, r4
 80048d6:	f000 f85b 	bl	8004990 <_free_r>
 80048da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80048dc:	b111      	cbz	r1, 80048e4 <_reclaim_reent+0x68>
 80048de:	4620      	mov	r0, r4
 80048e0:	f000 f856 	bl	8004990 <_free_r>
 80048e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80048e6:	b111      	cbz	r1, 80048ee <_reclaim_reent+0x72>
 80048e8:	4620      	mov	r0, r4
 80048ea:	f000 f851 	bl	8004990 <_free_r>
 80048ee:	6a23      	ldr	r3, [r4, #32]
 80048f0:	b1b3      	cbz	r3, 8004920 <_reclaim_reent+0xa4>
 80048f2:	4620      	mov	r0, r4
 80048f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80048f8:	4718      	bx	r3
 80048fa:	5949      	ldr	r1, [r1, r5]
 80048fc:	b941      	cbnz	r1, 8004910 <_reclaim_reent+0x94>
 80048fe:	3504      	adds	r5, #4
 8004900:	69e3      	ldr	r3, [r4, #28]
 8004902:	2d80      	cmp	r5, #128	; 0x80
 8004904:	68d9      	ldr	r1, [r3, #12]
 8004906:	d1f8      	bne.n	80048fa <_reclaim_reent+0x7e>
 8004908:	4620      	mov	r0, r4
 800490a:	f000 f841 	bl	8004990 <_free_r>
 800490e:	e7c0      	b.n	8004892 <_reclaim_reent+0x16>
 8004910:	680e      	ldr	r6, [r1, #0]
 8004912:	4620      	mov	r0, r4
 8004914:	f000 f83c 	bl	8004990 <_free_r>
 8004918:	4631      	mov	r1, r6
 800491a:	e7ef      	b.n	80048fc <_reclaim_reent+0x80>
 800491c:	2500      	movs	r5, #0
 800491e:	e7ef      	b.n	8004900 <_reclaim_reent+0x84>
 8004920:	bd70      	pop	{r4, r5, r6, pc}
 8004922:	bf00      	nop
 8004924:	2000005c 	.word	0x2000005c

08004928 <__libc_init_array>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	4d0d      	ldr	r5, [pc, #52]	; (8004960 <__libc_init_array+0x38>)
 800492c:	4c0d      	ldr	r4, [pc, #52]	; (8004964 <__libc_init_array+0x3c>)
 800492e:	1b64      	subs	r4, r4, r5
 8004930:	10a4      	asrs	r4, r4, #2
 8004932:	2600      	movs	r6, #0
 8004934:	42a6      	cmp	r6, r4
 8004936:	d109      	bne.n	800494c <__libc_init_array+0x24>
 8004938:	4d0b      	ldr	r5, [pc, #44]	; (8004968 <__libc_init_array+0x40>)
 800493a:	4c0c      	ldr	r4, [pc, #48]	; (800496c <__libc_init_array+0x44>)
 800493c:	f000 f880 	bl	8004a40 <_init>
 8004940:	1b64      	subs	r4, r4, r5
 8004942:	10a4      	asrs	r4, r4, #2
 8004944:	2600      	movs	r6, #0
 8004946:	42a6      	cmp	r6, r4
 8004948:	d105      	bne.n	8004956 <__libc_init_array+0x2e>
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004950:	4798      	blx	r3
 8004952:	3601      	adds	r6, #1
 8004954:	e7ee      	b.n	8004934 <__libc_init_array+0xc>
 8004956:	f855 3b04 	ldr.w	r3, [r5], #4
 800495a:	4798      	blx	r3
 800495c:	3601      	adds	r6, #1
 800495e:	e7f2      	b.n	8004946 <__libc_init_array+0x1e>
 8004960:	08004ae8 	.word	0x08004ae8
 8004964:	08004ae8 	.word	0x08004ae8
 8004968:	08004ae8 	.word	0x08004ae8
 800496c:	08004aec 	.word	0x08004aec

08004970 <__retarget_lock_acquire_recursive>:
 8004970:	4770      	bx	lr

08004972 <__retarget_lock_release_recursive>:
 8004972:	4770      	bx	lr

08004974 <memcpy>:
 8004974:	440a      	add	r2, r1
 8004976:	4291      	cmp	r1, r2
 8004978:	f100 33ff 	add.w	r3, r0, #4294967295
 800497c:	d100      	bne.n	8004980 <memcpy+0xc>
 800497e:	4770      	bx	lr
 8004980:	b510      	push	{r4, lr}
 8004982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800498a:	4291      	cmp	r1, r2
 800498c:	d1f9      	bne.n	8004982 <memcpy+0xe>
 800498e:	bd10      	pop	{r4, pc}

08004990 <_free_r>:
 8004990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004992:	2900      	cmp	r1, #0
 8004994:	d044      	beq.n	8004a20 <_free_r+0x90>
 8004996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499a:	9001      	str	r0, [sp, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f1a1 0404 	sub.w	r4, r1, #4
 80049a2:	bfb8      	it	lt
 80049a4:	18e4      	addlt	r4, r4, r3
 80049a6:	f000 f83f 	bl	8004a28 <__malloc_lock>
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <_free_r+0x94>)
 80049ac:	9801      	ldr	r0, [sp, #4]
 80049ae:	6813      	ldr	r3, [r2, #0]
 80049b0:	b933      	cbnz	r3, 80049c0 <_free_r+0x30>
 80049b2:	6063      	str	r3, [r4, #4]
 80049b4:	6014      	str	r4, [r2, #0]
 80049b6:	b003      	add	sp, #12
 80049b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049bc:	f000 b83a 	b.w	8004a34 <__malloc_unlock>
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	d908      	bls.n	80049d6 <_free_r+0x46>
 80049c4:	6825      	ldr	r5, [r4, #0]
 80049c6:	1961      	adds	r1, r4, r5
 80049c8:	428b      	cmp	r3, r1
 80049ca:	bf01      	itttt	eq
 80049cc:	6819      	ldreq	r1, [r3, #0]
 80049ce:	685b      	ldreq	r3, [r3, #4]
 80049d0:	1949      	addeq	r1, r1, r5
 80049d2:	6021      	streq	r1, [r4, #0]
 80049d4:	e7ed      	b.n	80049b2 <_free_r+0x22>
 80049d6:	461a      	mov	r2, r3
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	b10b      	cbz	r3, 80049e0 <_free_r+0x50>
 80049dc:	42a3      	cmp	r3, r4
 80049de:	d9fa      	bls.n	80049d6 <_free_r+0x46>
 80049e0:	6811      	ldr	r1, [r2, #0]
 80049e2:	1855      	adds	r5, r2, r1
 80049e4:	42a5      	cmp	r5, r4
 80049e6:	d10b      	bne.n	8004a00 <_free_r+0x70>
 80049e8:	6824      	ldr	r4, [r4, #0]
 80049ea:	4421      	add	r1, r4
 80049ec:	1854      	adds	r4, r2, r1
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	6011      	str	r1, [r2, #0]
 80049f2:	d1e0      	bne.n	80049b6 <_free_r+0x26>
 80049f4:	681c      	ldr	r4, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	6053      	str	r3, [r2, #4]
 80049fa:	440c      	add	r4, r1
 80049fc:	6014      	str	r4, [r2, #0]
 80049fe:	e7da      	b.n	80049b6 <_free_r+0x26>
 8004a00:	d902      	bls.n	8004a08 <_free_r+0x78>
 8004a02:	230c      	movs	r3, #12
 8004a04:	6003      	str	r3, [r0, #0]
 8004a06:	e7d6      	b.n	80049b6 <_free_r+0x26>
 8004a08:	6825      	ldr	r5, [r4, #0]
 8004a0a:	1961      	adds	r1, r4, r5
 8004a0c:	428b      	cmp	r3, r1
 8004a0e:	bf04      	itt	eq
 8004a10:	6819      	ldreq	r1, [r3, #0]
 8004a12:	685b      	ldreq	r3, [r3, #4]
 8004a14:	6063      	str	r3, [r4, #4]
 8004a16:	bf04      	itt	eq
 8004a18:	1949      	addeq	r1, r1, r5
 8004a1a:	6021      	streq	r1, [r4, #0]
 8004a1c:	6054      	str	r4, [r2, #4]
 8004a1e:	e7ca      	b.n	80049b6 <_free_r+0x26>
 8004a20:	b003      	add	sp, #12
 8004a22:	bd30      	pop	{r4, r5, pc}
 8004a24:	20004bf4 	.word	0x20004bf4

08004a28 <__malloc_lock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__malloc_lock+0x8>)
 8004a2a:	f7ff bfa1 	b.w	8004970 <__retarget_lock_acquire_recursive>
 8004a2e:	bf00      	nop
 8004a30:	20004bf0 	.word	0x20004bf0

08004a34 <__malloc_unlock>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__malloc_unlock+0x8>)
 8004a36:	f7ff bf9c 	b.w	8004972 <__retarget_lock_release_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	20004bf0 	.word	0x20004bf0

08004a40 <_init>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr

08004a4c <_fini>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr
