
LPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005160  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800535c  0800535c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005364  08005364  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800536c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be8  20000060  080053cc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c48  080053cc  00024c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177b5  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003275  00000000  00000000  00037888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003ab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f86  00000000  00000000  0003bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001873d  00000000  00000000  0003ce7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001623e  00000000  00000000  000555bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000989f6  00000000  00000000  0006b7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000573c  00000000  00000000  001041f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010992c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052e8 	.word	0x080052e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080052e8 	.word	0x080052e8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <PreSleepProcessing>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fa42 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f818 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f89e 	bl	8000650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f872 	bl	80005fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000518:	f001 fee8 	bl	80022ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 800051c:	4a05      	ldr	r2, [pc, #20]	; (8000534 <main+0x30>)
 800051e:	2100      	movs	r1, #0
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <main+0x34>)
 8000522:	f001 ff2d 	bl	8002380 <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <main+0x38>)
 800052a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f001 ff02 	bl	8002334 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x2c>
 8000532:	bf00      	nop
 8000534:	08005320 	.word	0x08005320
 8000538:	080006cd 	.word	0x080006cd
 800053c:	200000c4 	.word	0x200000c4

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f004 fde0 	bl	8005114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xb4>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xb4>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xb4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <SystemClock_Config+0xb8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <SystemClock_Config+0xb8>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <SystemClock_Config+0xb8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fc95 	bl	8000ee0 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005bc:	f000 f8a0 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fef8 	bl	80013d0 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005e6:	f000 f88b 	bl	8000700 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART2_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000634:	f001 fb52 	bl	8001cdc <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f85f 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000007c 	.word	0x2000007c
 800064c:	40004400 	.word	0x40004400

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_GPIO_Init+0x74>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MX_GPIO_Init+0x74>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_GPIO_Init+0x74>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_GPIO_Init+0x74>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <MX_GPIO_Init+0x74>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_GPIO_Init+0x74>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800069e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4619      	mov	r1, r3
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_GPIO_Init+0x78>)
 80006b6:	f000 fa8f 	bl	8000bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ba:	bf00      	nop
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020800 	.word	0x40020800

080006cc <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f001 fee5 	bl	80024a4 <osDelay>
 80006da:	e7fb      	b.n	80006d4 <StartTask1+0x8>

080006dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d101      	bne.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ee:	f000 f971 	bl	80009d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40014400 	.word	0x40014400

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x8>
	...

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_MspInit+0x54>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	4a11      	ldr	r2, [pc, #68]	; (8000760 <HAL_MspInit+0x54>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	6453      	str	r3, [r2, #68]	; 0x44
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x54>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <HAL_MspInit+0x54>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <HAL_MspInit+0x54>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_MspInit+0x54>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	210f      	movs	r1, #15
 800074e:	f06f 0001 	mvn.w	r0, #1
 8000752:	f000 fa17 	bl	8000b84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <HAL_UART_MspInit+0x84>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d12b      	bne.n	80007de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <HAL_UART_MspInit+0x88>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <HAL_UART_MspInit+0x88>)
 8000790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_UART_MspInit+0x88>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <HAL_UART_MspInit+0x88>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <HAL_UART_MspInit+0x88>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_UART_MspInit+0x88>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007be:	230c      	movs	r3, #12
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ce:	2307      	movs	r3, #7
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <HAL_UART_MspInit+0x8c>)
 80007da:	f000 f9fd 	bl	8000bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40004400 	.word	0x40004400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000

080007f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <HAL_InitTick+0xd0>)
 800080a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080c:	4a2d      	ldr	r2, [pc, #180]	; (80008c4 <HAL_InitTick+0xd0>)
 800080e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000812:	6453      	str	r3, [r2, #68]	; 0x44
 8000814:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <HAL_InitTick+0xd0>)
 8000816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000820:	f107 020c 	add.w	r2, r7, #12
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f000 ffb0 	bl	8001790 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000830:	f000 ff9a 	bl	8001768 <HAL_RCC_GetPCLK2Freq>
 8000834:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <HAL_InitTick+0xd4>)
 800083a:	fba2 2303 	umull	r2, r3, r2, r3
 800083e:	0c9b      	lsrs	r3, r3, #18
 8000840:	3b01      	subs	r3, #1
 8000842:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <HAL_InitTick+0xd8>)
 8000846:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <HAL_InitTick+0xdc>)
 8000848:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <HAL_InitTick+0xd8>)
 800084c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000850:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000852:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <HAL_InitTick+0xd8>)
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <HAL_InitTick+0xd8>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <HAL_InitTick+0xd8>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <HAL_InitTick+0xd8>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800086a:	4818      	ldr	r0, [pc, #96]	; (80008cc <HAL_InitTick+0xd8>)
 800086c:	f000 ffc2 	bl	80017f4 <HAL_TIM_Base_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800087a:	2b00      	cmp	r3, #0
 800087c:	d11b      	bne.n	80008b6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800087e:	4813      	ldr	r0, [pc, #76]	; (80008cc <HAL_InitTick+0xd8>)
 8000880:	f001 f812 	bl	80018a8 <HAL_TIM_Base_Start_IT>
 8000884:	4603      	mov	r3, r0
 8000886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800088a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800088e:	2b00      	cmp	r3, #0
 8000890:	d111      	bne.n	80008b6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000892:	2019      	movs	r0, #25
 8000894:	f000 f992 	bl	8000bbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b0f      	cmp	r3, #15
 800089c:	d808      	bhi.n	80008b0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800089e:	2200      	movs	r2, #0
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	2019      	movs	r0, #25
 80008a4:	f000 f96e 	bl	8000b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <HAL_InitTick+0xe0>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e002      	b.n	80008b6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	431bde83 	.word	0x431bde83
 80008cc:	200000c8 	.word	0x200000c8
 80008d0:	40014400 	.word	0x40014400
 80008d4:	20000004 	.word	0x20000004

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800090a:	f001 f82f 	bl	800196c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000c8 	.word	0x200000c8

08000918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800093c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000974 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000940:	f7ff ffea 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000946:	490d      	ldr	r1, [pc, #52]	; (800097c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000948:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800095c:	4c0a      	ldr	r4, [pc, #40]	; (8000988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096a:	f004 fc31 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096e:	f7ff fdc9 	bl	8000504 <main>
  bx  lr    
 8000972:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000980:	0800536c 	.word	0x0800536c
  ldr r2, =_sbss
 8000984:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000988:	20004c48 	.word	0x20004c48

0800098c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC_IRQHandler>
	...

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <HAL_Init+0x40>)
 800099a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_Init+0x40>)
 80009a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x40>)
 80009b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f8d8 	bl	8000b6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	200f      	movs	r0, #15
 80009c0:	f7ff ff18 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff fea2 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023c00 	.word	0x40023c00

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000110 	.word	0x20000110

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000110 	.word	0x20000110

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db0b      	blt.n	8000aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 021f 	and.w	r2, r3, #31
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <__NVIC_EnableIRQ+0x38>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	2001      	movs	r0, #1
 8000a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db0a      	blt.n	8000ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	490c      	ldr	r1, [pc, #48]	; (8000b00 <__NVIC_SetPriority+0x4c>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000adc:	e00a      	b.n	8000af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4908      	ldr	r1, [pc, #32]	; (8000b04 <__NVIC_SetPriority+0x50>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	3b04      	subs	r3, #4
 8000aec:	0112      	lsls	r2, r2, #4
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	440b      	add	r3, r1
 8000af2:	761a      	strb	r2, [r3, #24]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	; 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f1c3 0307 	rsb	r3, r3, #7
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	bf28      	it	cs
 8000b26:	2304      	movcs	r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d902      	bls.n	8000b38 <NVIC_EncodePriority+0x30>
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3b03      	subs	r3, #3
 8000b36:	e000      	b.n	8000b3a <NVIC_EncodePriority+0x32>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43da      	mvns	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43d9      	mvns	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	4313      	orrs	r3, r2
         );
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	; 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ff4c 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b96:	f7ff ff61 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000b9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	68b9      	ldr	r1, [r7, #8]
 8000ba0:	6978      	ldr	r0, [r7, #20]
 8000ba2:	f7ff ffb1 	bl	8000b08 <NVIC_EncodePriority>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff80 	bl	8000ab4 <__NVIC_SetPriority>
}
 8000bb4:	bf00      	nop
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff54 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	e159      	b.n	8000ea8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	f040 8148 	bne.w	8000ea2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d005      	beq.n	8000c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d130      	bne.n	8000c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	68da      	ldr	r2, [r3, #12]
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c60:	2201      	movs	r2, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	f003 0201 	and.w	r2, r3, #1
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d017      	beq.n	8000cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d123      	bne.n	8000d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	08da      	lsrs	r2, r3, #3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3208      	adds	r2, #8
 8000cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	220f      	movs	r2, #15
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	691a      	ldr	r2, [r3, #16]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	08da      	lsrs	r2, r3, #3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3208      	adds	r2, #8
 8000d16:	69b9      	ldr	r1, [r7, #24]
 8000d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0203 	and.w	r2, r3, #3
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 80a2 	beq.w	8000ea2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a56      	ldr	r2, [pc, #344]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b54      	ldr	r3, [pc, #336]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d7a:	4a52      	ldr	r2, [pc, #328]	; (8000ec4 <HAL_GPIO_Init+0x2ec>)
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	3302      	adds	r3, #2
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	220f      	movs	r2, #15
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a49      	ldr	r2, [pc, #292]	; (8000ec8 <HAL_GPIO_Init+0x2f0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d019      	beq.n	8000dda <HAL_GPIO_Init+0x202>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a48      	ldr	r2, [pc, #288]	; (8000ecc <HAL_GPIO_Init+0x2f4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0x1fe>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a47      	ldr	r2, [pc, #284]	; (8000ed0 <HAL_GPIO_Init+0x2f8>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00d      	beq.n	8000dd2 <HAL_GPIO_Init+0x1fa>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a46      	ldr	r2, [pc, #280]	; (8000ed4 <HAL_GPIO_Init+0x2fc>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x1f6>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a45      	ldr	r2, [pc, #276]	; (8000ed8 <HAL_GPIO_Init+0x300>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_GPIO_Init+0x1f2>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e008      	b.n	8000ddc <HAL_GPIO_Init+0x204>
 8000dca:	2307      	movs	r3, #7
 8000dcc:	e006      	b.n	8000ddc <HAL_GPIO_Init+0x204>
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e004      	b.n	8000ddc <HAL_GPIO_Init+0x204>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_Init+0x204>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <HAL_GPIO_Init+0x204>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	69fa      	ldr	r2, [r7, #28]
 8000dde:	f002 0203 	and.w	r2, r2, #3
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	4093      	lsls	r3, r2
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dec:	4935      	ldr	r1, [pc, #212]	; (8000ec4 <HAL_GPIO_Init+0x2ec>)
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfa:	4b38      	ldr	r3, [pc, #224]	; (8000edc <HAL_GPIO_Init+0x304>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e1e:	4a2f      	ldr	r2, [pc, #188]	; (8000edc <HAL_GPIO_Init+0x304>)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <HAL_GPIO_Init+0x304>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e48:	4a24      	ldr	r2, [pc, #144]	; (8000edc <HAL_GPIO_Init+0x304>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_GPIO_Init+0x304>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <HAL_GPIO_Init+0x304>)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_GPIO_Init+0x304>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_GPIO_Init+0x304>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	f67f aea2 	bls.w	8000bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40013800 	.word	0x40013800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40013c00 	.word	0x40013c00

08000ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e267      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d075      	beq.n	8000fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000efe:	4b88      	ldr	r3, [pc, #544]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d00c      	beq.n	8000f24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0a:	4b85      	ldr	r3, [pc, #532]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f12:	2b08      	cmp	r3, #8
 8000f14:	d112      	bne.n	8000f3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f16:	4b82      	ldr	r3, [pc, #520]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f22:	d10b      	bne.n	8000f3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f24:	4b7e      	ldr	r3, [pc, #504]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d05b      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x108>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d157      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e242      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f44:	d106      	bne.n	8000f54 <HAL_RCC_OscConfig+0x74>
 8000f46:	4b76      	ldr	r3, [pc, #472]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a75      	ldr	r2, [pc, #468]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e01d      	b.n	8000f90 <HAL_RCC_OscConfig+0xb0>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x98>
 8000f5e:	4b70      	ldr	r3, [pc, #448]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a6f      	ldr	r2, [pc, #444]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b6d      	ldr	r3, [pc, #436]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a6c      	ldr	r2, [pc, #432]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e00b      	b.n	8000f90 <HAL_RCC_OscConfig+0xb0>
 8000f78:	4b69      	ldr	r3, [pc, #420]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a68      	ldr	r2, [pc, #416]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b66      	ldr	r3, [pc, #408]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a65      	ldr	r2, [pc, #404]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fd30 	bl	80009fc <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fd2c 	bl	80009fc <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e207      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xc0>
 8000fbe:	e014      	b.n	8000fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fd1c 	bl	80009fc <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fd18 	bl	80009fc <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e1f3      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	4b51      	ldr	r3, [pc, #324]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0xe8>
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d063      	beq.n	80010be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800100a:	2b08      	cmp	r3, #8
 800100c:	d11c      	bne.n	8001048 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d116      	bne.n	8001048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101a:	4b41      	ldr	r3, [pc, #260]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <HAL_RCC_OscConfig+0x152>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d001      	beq.n	8001032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e1c7      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4937      	ldr	r1, [pc, #220]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001046:	e03a      	b.n	80010be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d020      	beq.n	8001092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001050:	4b34      	ldr	r3, [pc, #208]	; (8001124 <HAL_RCC_OscConfig+0x244>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001056:	f7ff fcd1 	bl	80009fc <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff fccd 	bl	80009fc <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e1a8      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4925      	ldr	r1, [pc, #148]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
 8001090:	e015      	b.n	80010be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001092:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_RCC_OscConfig+0x244>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fcb0 	bl	80009fc <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fcac 	bl	80009fc <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e187      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d036      	beq.n	8001138 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d016      	beq.n	8001100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_RCC_OscConfig+0x248>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d8:	f7ff fc90 	bl	80009fc <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fc8c 	bl	80009fc <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e167      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 80010f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x200>
 80010fe:	e01b      	b.n	8001138 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_RCC_OscConfig+0x248>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fc79 	bl	80009fc <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110c:	e00e      	b.n	800112c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800110e:	f7ff fc75 	bl	80009fc <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d907      	bls.n	800112c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e150      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
 8001120:	40023800 	.word	0x40023800
 8001124:	42470000 	.word	0x42470000
 8001128:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112c:	4b88      	ldr	r3, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800112e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1ea      	bne.n	800110e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 8097 	beq.w	8001274 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114a:	4b81      	ldr	r3, [pc, #516]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10f      	bne.n	8001176 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b7d      	ldr	r3, [pc, #500]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a7c      	ldr	r2, [pc, #496]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b7a      	ldr	r3, [pc, #488]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001172:	2301      	movs	r3, #1
 8001174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001176:	4b77      	ldr	r3, [pc, #476]	; (8001354 <HAL_RCC_OscConfig+0x474>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117e:	2b00      	cmp	r3, #0
 8001180:	d118      	bne.n	80011b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001182:	4b74      	ldr	r3, [pc, #464]	; (8001354 <HAL_RCC_OscConfig+0x474>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a73      	ldr	r2, [pc, #460]	; (8001354 <HAL_RCC_OscConfig+0x474>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118e:	f7ff fc35 	bl	80009fc <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001196:	f7ff fc31 	bl	80009fc <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e10c      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a8:	4b6a      	ldr	r3, [pc, #424]	; (8001354 <HAL_RCC_OscConfig+0x474>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d106      	bne.n	80011ca <HAL_RCC_OscConfig+0x2ea>
 80011bc:	4b64      	ldr	r3, [pc, #400]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c0:	4a63      	ldr	r2, [pc, #396]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6713      	str	r3, [r2, #112]	; 0x70
 80011c8:	e01c      	b.n	8001204 <HAL_RCC_OscConfig+0x324>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b05      	cmp	r3, #5
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0x30c>
 80011d2:	4b5f      	ldr	r3, [pc, #380]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d6:	4a5e      	ldr	r2, [pc, #376]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6713      	str	r3, [r2, #112]	; 0x70
 80011de:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e2:	4a5b      	ldr	r2, [pc, #364]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6713      	str	r3, [r2, #112]	; 0x70
 80011ea:	e00b      	b.n	8001204 <HAL_RCC_OscConfig+0x324>
 80011ec:	4b58      	ldr	r3, [pc, #352]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f0:	4a57      	ldr	r2, [pc, #348]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	6713      	str	r3, [r2, #112]	; 0x70
 80011f8:	4b55      	ldr	r3, [pc, #340]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fc:	4a54      	ldr	r2, [pc, #336]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011fe:	f023 0304 	bic.w	r3, r3, #4
 8001202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d015      	beq.n	8001238 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fbf6 	bl	80009fc <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001212:	e00a      	b.n	800122a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fbf2 	bl	80009fc <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e0cb      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122a:	4b49      	ldr	r3, [pc, #292]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0ee      	beq.n	8001214 <HAL_RCC_OscConfig+0x334>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff fbe0 	bl	80009fc <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123e:	e00a      	b.n	8001256 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001240:	f7ff fbdc 	bl	80009fc <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f241 3288 	movw	r2, #5000	; 0x1388
 800124e:	4293      	cmp	r3, r2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e0b5      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001256:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1ee      	bne.n	8001240 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d105      	bne.n	8001274 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001268:	4b39      	ldr	r3, [pc, #228]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a38      	ldr	r2, [pc, #224]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800126e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a1 	beq.w	80013c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b08      	cmp	r3, #8
 8001288:	d05c      	beq.n	8001344 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d141      	bne.n	8001316 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <HAL_RCC_OscConfig+0x478>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fbb0 	bl	80009fc <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a0:	f7ff fbac 	bl	80009fc <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e087      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69da      	ldr	r2, [r3, #28]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	019b      	lsls	r3, r3, #6
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	3b01      	subs	r3, #1
 80012d8:	041b      	lsls	r3, r3, #16
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	061b      	lsls	r3, r3, #24
 80012e2:	491b      	ldr	r1, [pc, #108]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x478>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fb85 	bl	80009fc <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fb81 	bl	80009fc <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e05c      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x416>
 8001314:	e054      	b.n	80013c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_RCC_OscConfig+0x478>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fb6e 	bl	80009fc <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fb6a 	bl	80009fc <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e045      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x444>
 8001342:	e03d      	b.n	80013c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e038      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000
 8001358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x4ec>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d028      	beq.n	80013bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d121      	bne.n	80013bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001382:	429a      	cmp	r2, r3
 8001384:	d11a      	bne.n	80013bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800138c:	4013      	ands	r3, r2
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001394:	4293      	cmp	r3, r2
 8001396:	d111      	bne.n	80013bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	3b01      	subs	r3, #1
 80013a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d107      	bne.n	80013bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0cc      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b68      	ldr	r3, [pc, #416]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d90c      	bls.n	800140c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b65      	ldr	r3, [pc, #404]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0b8      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800142e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	494d      	ldr	r1, [pc, #308]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d044      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d119      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e07f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d003      	beq.n	800148e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148a:	2b03      	cmp	r3, #3
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e06f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e067      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4934      	ldr	r1, [pc, #208]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff fa9c 	bl	80009fc <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7ff fa98 	bl	80009fc <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e04f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 020c 	and.w	r2, r3, #12
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1eb      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d20c      	bcs.n	8001518 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e032      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4916      	ldr	r1, [pc, #88]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	4313      	orrs	r3, r2
 8001554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001556:	f000 f821 	bl	800159c <HAL_RCC_GetSysClockFreq>
 800155a:	4602      	mov	r2, r0
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	490a      	ldr	r1, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	5ccb      	ldrb	r3, [r1, r3]
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1c8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f93c 	bl	80007f4 <HAL_InitTick>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00
 800158c:	40023800 	.word	0x40023800
 8001590:	08005344 	.word	0x08005344
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800159c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a0:	b090      	sub	sp, #64	; 0x40
 80015a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_GetSysClockFreq+0x180>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d00d      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x40>
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	f200 80a1 	bhi.w	8001708 <HAL_RCC_GetSysClockFreq+0x16c>
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x34>
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d003      	beq.n	80015d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80015ce:	e09b      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d0:	4b53      	ldr	r3, [pc, #332]	; (8001720 <HAL_RCC_GetSysClockFreq+0x184>)
 80015d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015d4:	e09b      	b.n	800170e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015d6:	4b53      	ldr	r3, [pc, #332]	; (8001724 <HAL_RCC_GetSysClockFreq+0x188>)
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015da:	e098      	b.n	800170e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015dc:	4b4f      	ldr	r3, [pc, #316]	; (800171c <HAL_RCC_GetSysClockFreq+0x180>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e6:	4b4d      	ldr	r3, [pc, #308]	; (800171c <HAL_RCC_GetSysClockFreq+0x180>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d028      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f2:	4b4a      	ldr	r3, [pc, #296]	; (800171c <HAL_RCC_GetSysClockFreq+0x180>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	099b      	lsrs	r3, r3, #6
 80015f8:	2200      	movs	r2, #0
 80015fa:	623b      	str	r3, [r7, #32]
 80015fc:	627a      	str	r2, [r7, #36]	; 0x24
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001604:	2100      	movs	r1, #0
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <HAL_RCC_GetSysClockFreq+0x188>)
 8001608:	fb03 f201 	mul.w	r2, r3, r1
 800160c:	2300      	movs	r3, #0
 800160e:	fb00 f303 	mul.w	r3, r0, r3
 8001612:	4413      	add	r3, r2
 8001614:	4a43      	ldr	r2, [pc, #268]	; (8001724 <HAL_RCC_GetSysClockFreq+0x188>)
 8001616:	fba0 1202 	umull	r1, r2, r0, r2
 800161a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800161c:	460a      	mov	r2, r1
 800161e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001622:	4413      	add	r3, r2
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001628:	2200      	movs	r2, #0
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	61fa      	str	r2, [r7, #28]
 800162e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001632:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001636:	f7fe fdd3 	bl	80001e0 <__aeabi_uldivmod>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4613      	mov	r3, r2
 8001640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001642:	e053      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001644:	4b35      	ldr	r3, [pc, #212]	; (800171c <HAL_RCC_GetSysClockFreq+0x180>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	2200      	movs	r2, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	617a      	str	r2, [r7, #20]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001656:	f04f 0b00 	mov.w	fp, #0
 800165a:	4652      	mov	r2, sl
 800165c:	465b      	mov	r3, fp
 800165e:	f04f 0000 	mov.w	r0, #0
 8001662:	f04f 0100 	mov.w	r1, #0
 8001666:	0159      	lsls	r1, r3, #5
 8001668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800166c:	0150      	lsls	r0, r2, #5
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	ebb2 080a 	subs.w	r8, r2, sl
 8001676:	eb63 090b 	sbc.w	r9, r3, fp
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001686:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800168a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800168e:	ebb2 0408 	subs.w	r4, r2, r8
 8001692:	eb63 0509 	sbc.w	r5, r3, r9
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	00eb      	lsls	r3, r5, #3
 80016a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016a4:	00e2      	lsls	r2, r4, #3
 80016a6:	4614      	mov	r4, r2
 80016a8:	461d      	mov	r5, r3
 80016aa:	eb14 030a 	adds.w	r3, r4, sl
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	eb45 030b 	adc.w	r3, r5, fp
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016c2:	4629      	mov	r1, r5
 80016c4:	028b      	lsls	r3, r1, #10
 80016c6:	4621      	mov	r1, r4
 80016c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016cc:	4621      	mov	r1, r4
 80016ce:	028a      	lsls	r2, r1, #10
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d6:	2200      	movs	r2, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	60fa      	str	r2, [r7, #12]
 80016dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e0:	f7fe fd7e 	bl	80001e0 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4613      	mov	r3, r2
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_GetSysClockFreq+0x180>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	3301      	adds	r3, #1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80016fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001706:	e002      	b.n	800170e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_RCC_GetSysClockFreq+0x184>)
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800170c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800170e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001710:	4618      	mov	r0, r3
 8001712:	3740      	adds	r7, #64	; 0x40
 8001714:	46bd      	mov	sp, r7
 8001716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	00f42400 	.word	0x00f42400
 8001724:	017d7840 	.word	0x017d7840

08001728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_RCC_GetHCLKFreq+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000000 	.word	0x20000000

08001740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001744:	f7ff fff0 	bl	8001728 <HAL_RCC_GetHCLKFreq>
 8001748:	4602      	mov	r2, r0
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	0a9b      	lsrs	r3, r3, #10
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	4903      	ldr	r1, [pc, #12]	; (8001764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001756:	5ccb      	ldrb	r3, [r1, r3]
 8001758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	08005354 	.word	0x08005354

08001768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800176c:	f7ff ffdc 	bl	8001728 <HAL_RCC_GetHCLKFreq>
 8001770:	4602      	mov	r2, r0
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	0b5b      	lsrs	r3, r3, #13
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	4903      	ldr	r1, [pc, #12]	; (800178c <HAL_RCC_GetPCLK2Freq+0x24>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	08005354 	.word	0x08005354

08001790 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	220f      	movs	r2, #15
 800179e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0203 	and.w	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_RCC_GetClockConfig+0x60>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0207 	and.w	r2, r3, #7
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e041      	b.n	800188a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f839 	bl	8001892 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3304      	adds	r3, #4
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f000 f9b2 	bl	8001b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d001      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e044      	b.n	800194a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_TIM_Base_Start_IT+0xb0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d018      	beq.n	8001914 <HAL_TIM_Base_Start_IT+0x6c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ea:	d013      	beq.n	8001914 <HAL_TIM_Base_Start_IT+0x6c>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_TIM_Base_Start_IT+0xb4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00e      	beq.n	8001914 <HAL_TIM_Base_Start_IT+0x6c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_TIM_Base_Start_IT+0xb8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d009      	beq.n	8001914 <HAL_TIM_Base_Start_IT+0x6c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_TIM_Base_Start_IT+0xbc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d004      	beq.n	8001914 <HAL_TIM_Base_Start_IT+0x6c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a16      	ldr	r2, [pc, #88]	; (8001968 <HAL_TIM_Base_Start_IT+0xc0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d111      	bne.n	8001938 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b06      	cmp	r3, #6
 8001924:	d010      	beq.n	8001948 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001936:	e007      	b.n	8001948 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40010000 	.word	0x40010000
 800195c:	40000400 	.word	0x40000400
 8001960:	40000800 	.word	0x40000800
 8001964:	40000c00 	.word	0x40000c00
 8001968:	40014000 	.word	0x40014000

0800196c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d020      	beq.n	80019d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01b      	beq.n	80019d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f06f 0202 	mvn.w	r2, #2
 80019a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f8d2 	bl	8001b60 <HAL_TIM_IC_CaptureCallback>
 80019bc:	e005      	b.n	80019ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f8c4 	bl	8001b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f8d5 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d020      	beq.n	8001a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01b      	beq.n	8001a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0204 	mvn.w	r2, #4
 80019ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2202      	movs	r2, #2
 80019f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f8ac 	bl	8001b60 <HAL_TIM_IC_CaptureCallback>
 8001a08:	e005      	b.n	8001a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f89e 	bl	8001b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f8af 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d020      	beq.n	8001a68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01b      	beq.n	8001a68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0208 	mvn.w	r2, #8
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f886 	bl	8001b60 <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f878 	bl	8001b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f889 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d020      	beq.n	8001ab4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01b      	beq.n	8001ab4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 0210 	mvn.w	r2, #16
 8001a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2208      	movs	r2, #8
 8001a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f860 	bl	8001b60 <HAL_TIM_IC_CaptureCallback>
 8001aa0:	e005      	b.n	8001aae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f852 	bl	8001b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f863 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00c      	beq.n	8001ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0201 	mvn.w	r2, #1
 8001ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7fe fe02 	bl	80006dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00c      	beq.n	8001afc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8e6 	bl	8001cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00c      	beq.n	8001b20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f834 	bl	8001b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0220 	mvn.w	r2, #32
 8001b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8b8 	bl	8001cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a3a      	ldr	r2, [pc, #232]	; (8001c98 <TIM_Base_SetConfig+0xfc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00f      	beq.n	8001bd4 <TIM_Base_SetConfig+0x38>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bba:	d00b      	beq.n	8001bd4 <TIM_Base_SetConfig+0x38>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a37      	ldr	r2, [pc, #220]	; (8001c9c <TIM_Base_SetConfig+0x100>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d007      	beq.n	8001bd4 <TIM_Base_SetConfig+0x38>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a36      	ldr	r2, [pc, #216]	; (8001ca0 <TIM_Base_SetConfig+0x104>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d003      	beq.n	8001bd4 <TIM_Base_SetConfig+0x38>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a35      	ldr	r2, [pc, #212]	; (8001ca4 <TIM_Base_SetConfig+0x108>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d108      	bne.n	8001be6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <TIM_Base_SetConfig+0xfc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01b      	beq.n	8001c26 <TIM_Base_SetConfig+0x8a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d017      	beq.n	8001c26 <TIM_Base_SetConfig+0x8a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a28      	ldr	r2, [pc, #160]	; (8001c9c <TIM_Base_SetConfig+0x100>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <TIM_Base_SetConfig+0x8a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a27      	ldr	r2, [pc, #156]	; (8001ca0 <TIM_Base_SetConfig+0x104>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00f      	beq.n	8001c26 <TIM_Base_SetConfig+0x8a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a26      	ldr	r2, [pc, #152]	; (8001ca4 <TIM_Base_SetConfig+0x108>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00b      	beq.n	8001c26 <TIM_Base_SetConfig+0x8a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a25      	ldr	r2, [pc, #148]	; (8001ca8 <TIM_Base_SetConfig+0x10c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <TIM_Base_SetConfig+0x8a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a24      	ldr	r2, [pc, #144]	; (8001cac <TIM_Base_SetConfig+0x110>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d003      	beq.n	8001c26 <TIM_Base_SetConfig+0x8a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <TIM_Base_SetConfig+0x114>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d108      	bne.n	8001c38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <TIM_Base_SetConfig+0xfc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d103      	bne.n	8001c6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d105      	bne.n	8001c8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f023 0201 	bic.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	40000c00 	.word	0x40000c00
 8001ca8:	40014000 	.word	0x40014000
 8001cac:	40014400 	.word	0x40014400
 8001cb0:	40014800 	.word	0x40014800

08001cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e042      	b.n	8001d74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fd2e 	bl	8000764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2224      	movs	r2, #36	; 0x24
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f82b 	bl	8001d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d80:	b0c0      	sub	sp, #256	; 0x100
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d98:	68d9      	ldr	r1, [r3, #12]
 8001d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	ea40 0301 	orr.w	r3, r0, r1
 8001da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001dd4:	f021 010c 	bic.w	r1, r1, #12
 8001dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001de2:	430b      	orrs	r3, r1
 8001de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df6:	6999      	ldr	r1, [r3, #24]
 8001df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	ea40 0301 	orr.w	r3, r0, r1
 8001e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b8f      	ldr	r3, [pc, #572]	; (8002048 <UART_SetConfig+0x2cc>)
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d005      	beq.n	8001e1c <UART_SetConfig+0xa0>
 8001e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b8d      	ldr	r3, [pc, #564]	; (800204c <UART_SetConfig+0x2d0>)
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d104      	bne.n	8001e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e1c:	f7ff fca4 	bl	8001768 <HAL_RCC_GetPCLK2Freq>
 8001e20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e24:	e003      	b.n	8001e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e26:	f7ff fc8b 	bl	8001740 <HAL_RCC_GetPCLK1Freq>
 8001e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e38:	f040 810c 	bne.w	8002054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e40:	2200      	movs	r2, #0
 8001e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e4e:	4622      	mov	r2, r4
 8001e50:	462b      	mov	r3, r5
 8001e52:	1891      	adds	r1, r2, r2
 8001e54:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e56:	415b      	adcs	r3, r3
 8001e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e5e:	4621      	mov	r1, r4
 8001e60:	eb12 0801 	adds.w	r8, r2, r1
 8001e64:	4629      	mov	r1, r5
 8001e66:	eb43 0901 	adc.w	r9, r3, r1
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e7e:	4690      	mov	r8, r2
 8001e80:	4699      	mov	r9, r3
 8001e82:	4623      	mov	r3, r4
 8001e84:	eb18 0303 	adds.w	r3, r8, r3
 8001e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	eb49 0303 	adc.w	r3, r9, r3
 8001e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001eaa:	460b      	mov	r3, r1
 8001eac:	18db      	adds	r3, r3, r3
 8001eae:	653b      	str	r3, [r7, #80]	; 0x50
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	eb42 0303 	adc.w	r3, r2, r3
 8001eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8001eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001ec0:	f7fe f98e 	bl	80001e0 <__aeabi_uldivmod>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4b61      	ldr	r3, [pc, #388]	; (8002050 <UART_SetConfig+0x2d4>)
 8001eca:	fba3 2302 	umull	r2, r3, r3, r2
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	011c      	lsls	r4, r3, #4
 8001ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001edc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ee4:	4642      	mov	r2, r8
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	1891      	adds	r1, r2, r2
 8001eea:	64b9      	str	r1, [r7, #72]	; 0x48
 8001eec:	415b      	adcs	r3, r3
 8001eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ef4:	4641      	mov	r1, r8
 8001ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8001efa:	4649      	mov	r1, r9
 8001efc:	eb43 0b01 	adc.w	fp, r3, r1
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f14:	4692      	mov	sl, r2
 8001f16:	469b      	mov	fp, r3
 8001f18:	4643      	mov	r3, r8
 8001f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8001f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f22:	464b      	mov	r3, r9
 8001f24:	eb4b 0303 	adc.w	r3, fp, r3
 8001f28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001f40:	460b      	mov	r3, r1
 8001f42:	18db      	adds	r3, r3, r3
 8001f44:	643b      	str	r3, [r7, #64]	; 0x40
 8001f46:	4613      	mov	r3, r2
 8001f48:	eb42 0303 	adc.w	r3, r2, r3
 8001f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001f56:	f7fe f943 	bl	80001e0 <__aeabi_uldivmod>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <UART_SetConfig+0x2d4>)
 8001f62:	fba3 2301 	umull	r2, r3, r3, r1
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2264      	movs	r2, #100	; 0x64
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	1acb      	subs	r3, r1, r3
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <UART_SetConfig+0x2d4>)
 8001f78:	fba3 2302 	umull	r2, r3, r3, r2
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f84:	441c      	add	r4, r3
 8001f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f98:	4642      	mov	r2, r8
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	1891      	adds	r1, r2, r2
 8001f9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fa0:	415b      	adcs	r3, r3
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fa8:	4641      	mov	r1, r8
 8001faa:	1851      	adds	r1, r2, r1
 8001fac:	6339      	str	r1, [r7, #48]	; 0x30
 8001fae:	4649      	mov	r1, r9
 8001fb0:	414b      	adcs	r3, r1
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001fc0:	4659      	mov	r1, fp
 8001fc2:	00cb      	lsls	r3, r1, #3
 8001fc4:	4651      	mov	r1, sl
 8001fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fca:	4651      	mov	r1, sl
 8001fcc:	00ca      	lsls	r2, r1, #3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4642      	mov	r2, r8
 8001fd6:	189b      	adds	r3, r3, r2
 8001fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fdc:	464b      	mov	r3, r9
 8001fde:	460a      	mov	r2, r1
 8001fe0:	eb42 0303 	adc.w	r3, r2, r3
 8001fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	18db      	adds	r3, r3, r3
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
 8002002:	4613      	mov	r3, r2
 8002004:	eb42 0303 	adc.w	r3, r2, r3
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800200e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002012:	f7fe f8e5 	bl	80001e0 <__aeabi_uldivmod>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <UART_SetConfig+0x2d4>)
 800201c:	fba3 1302 	umull	r1, r3, r3, r2
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	2164      	movs	r1, #100	; 0x64
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	3332      	adds	r3, #50	; 0x32
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <UART_SetConfig+0x2d4>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	f003 0207 	and.w	r2, r3, #7
 800203a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4422      	add	r2, r4
 8002042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002044:	e106      	b.n	8002254 <UART_SetConfig+0x4d8>
 8002046:	bf00      	nop
 8002048:	40011000 	.word	0x40011000
 800204c:	40011400 	.word	0x40011400
 8002050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002058:	2200      	movs	r2, #0
 800205a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800205e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002066:	4642      	mov	r2, r8
 8002068:	464b      	mov	r3, r9
 800206a:	1891      	adds	r1, r2, r2
 800206c:	6239      	str	r1, [r7, #32]
 800206e:	415b      	adcs	r3, r3
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
 8002072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002076:	4641      	mov	r1, r8
 8002078:	1854      	adds	r4, r2, r1
 800207a:	4649      	mov	r1, r9
 800207c:	eb43 0501 	adc.w	r5, r3, r1
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	00eb      	lsls	r3, r5, #3
 800208a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800208e:	00e2      	lsls	r2, r4, #3
 8002090:	4614      	mov	r4, r2
 8002092:	461d      	mov	r5, r3
 8002094:	4643      	mov	r3, r8
 8002096:	18e3      	adds	r3, r4, r3
 8002098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800209c:	464b      	mov	r3, r9
 800209e:	eb45 0303 	adc.w	r3, r5, r3
 80020a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80020a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020c2:	4629      	mov	r1, r5
 80020c4:	008b      	lsls	r3, r1, #2
 80020c6:	4621      	mov	r1, r4
 80020c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020cc:	4621      	mov	r1, r4
 80020ce:	008a      	lsls	r2, r1, #2
 80020d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020d4:	f7fe f884 	bl	80001e0 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4b60      	ldr	r3, [pc, #384]	; (8002260 <UART_SetConfig+0x4e4>)
 80020de:	fba3 2302 	umull	r2, r3, r3, r2
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	011c      	lsls	r4, r3, #4
 80020e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80020f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80020f8:	4642      	mov	r2, r8
 80020fa:	464b      	mov	r3, r9
 80020fc:	1891      	adds	r1, r2, r2
 80020fe:	61b9      	str	r1, [r7, #24]
 8002100:	415b      	adcs	r3, r3
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002108:	4641      	mov	r1, r8
 800210a:	1851      	adds	r1, r2, r1
 800210c:	6139      	str	r1, [r7, #16]
 800210e:	4649      	mov	r1, r9
 8002110:	414b      	adcs	r3, r1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002120:	4659      	mov	r1, fp
 8002122:	00cb      	lsls	r3, r1, #3
 8002124:	4651      	mov	r1, sl
 8002126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800212a:	4651      	mov	r1, sl
 800212c:	00ca      	lsls	r2, r1, #3
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	4603      	mov	r3, r0
 8002134:	4642      	mov	r2, r8
 8002136:	189b      	adds	r3, r3, r2
 8002138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800213c:	464b      	mov	r3, r9
 800213e:	460a      	mov	r2, r1
 8002140:	eb42 0303 	adc.w	r3, r2, r3
 8002144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	67bb      	str	r3, [r7, #120]	; 0x78
 8002152:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002160:	4649      	mov	r1, r9
 8002162:	008b      	lsls	r3, r1, #2
 8002164:	4641      	mov	r1, r8
 8002166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800216a:	4641      	mov	r1, r8
 800216c:	008a      	lsls	r2, r1, #2
 800216e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002172:	f7fe f835 	bl	80001e0 <__aeabi_uldivmod>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4611      	mov	r1, r2
 800217c:	4b38      	ldr	r3, [pc, #224]	; (8002260 <UART_SetConfig+0x4e4>)
 800217e:	fba3 2301 	umull	r2, r3, r3, r1
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2264      	movs	r2, #100	; 0x64
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	1acb      	subs	r3, r1, r3
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	3332      	adds	r3, #50	; 0x32
 8002190:	4a33      	ldr	r2, [pc, #204]	; (8002260 <UART_SetConfig+0x4e4>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219c:	441c      	add	r4, r3
 800219e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021a2:	2200      	movs	r2, #0
 80021a4:	673b      	str	r3, [r7, #112]	; 0x70
 80021a6:	677a      	str	r2, [r7, #116]	; 0x74
 80021a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80021ac:	4642      	mov	r2, r8
 80021ae:	464b      	mov	r3, r9
 80021b0:	1891      	adds	r1, r2, r2
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	415b      	adcs	r3, r3
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021bc:	4641      	mov	r1, r8
 80021be:	1851      	adds	r1, r2, r1
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	4649      	mov	r1, r9
 80021c4:	414b      	adcs	r3, r1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021d4:	4659      	mov	r1, fp
 80021d6:	00cb      	lsls	r3, r1, #3
 80021d8:	4651      	mov	r1, sl
 80021da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021de:	4651      	mov	r1, sl
 80021e0:	00ca      	lsls	r2, r1, #3
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	4642      	mov	r2, r8
 80021ea:	189b      	adds	r3, r3, r2
 80021ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80021ee:	464b      	mov	r3, r9
 80021f0:	460a      	mov	r2, r1
 80021f2:	eb42 0303 	adc.w	r3, r2, r3
 80021f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	663b      	str	r3, [r7, #96]	; 0x60
 8002202:	667a      	str	r2, [r7, #100]	; 0x64
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002210:	4649      	mov	r1, r9
 8002212:	008b      	lsls	r3, r1, #2
 8002214:	4641      	mov	r1, r8
 8002216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800221a:	4641      	mov	r1, r8
 800221c:	008a      	lsls	r2, r1, #2
 800221e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002222:	f7fd ffdd 	bl	80001e0 <__aeabi_uldivmod>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <UART_SetConfig+0x4e4>)
 800222c:	fba3 1302 	umull	r1, r3, r3, r2
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	2164      	movs	r1, #100	; 0x64
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	3332      	adds	r3, #50	; 0x32
 800223e:	4a08      	ldr	r2, [pc, #32]	; (8002260 <UART_SetConfig+0x4e4>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	f003 020f 	and.w	r2, r3, #15
 800224a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4422      	add	r2, r4
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	bf00      	nop
 8002256:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800225a:	46bd      	mov	sp, r7
 800225c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002260:	51eb851f 	.word	0x51eb851f

08002264 <__NVIC_SetPriority>:
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db0a      	blt.n	800228e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	490c      	ldr	r1, [pc, #48]	; (80022b0 <__NVIC_SetPriority+0x4c>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800228c:	e00a      	b.n	80022a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4908      	ldr	r1, [pc, #32]	; (80022b4 <__NVIC_SetPriority+0x50>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3b04      	subs	r3, #4
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	761a      	strb	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <SysTick_Handler+0x1c>)
 80022be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80022c0:	f001 fde0 	bl	8003e84 <xTaskGetSchedulerState>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80022ca:	f002 fbc5 	bl	8004a58 <xPortSysTickHandler>
  }
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	e000e010 	.word	0xe000e010

080022d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80022dc:	2100      	movs	r1, #0
 80022de:	f06f 0004 	mvn.w	r0, #4
 80022e2:	f7ff ffbf 	bl	8002264 <__NVIC_SetPriority>
#endif
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022f2:	f3ef 8305 	mrs	r3, IPSR
 80022f6:	603b      	str	r3, [r7, #0]
  return(result);
 80022f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80022fe:	f06f 0305 	mvn.w	r3, #5
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	e00c      	b.n	8002320 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <osKernelInitialize+0x44>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <osKernelInitialize+0x44>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002314:	2300      	movs	r3, #0
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	e002      	b.n	8002320 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000114 	.word	0x20000114

08002334 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800233a:	f3ef 8305 	mrs	r3, IPSR
 800233e:	603b      	str	r3, [r7, #0]
  return(result);
 8002340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002346:	f06f 0305 	mvn.w	r3, #5
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	e010      	b.n	8002370 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <osKernelStart+0x48>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d109      	bne.n	800236a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002356:	f7ff ffbf 	bl	80022d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <osKernelStart+0x48>)
 800235c:	2202      	movs	r2, #2
 800235e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002360:	f001 f87c 	bl	800345c <vTaskStartScheduler>
      stat = osOK;
 8002364:	2300      	movs	r3, #0
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	e002      	b.n	8002370 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002370:	687b      	ldr	r3, [r7, #4]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000114 	.word	0x20000114

08002380 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b08e      	sub	sp, #56	; 0x38
 8002384:	af04      	add	r7, sp, #16
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002390:	f3ef 8305 	mrs	r3, IPSR
 8002394:	617b      	str	r3, [r7, #20]
  return(result);
 8002396:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002398:	2b00      	cmp	r3, #0
 800239a:	d17e      	bne.n	800249a <osThreadNew+0x11a>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d07b      	beq.n	800249a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80023a6:	2318      	movs	r3, #24
 80023a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d045      	beq.n	8002446 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <osThreadNew+0x48>
        name = attr->name;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <osThreadNew+0x6e>
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b38      	cmp	r3, #56	; 0x38
 80023e0:	d805      	bhi.n	80023ee <osThreadNew+0x6e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <osThreadNew+0x72>
        return (NULL);
 80023ee:	2300      	movs	r3, #0
 80023f0:	e054      	b.n	800249c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00e      	beq.n	8002428 <osThreadNew+0xa8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2ba7      	cmp	r3, #167	; 0xa7
 8002410:	d90a      	bls.n	8002428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <osThreadNew+0xa8>
        mem = 1;
 8002422:	2301      	movs	r3, #1
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	e010      	b.n	800244a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10c      	bne.n	800244a <osThreadNew+0xca>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d108      	bne.n	800244a <osThreadNew+0xca>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d104      	bne.n	800244a <osThreadNew+0xca>
          mem = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	e001      	b.n	800244a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d110      	bne.n	8002472 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002458:	9202      	str	r2, [sp, #8]
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	6a3a      	ldr	r2, [r7, #32]
 8002464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fe0c 	bl	8003084 <xTaskCreateStatic>
 800246c:	4603      	mov	r3, r0
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	e013      	b.n	800249a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d110      	bne.n	800249a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	b29a      	uxth	r2, r3
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fe57 	bl	800313e <xTaskCreate>
 8002490:	4603      	mov	r3, r0
 8002492:	2b01      	cmp	r3, #1
 8002494:	d001      	beq.n	800249a <osThreadNew+0x11a>
            hTask = NULL;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800249a:	693b      	ldr	r3, [r7, #16]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3728      	adds	r7, #40	; 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ac:	f3ef 8305 	mrs	r3, IPSR
 80024b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80024b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <osDelay+0x1c>
    stat = osErrorISR;
 80024b8:	f06f 0305 	mvn.w	r3, #5
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e007      	b.n	80024d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 ff92 	bl	80033f4 <vTaskDelay>
    }
  }

  return (stat);
 80024d0:	68fb      	ldr	r3, [r7, #12]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a07      	ldr	r2, [pc, #28]	; (8002508 <vApplicationGetIdleTaskMemory+0x2c>)
 80024ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4a06      	ldr	r2, [pc, #24]	; (800250c <vApplicationGetIdleTaskMemory+0x30>)
 80024f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	601a      	str	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000118 	.word	0x20000118
 800250c:	200001c0 	.word	0x200001c0

08002510 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a07      	ldr	r2, [pc, #28]	; (800253c <vApplicationGetTimerTaskMemory+0x2c>)
 8002520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <vApplicationGetTimerTaskMemory+0x30>)
 8002526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800252e:	601a      	str	r2, [r3, #0]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	200003c0 	.word	0x200003c0
 8002540:	20000468 	.word	0x20000468

08002544 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f103 0208 	add.w	r2, r3, #8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f103 0208 	add.w	r2, r3, #8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f103 0208 	add.w	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	601a      	str	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d103      	bne.n	8002606 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e00c      	b.n	8002620 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3308      	adds	r3, #8
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e002      	b.n	8002614 <vListInsert+0x2e>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	d2f6      	bcs.n	800260e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	601a      	str	r2, [r3, #0]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6892      	ldr	r2, [r2, #8]
 800266e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6852      	ldr	r2, [r2, #4]
 8002678:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d103      	bne.n	800268c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026d6:	f002 f92d 	bl	8004934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	441a      	add	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	3b01      	subs	r3, #1
 8002708:	68f9      	ldr	r1, [r7, #12]
 800270a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	441a      	add	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	22ff      	movs	r2, #255	; 0xff
 8002722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d114      	bne.n	8002756 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01a      	beq.n	800276a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3310      	adds	r3, #16
 8002738:	4618      	mov	r0, r3
 800273a:	f001 f989 	bl	8003a50 <xTaskRemoveFromEventList>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d012      	beq.n	800276a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <xQueueGenericReset+0xcc>)
 8002746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	e009      	b.n	800276a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3310      	adds	r3, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fef2 	bl	8002544 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3324      	adds	r3, #36	; 0x24
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff feed 	bl	8002544 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800276a:	f002 f913 	bl	8004994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	e000ed04 	.word	0xe000ed04

0800277c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08e      	sub	sp, #56	; 0x38
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027a2:	bf00      	nop
 80027a4:	e7fe      	b.n	80027a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <xQueueGenericCreateStatic+0x52>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <xQueueGenericCreateStatic+0x56>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <xQueueGenericCreateStatic+0x58>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	623b      	str	r3, [r7, #32]
}
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <xQueueGenericCreateStatic+0x7e>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <xQueueGenericCreateStatic+0x82>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <xQueueGenericCreateStatic+0x84>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	61fb      	str	r3, [r7, #28]
}
 8002816:	bf00      	nop
 8002818:	e7fe      	b.n	8002818 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800281a:	2350      	movs	r3, #80	; 0x50
 800281c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b50      	cmp	r3, #80	; 0x50
 8002822:	d00a      	beq.n	800283a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	61bb      	str	r3, [r7, #24]
}
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800283a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00d      	beq.n	8002862 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800284e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f805 	bl	800286c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002864:	4618      	mov	r0, r3
 8002866:	3730      	adds	r7, #48	; 0x30
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d103      	bne.n	8002888 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e002      	b.n	800288e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800289a:	2101      	movs	r1, #1
 800289c:	69b8      	ldr	r0, [r7, #24]
 800289e:	f7ff ff05 	bl	80026ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08e      	sub	sp, #56	; 0x38
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028c2:	2300      	movs	r3, #0
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <xQueueGenericSend+0x32>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028e2:	bf00      	nop
 80028e4:	e7fe      	b.n	80028e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d103      	bne.n	80028f4 <xQueueGenericSend+0x40>
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <xQueueGenericSend+0x44>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <xQueueGenericSend+0x46>
 80028f8:	2300      	movs	r3, #0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <xQueueGenericSend+0x60>
	__asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002910:	bf00      	nop
 8002912:	e7fe      	b.n	8002912 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d103      	bne.n	8002922 <xQueueGenericSend+0x6e>
 800291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <xQueueGenericSend+0x72>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <xQueueGenericSend+0x74>
 8002926:	2300      	movs	r3, #0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <xQueueGenericSend+0x8e>
	__asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	623b      	str	r3, [r7, #32]
}
 800293e:	bf00      	nop
 8002940:	e7fe      	b.n	8002940 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002942:	f001 fa9f 	bl	8003e84 <xTaskGetSchedulerState>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <xQueueGenericSend+0x9e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <xQueueGenericSend+0xa2>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <xQueueGenericSend+0xa4>
 8002956:	2300      	movs	r3, #0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <xQueueGenericSend+0xbe>
	__asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	61fb      	str	r3, [r7, #28]
}
 800296e:	bf00      	nop
 8002970:	e7fe      	b.n	8002970 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002972:	f001 ffdf 	bl	8004934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <xQueueGenericSend+0xd4>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d129      	bne.n	80029dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800298e:	f000 fa0b 	bl	8002da8 <prvCopyDataToQueue>
 8002992:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	2b00      	cmp	r3, #0
 800299a:	d010      	beq.n	80029be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	3324      	adds	r3, #36	; 0x24
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 f855 	bl	8003a50 <xTaskRemoveFromEventList>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029ac:	4b3f      	ldr	r3, [pc, #252]	; (8002aac <xQueueGenericSend+0x1f8>)
 80029ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	e00a      	b.n	80029d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <xQueueGenericSend+0x1f8>)
 80029c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029d4:	f001 ffde 	bl	8004994 <vPortExitCritical>
				return pdPASS;
 80029d8:	2301      	movs	r3, #1
 80029da:	e063      	b.n	8002aa4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029e2:	f001 ffd7 	bl	8004994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e05c      	b.n	8002aa4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 f891 	bl	8003b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029fa:	2301      	movs	r3, #1
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029fe:	f001 ffc9 	bl	8004994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a02:	f000 fd9b 	bl	800353c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a06:	f001 ff95 	bl	8004934 <vPortEnterCritical>
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d103      	bne.n	8002a20 <xQueueGenericSend+0x16c>
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d103      	bne.n	8002a36 <xQueueGenericSend+0x182>
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a36:	f001 ffad 	bl	8004994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a3a:	1d3a      	adds	r2, r7, #4
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 f880 	bl	8003b48 <xTaskCheckForTimeOut>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d124      	bne.n	8002a98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a50:	f000 faa2 	bl	8002f98 <prvIsQueueFull>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d018      	beq.n	8002a8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	3310      	adds	r3, #16
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 ffa4 	bl	80039b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a6a:	f000 fa2d 	bl	8002ec8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a6e:	f000 fdab 	bl	80035c8 <xTaskResumeAll>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f47f af7c 	bne.w	8002972 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <xQueueGenericSend+0x1f8>)
 8002a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	e772      	b.n	8002972 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a8e:	f000 fa1b 	bl	8002ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a92:	f000 fd99 	bl	80035c8 <xTaskResumeAll>
 8002a96:	e76c      	b.n	8002972 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a9a:	f000 fa15 	bl	8002ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a9e:	f000 fd93 	bl	80035c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002aa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3738      	adds	r7, #56	; 0x38
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	e000ed04 	.word	0xe000ed04

08002ab0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b090      	sub	sp, #64	; 0x40
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d103      	bne.n	8002aec <xQueueGenericSendFromISR+0x3c>
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <xQueueGenericSendFromISR+0x40>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <xQueueGenericSendFromISR+0x42>
 8002af0:	2300      	movs	r3, #0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d103      	bne.n	8002b1a <xQueueGenericSendFromISR+0x6a>
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <xQueueGenericSendFromISR+0x6e>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <xQueueGenericSendFromISR+0x70>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	623b      	str	r3, [r7, #32]
}
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b3a:	f002 f8c1 	bl	8004cc0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b3e:	f3ef 8211 	mrs	r2, BASEPRI
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	61fa      	str	r2, [r7, #28]
 8002b54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <xQueueGenericSendFromISR+0xbc>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d12f      	bne.n	8002bcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b82:	f000 f911 	bl	8002da8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d112      	bne.n	8002bb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d016      	beq.n	8002bc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9a:	3324      	adds	r3, #36	; 0x24
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 ff57 	bl	8003a50 <xTaskRemoveFromEventList>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00e      	beq.n	8002bc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e007      	b.n	8002bc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bba:	3301      	adds	r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	b25a      	sxtb	r2, r3
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002bca:	e001      	b.n	8002bd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002bda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3740      	adds	r7, #64	; 0x40
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08c      	sub	sp, #48	; 0x30
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10a      	bne.n	8002c18 <xQueueReceive+0x30>
	__asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	623b      	str	r3, [r7, #32]
}
 8002c14:	bf00      	nop
 8002c16:	e7fe      	b.n	8002c16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d103      	bne.n	8002c26 <xQueueReceive+0x3e>
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <xQueueReceive+0x42>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <xQueueReceive+0x44>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <xQueueReceive+0x5e>
	__asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	61fb      	str	r3, [r7, #28]
}
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c46:	f001 f91d 	bl	8003e84 <xTaskGetSchedulerState>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <xQueueReceive+0x6e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <xQueueReceive+0x72>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <xQueueReceive+0x74>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xQueueReceive+0x8e>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	61bb      	str	r3, [r7, #24]
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c76:	f001 fe5d 	bl	8004934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01f      	beq.n	8002cc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c8a:	f000 f8f7 	bl	8002e7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	1e5a      	subs	r2, r3, #1
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00f      	beq.n	8002cbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	3310      	adds	r3, #16
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fed4 	bl	8003a50 <xTaskRemoveFromEventList>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <xQueueReceive+0x1bc>)
 8002cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cbe:	f001 fe69 	bl	8004994 <vPortExitCritical>
				return pdPASS;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e069      	b.n	8002d9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ccc:	f001 fe62 	bl	8004994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e062      	b.n	8002d9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cda:	f107 0310 	add.w	r3, r7, #16
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 ff1c 	bl	8003b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ce8:	f001 fe54 	bl	8004994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cec:	f000 fc26 	bl	800353c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cf0:	f001 fe20 	bl	8004934 <vPortEnterCritical>
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d103      	bne.n	8002d0a <xQueueReceive+0x122>
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d103      	bne.n	8002d20 <xQueueReceive+0x138>
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d20:	f001 fe38 	bl	8004994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d24:	1d3a      	adds	r2, r7, #4
 8002d26:	f107 0310 	add.w	r3, r7, #16
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 ff0b 	bl	8003b48 <xTaskCheckForTimeOut>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d123      	bne.n	8002d80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d3a:	f000 f917 	bl	8002f6c <prvIsQueueEmpty>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d017      	beq.n	8002d74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	3324      	adds	r3, #36	; 0x24
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fe2f 	bl	80039b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d54:	f000 f8b8 	bl	8002ec8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d58:	f000 fc36 	bl	80035c8 <xTaskResumeAll>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d189      	bne.n	8002c76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <xQueueReceive+0x1bc>)
 8002d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	e780      	b.n	8002c76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d76:	f000 f8a7 	bl	8002ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d7a:	f000 fc25 	bl	80035c8 <xTaskResumeAll>
 8002d7e:	e77a      	b.n	8002c76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d82:	f000 f8a1 	bl	8002ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d86:	f000 fc1f 	bl	80035c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d8c:	f000 f8ee 	bl	8002f6c <prvIsQueueEmpty>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f43f af6f 	beq.w	8002c76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3730      	adds	r7, #48	; 0x30
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	e000ed04 	.word	0xe000ed04

08002da8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10d      	bne.n	8002de2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d14d      	bne.n	8002e6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 f874 	bl	8003ec0 <xTaskPriorityDisinherit>
 8002dd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	e043      	b.n	8002e6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d119      	bne.n	8002e1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6858      	ldr	r0, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	461a      	mov	r2, r3
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	f002 fa12 	bl	800521c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	441a      	add	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d32b      	bcc.n	8002e6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e026      	b.n	8002e6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68d8      	ldr	r0, [r3, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	461a      	mov	r2, r3
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	f002 f9f8 	bl	800521c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	425b      	negs	r3, r3
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d207      	bcs.n	8002e58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	425b      	negs	r3, r3
 8002e52:	441a      	add	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d105      	bne.n	8002e6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e72:	697b      	ldr	r3, [r7, #20]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d018      	beq.n	8002ec0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	441a      	add	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d303      	bcc.n	8002eb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68d9      	ldr	r1, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f002 f9ae 	bl	800521c <memcpy>
	}
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ed0:	f001 fd30 	bl	8004934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002edc:	e011      	b.n	8002f02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3324      	adds	r3, #36	; 0x24
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fdb0 	bl	8003a50 <xTaskRemoveFromEventList>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ef6:	f000 fe89 	bl	8003c0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	dce9      	bgt.n	8002ede <prvUnlockQueue+0x16>
 8002f0a:	e000      	b.n	8002f0e <prvUnlockQueue+0x46>
					break;
 8002f0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	22ff      	movs	r2, #255	; 0xff
 8002f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f16:	f001 fd3d 	bl	8004994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f1a:	f001 fd0b 	bl	8004934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f26:	e011      	b.n	8002f4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3310      	adds	r3, #16
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fd8b 	bl	8003a50 <xTaskRemoveFromEventList>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f40:	f000 fe64 	bl	8003c0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f44:	7bbb      	ldrb	r3, [r7, #14]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	dce9      	bgt.n	8002f28 <prvUnlockQueue+0x60>
 8002f54:	e000      	b.n	8002f58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	22ff      	movs	r2, #255	; 0xff
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f60:	f001 fd18 	bl	8004994 <vPortExitCritical>
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f74:	f001 fcde 	bl	8004934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e001      	b.n	8002f8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f8a:	f001 fd03 	bl	8004994 <vPortExitCritical>

	return xReturn;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fa0:	f001 fcc8 	bl	8004934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d102      	bne.n	8002fb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e001      	b.n	8002fba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fba:	f001 fceb 	bl	8004994 <vPortExitCritical>

	return xReturn;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	e014      	b.n	8003002 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fd8:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <vQueueAddToRegistry+0x50>)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fe4:	490c      	ldr	r1, [pc, #48]	; (8003018 <vQueueAddToRegistry+0x50>)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <vQueueAddToRegistry+0x50>)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ffa:	e006      	b.n	800300a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b07      	cmp	r3, #7
 8003006:	d9e7      	bls.n	8002fd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000868 	.word	0x20000868

0800301c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800302c:	f001 fc82 	bl	8004934 <vPortEnterCritical>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003036:	b25b      	sxtb	r3, r3
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d103      	bne.n	8003046 <vQueueWaitForMessageRestricted+0x2a>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800304c:	b25b      	sxtb	r3, r3
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d103      	bne.n	800305c <vQueueWaitForMessageRestricted+0x40>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800305c:	f001 fc9a 	bl	8004994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	2b00      	cmp	r3, #0
 8003066:	d106      	bne.n	8003076 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3324      	adds	r3, #36	; 0x24
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fcc1 	bl	80039f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff26 	bl	8002ec8 <prvUnlockQueue>
	}
 800307c:	bf00      	nop
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08e      	sub	sp, #56	; 0x38
 8003088:	af04      	add	r7, sp, #16
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10a      	bne.n	80030ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	623b      	str	r3, [r7, #32]
}
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <xTaskCreateStatic+0x46>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	61fb      	str	r3, [r7, #28]
}
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030ca:	23a8      	movs	r3, #168	; 0xa8
 80030cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2ba8      	cmp	r3, #168	; 0xa8
 80030d2:	d00a      	beq.n	80030ea <xTaskCreateStatic+0x66>
	__asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	61bb      	str	r3, [r7, #24]
}
 80030e6:	bf00      	nop
 80030e8:	e7fe      	b.n	80030e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80030ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01e      	beq.n	8003130 <xTaskCreateStatic+0xac>
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01b      	beq.n	8003130 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003100:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	2202      	movs	r2, #2
 8003106:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800310a:	2300      	movs	r3, #0
 800310c:	9303      	str	r3, [sp, #12]
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	9302      	str	r3, [sp, #8]
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f850 	bl	80031c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800312a:	f000 f8f3 	bl	8003314 <prvAddNewTaskToReadyList>
 800312e:	e001      	b.n	8003134 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003134:	697b      	ldr	r3, [r7, #20]
	}
 8003136:	4618      	mov	r0, r3
 8003138:	3728      	adds	r7, #40	; 0x28
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800313e:	b580      	push	{r7, lr}
 8003140:	b08c      	sub	sp, #48	; 0x30
 8003142:	af04      	add	r7, sp, #16
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4618      	mov	r0, r3
 8003154:	f001 fdf4 	bl	8004d40 <pvPortMalloc>
 8003158:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00e      	beq.n	800317e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003160:	20a8      	movs	r0, #168	; 0xa8
 8003162:	f001 fded 	bl	8004d40 <pvPortMalloc>
 8003166:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
 8003174:	e005      	b.n	8003182 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003176:	6978      	ldr	r0, [r7, #20]
 8003178:	f001 feae 	bl	8004ed8 <vPortFree>
 800317c:	e001      	b.n	8003182 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d017      	beq.n	80031b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003190:	88fa      	ldrh	r2, [r7, #6]
 8003192:	2300      	movs	r3, #0
 8003194:	9303      	str	r3, [sp, #12]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	9302      	str	r3, [sp, #8]
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f80e 	bl	80031c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031ac:	69f8      	ldr	r0, [r7, #28]
 80031ae:	f000 f8b1 	bl	8003314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e002      	b.n	80031be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295
 80031bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031be:	69bb      	ldr	r3, [r7, #24]
	}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	461a      	mov	r2, r3
 80031e0:	21a5      	movs	r1, #165	; 0xa5
 80031e2:	f001 ff97 	bl	8005114 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031f0:	3b01      	subs	r3, #1
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f023 0307 	bic.w	r3, r3, #7
 80031fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <prvInitialiseNewTask+0x58>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	617b      	str	r3, [r7, #20]
}
 800321c:	bf00      	nop
 800321e:	e7fe      	b.n	800321e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01f      	beq.n	8003266 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e012      	b.n	8003252 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	7819      	ldrb	r1, [r3, #0]
 8003234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	3334      	adds	r3, #52	; 0x34
 800323c:	460a      	mov	r2, r1
 800323e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d006      	beq.n	800325a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	3301      	adds	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2b0f      	cmp	r3, #15
 8003256:	d9e9      	bls.n	800322c <prvInitialiseNewTask+0x64>
 8003258:	e000      	b.n	800325c <prvInitialiseNewTask+0x94>
			{
				break;
 800325a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003264:	e003      	b.n	800326e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b37      	cmp	r3, #55	; 0x37
 8003272:	d901      	bls.n	8003278 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003274:	2337      	movs	r3, #55	; 0x37
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800327c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003282:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	2200      	movs	r2, #0
 8003288:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	3304      	adds	r3, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f978 	bl	8002584 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	3318      	adds	r3, #24
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff f973 	bl	8002584 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	3354      	adds	r3, #84	; 0x54
 80032c8:	224c      	movs	r2, #76	; 0x4c
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 ff21 	bl	8005114 <memset>
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <prvInitialiseNewTask+0x140>)
 80032d6:	659a      	str	r2, [r3, #88]	; 0x58
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	4a0c      	ldr	r2, [pc, #48]	; (800330c <prvInitialiseNewTask+0x144>)
 80032dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <prvInitialiseNewTask+0x148>)
 80032e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	69b8      	ldr	r0, [r7, #24]
 80032ea:	f001 f9f9 	bl	80046e0 <pxPortInitialiseStack>
 80032ee:	4602      	mov	r2, r0
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003300:	bf00      	nop
 8003302:	3720      	adds	r7, #32
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20004b08 	.word	0x20004b08
 800330c:	20004b70 	.word	0x20004b70
 8003310:	20004bd8 	.word	0x20004bd8

08003314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800331c:	f001 fb0a 	bl	8004934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <prvAddNewTaskToReadyList+0xc4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <prvAddNewTaskToReadyList+0xc4>)
 8003328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800332a:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <prvAddNewTaskToReadyList+0xc8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003332:	4a2a      	ldr	r2, [pc, #168]	; (80033dc <prvAddNewTaskToReadyList+0xc8>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003338:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <prvAddNewTaskToReadyList+0xc4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d110      	bne.n	8003362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003340:	f000 fcde 	bl	8003d00 <prvInitialiseTaskLists>
 8003344:	e00d      	b.n	8003362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003346:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <prvAddNewTaskToReadyList+0xcc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800334e:	4b23      	ldr	r3, [pc, #140]	; (80033dc <prvAddNewTaskToReadyList+0xc8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	429a      	cmp	r2, r3
 800335a:	d802      	bhi.n	8003362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800335c:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <prvAddNewTaskToReadyList+0xc8>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <prvAddNewTaskToReadyList+0xd0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <prvAddNewTaskToReadyList+0xd0>)
 800336a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <prvAddNewTaskToReadyList+0xd0>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <prvAddNewTaskToReadyList+0xd4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d903      	bls.n	8003388 <prvAddNewTaskToReadyList+0x74>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <prvAddNewTaskToReadyList+0xd4>)
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4a15      	ldr	r2, [pc, #84]	; (80033ec <prvAddNewTaskToReadyList+0xd8>)
 8003396:	441a      	add	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f7ff f8fd 	bl	800259e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033a4:	f001 faf6 	bl	8004994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <prvAddNewTaskToReadyList+0xcc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <prvAddNewTaskToReadyList+0xc8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d207      	bcs.n	80033ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <prvAddNewTaskToReadyList+0xdc>)
 80033c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000d7c 	.word	0x20000d7c
 80033dc:	200008a8 	.word	0x200008a8
 80033e0:	20000d88 	.word	0x20000d88
 80033e4:	20000d98 	.word	0x20000d98
 80033e8:	20000d84 	.word	0x20000d84
 80033ec:	200008ac 	.word	0x200008ac
 80033f0:	e000ed04 	.word	0xe000ed04

080033f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d017      	beq.n	8003436 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <vTaskDelay+0x60>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <vTaskDelay+0x30>
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	60bb      	str	r3, [r7, #8]
}
 8003420:	bf00      	nop
 8003422:	e7fe      	b.n	8003422 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003424:	f000 f88a 	bl	800353c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003428:	2100      	movs	r1, #0
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fdb6 	bl	8003f9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003430:	f000 f8ca 	bl	80035c8 <xTaskResumeAll>
 8003434:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d107      	bne.n	800344c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <vTaskDelay+0x64>)
 800343e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000da4 	.word	0x20000da4
 8003458:	e000ed04 	.word	0xe000ed04

0800345c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800346a:	463a      	mov	r2, r7
 800346c:	1d39      	adds	r1, r7, #4
 800346e:	f107 0308 	add.w	r3, r7, #8
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff f832 	bl	80024dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	9202      	str	r2, [sp, #8]
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	2300      	movs	r3, #0
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	460a      	mov	r2, r1
 800348a:	4924      	ldr	r1, [pc, #144]	; (800351c <vTaskStartScheduler+0xc0>)
 800348c:	4824      	ldr	r0, [pc, #144]	; (8003520 <vTaskStartScheduler+0xc4>)
 800348e:	f7ff fdf9 	bl	8003084 <xTaskCreateStatic>
 8003492:	4603      	mov	r3, r0
 8003494:	4a23      	ldr	r2, [pc, #140]	; (8003524 <vTaskStartScheduler+0xc8>)
 8003496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003498:	4b22      	ldr	r3, [pc, #136]	; (8003524 <vTaskStartScheduler+0xc8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034a0:	2301      	movs	r3, #1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	e001      	b.n	80034aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d102      	bne.n	80034b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034b0:	f000 fdc8 	bl	8004044 <xTimerCreateTimerTask>
 80034b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d11b      	bne.n	80034f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	613b      	str	r3, [r7, #16]
}
 80034ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <vTaskStartScheduler+0xcc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3354      	adds	r3, #84	; 0x54
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <vTaskStartScheduler+0xd0>)
 80034d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <vTaskStartScheduler+0xd4>)
 80034dc:	f04f 32ff 	mov.w	r2, #4294967295
 80034e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <vTaskStartScheduler+0xd8>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034e8:	4b13      	ldr	r3, [pc, #76]	; (8003538 <vTaskStartScheduler+0xdc>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034ee:	f001 f97f 	bl	80047f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034f2:	e00e      	b.n	8003512 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d10a      	bne.n	8003512 <vTaskStartScheduler+0xb6>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	60fb      	str	r3, [r7, #12]
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <vTaskStartScheduler+0xb4>
}
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	08005308 	.word	0x08005308
 8003520:	08003c25 	.word	0x08003c25
 8003524:	20000da0 	.word	0x20000da0
 8003528:	200008a8 	.word	0x200008a8
 800352c:	2000005c 	.word	0x2000005c
 8003530:	20000d9c 	.word	0x20000d9c
 8003534:	20000d88 	.word	0x20000d88
 8003538:	20000d80 	.word	0x20000d80

0800353c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <vTaskSuspendAll+0x18>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3301      	adds	r3, #1
 8003546:	4a03      	ldr	r2, [pc, #12]	; (8003554 <vTaskSuspendAll+0x18>)
 8003548:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800354a:	bf00      	nop
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	20000da4 	.word	0x20000da4

08003558 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800355e:	2300      	movs	r3, #0
 8003560:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <prvGetExpectedIdleTime+0x5c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800356a:	2301      	movs	r3, #1
 800356c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <prvGetExpectedIdleTime+0x60>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	e012      	b.n	80035a4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <prvGetExpectedIdleTime+0x64>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d902      	bls.n	800358c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	e00b      	b.n	80035a4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	e005      	b.n	80035a4 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <prvGetExpectedIdleTime+0x68>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <prvGetExpectedIdleTime+0x6c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80035a4:	687b      	ldr	r3, [r7, #4]
	}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000d84 	.word	0x20000d84
 80035b8:	200008a8 	.word	0x200008a8
 80035bc:	200008ac 	.word	0x200008ac
 80035c0:	20000d9c 	.word	0x20000d9c
 80035c4:	20000d80 	.word	0x20000d80

080035c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035d6:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <xTaskResumeAll+0x118>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	603b      	str	r3, [r7, #0]
}
 80035f0:	bf00      	nop
 80035f2:	e7fe      	b.n	80035f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035f4:	f001 f99e 	bl	8004934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035f8:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <xTaskResumeAll+0x118>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	4a38      	ldr	r2, [pc, #224]	; (80036e0 <xTaskResumeAll+0x118>)
 8003600:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003602:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <xTaskResumeAll+0x118>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d162      	bne.n	80036d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800360a:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <xTaskResumeAll+0x11c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d05e      	beq.n	80036d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003612:	e02f      	b.n	8003674 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003614:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <xTaskResumeAll+0x120>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3318      	adds	r3, #24
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff f819 	bl	8002658 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3304      	adds	r3, #4
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff f814 	bl	8002658 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003634:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <xTaskResumeAll+0x124>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d903      	bls.n	8003644 <xTaskResumeAll+0x7c>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	4a2a      	ldr	r2, [pc, #168]	; (80036ec <xTaskResumeAll+0x124>)
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <xTaskResumeAll+0x128>)
 8003652:	441a      	add	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f7fe ff9f 	bl	800259e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <xTaskResumeAll+0x12c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <xTaskResumeAll+0x130>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003674:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <xTaskResumeAll+0x120>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1cb      	bne.n	8003614 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003682:	f000 fbdf 	bl	8003e44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003686:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <xTaskResumeAll+0x134>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d010      	beq.n	80036b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003692:	f000 f86f 	bl	8003774 <xTaskIncrementTick>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800369c:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <xTaskResumeAll+0x130>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f1      	bne.n	8003692 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <xTaskResumeAll+0x134>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036b4:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <xTaskResumeAll+0x130>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036bc:	2301      	movs	r3, #1
 80036be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <xTaskResumeAll+0x138>)
 80036c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036d0:	f001 f960 	bl	8004994 <vPortExitCritical>

	return xAlreadyYielded;
 80036d4:	68bb      	ldr	r3, [r7, #8]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000da4 	.word	0x20000da4
 80036e4:	20000d7c 	.word	0x20000d7c
 80036e8:	20000d3c 	.word	0x20000d3c
 80036ec:	20000d84 	.word	0x20000d84
 80036f0:	200008ac 	.word	0x200008ac
 80036f4:	200008a8 	.word	0x200008a8
 80036f8:	20000d90 	.word	0x20000d90
 80036fc:	20000d8c 	.word	0x20000d8c
 8003700:	e000ed04 	.word	0xe000ed04

08003704 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <xTaskGetTickCount+0x1c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003710:	687b      	ldr	r3, [r7, #4]
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000d80 	.word	0x20000d80

08003724 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <vTaskStepTick+0x48>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	441a      	add	r2, r3
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <vTaskStepTick+0x4c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d90a      	bls.n	8003752 <vTaskStepTick+0x2e>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	60fb      	str	r3, [r7, #12]
}
 800374e:	bf00      	nop
 8003750:	e7fe      	b.n	8003750 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <vTaskStepTick+0x48>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	4a04      	ldr	r2, [pc, #16]	; (800376c <vTaskStepTick+0x48>)
 800375c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000d80 	.word	0x20000d80
 8003770:	20000d9c 	.word	0x20000d9c

08003774 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800377e:	4b4f      	ldr	r3, [pc, #316]	; (80038bc <xTaskIncrementTick+0x148>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f040 808f 	bne.w	80038a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003788:	4b4d      	ldr	r3, [pc, #308]	; (80038c0 <xTaskIncrementTick+0x14c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003790:	4a4b      	ldr	r2, [pc, #300]	; (80038c0 <xTaskIncrementTick+0x14c>)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d120      	bne.n	80037de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800379c:	4b49      	ldr	r3, [pc, #292]	; (80038c4 <xTaskIncrementTick+0x150>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <xTaskIncrementTick+0x48>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	603b      	str	r3, [r7, #0]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <xTaskIncrementTick+0x46>
 80037bc:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <xTaskIncrementTick+0x150>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <xTaskIncrementTick+0x154>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a3f      	ldr	r2, [pc, #252]	; (80038c4 <xTaskIncrementTick+0x150>)
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4a3f      	ldr	r2, [pc, #252]	; (80038c8 <xTaskIncrementTick+0x154>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b3e      	ldr	r3, [pc, #248]	; (80038cc <xTaskIncrementTick+0x158>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a3d      	ldr	r2, [pc, #244]	; (80038cc <xTaskIncrementTick+0x158>)
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	f000 fb33 	bl	8003e44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037de:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <xTaskIncrementTick+0x15c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d349      	bcc.n	800387c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037e8:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <xTaskIncrementTick+0x150>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <xTaskIncrementTick+0x15c>)
 80037f4:	f04f 32ff 	mov.w	r2, #4294967295
 80037f8:	601a      	str	r2, [r3, #0]
					break;
 80037fa:	e03f      	b.n	800387c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fc:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <xTaskIncrementTick+0x150>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d203      	bcs.n	800381c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003814:	4a2e      	ldr	r2, [pc, #184]	; (80038d0 <xTaskIncrementTick+0x15c>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800381a:	e02f      	b.n	800387c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	3304      	adds	r3, #4
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe ff19 	bl	8002658 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3318      	adds	r3, #24
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe ff10 	bl	8002658 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <xTaskIncrementTick+0x160>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d903      	bls.n	800384c <xTaskIncrementTick+0xd8>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <xTaskIncrementTick+0x160>)
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <xTaskIncrementTick+0x164>)
 800385a:	441a      	add	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3304      	adds	r3, #4
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f7fe fe9b 	bl	800259e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <xTaskIncrementTick+0x168>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	429a      	cmp	r2, r3
 8003874:	d3b8      	bcc.n	80037e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003876:	2301      	movs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800387a:	e7b5      	b.n	80037e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800387c:	4b17      	ldr	r3, [pc, #92]	; (80038dc <xTaskIncrementTick+0x168>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	4915      	ldr	r1, [pc, #84]	; (80038d8 <xTaskIncrementTick+0x164>)
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d901      	bls.n	8003898 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003894:	2301      	movs	r3, #1
 8003896:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <xTaskIncrementTick+0x16c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80038a0:	2301      	movs	r3, #1
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e004      	b.n	80038b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <xTaskIncrementTick+0x170>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3301      	adds	r3, #1
 80038ac:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <xTaskIncrementTick+0x170>)
 80038ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038b0:	697b      	ldr	r3, [r7, #20]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000da4 	.word	0x20000da4
 80038c0:	20000d80 	.word	0x20000d80
 80038c4:	20000d34 	.word	0x20000d34
 80038c8:	20000d38 	.word	0x20000d38
 80038cc:	20000d94 	.word	0x20000d94
 80038d0:	20000d9c 	.word	0x20000d9c
 80038d4:	20000d84 	.word	0x20000d84
 80038d8:	200008ac 	.word	0x200008ac
 80038dc:	200008a8 	.word	0x200008a8
 80038e0:	20000d90 	.word	0x20000d90
 80038e4:	20000d8c 	.word	0x20000d8c

080038e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <vTaskSwitchContext+0xb0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038f6:	4b29      	ldr	r3, [pc, #164]	; (800399c <vTaskSwitchContext+0xb4>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038fc:	e046      	b.n	800398c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <vTaskSwitchContext+0xb4>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003904:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <vTaskSwitchContext+0xb8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	e010      	b.n	800392e <vTaskSwitchContext+0x46>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <vTaskSwitchContext+0x40>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	607b      	str	r3, [r7, #4]
}
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <vTaskSwitchContext+0x3e>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3b01      	subs	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	491d      	ldr	r1, [pc, #116]	; (80039a4 <vTaskSwitchContext+0xbc>)
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0e4      	beq.n	800390c <vTaskSwitchContext+0x24>
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <vTaskSwitchContext+0xbc>)
 800394e:	4413      	add	r3, r2
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	3308      	adds	r3, #8
 8003964:	429a      	cmp	r2, r3
 8003966:	d104      	bne.n	8003972 <vTaskSwitchContext+0x8a>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <vTaskSwitchContext+0xc0>)
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <vTaskSwitchContext+0xb8>)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <vTaskSwitchContext+0xc0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3354      	adds	r3, #84	; 0x54
 8003988:	4a08      	ldr	r2, [pc, #32]	; (80039ac <vTaskSwitchContext+0xc4>)
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	20000da4 	.word	0x20000da4
 800399c:	20000d90 	.word	0x20000d90
 80039a0:	20000d84 	.word	0x20000d84
 80039a4:	200008ac 	.word	0x200008ac
 80039a8:	200008a8 	.word	0x200008a8
 80039ac:	2000005c 	.word	0x2000005c

080039b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	60fb      	str	r3, [r7, #12]
}
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <vTaskPlaceOnEventList+0x44>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3318      	adds	r3, #24
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe fe01 	bl	80025e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039e4:	2101      	movs	r1, #1
 80039e6:	6838      	ldr	r0, [r7, #0]
 80039e8:	f000 fad8 	bl	8003f9c <prvAddCurrentTaskToDelayedList>
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	200008a8 	.word	0x200008a8

080039f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	617b      	str	r3, [r7, #20]
}
 8003a1c:	bf00      	nop
 8003a1e:	e7fe      	b.n	8003a1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <vTaskPlaceOnEventListRestricted+0x54>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3318      	adds	r3, #24
 8003a26:	4619      	mov	r1, r3
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7fe fdb8 	bl	800259e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295
 8003a38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	68b8      	ldr	r0, [r7, #8]
 8003a3e:	f000 faad 	bl	8003f9c <prvAddCurrentTaskToDelayedList>
	}
 8003a42:	bf00      	nop
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200008a8 	.word	0x200008a8

08003a50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	60fb      	str	r3, [r7, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	3318      	adds	r3, #24
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fde9 	bl	8002658 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a86:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <xTaskRemoveFromEventList+0xb4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d11f      	bne.n	8003ace <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	3304      	adds	r3, #4
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fde0 	bl	8002658 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <xTaskRemoveFromEventList+0xb8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d903      	bls.n	8003aac <xTaskRemoveFromEventList+0x5c>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <xTaskRemoveFromEventList+0xb8>)
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <xTaskRemoveFromEventList+0xbc>)
 8003aba:	441a      	add	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7fe fd6b 	bl	800259e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8003ac8:	f000 f9bc 	bl	8003e44 <prvResetNextTaskUnblockTime>
 8003acc:	e005      	b.n	8003ada <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	3318      	adds	r3, #24
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	480e      	ldr	r0, [pc, #56]	; (8003b10 <xTaskRemoveFromEventList+0xc0>)
 8003ad6:	f7fe fd62 	bl	800259e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <xTaskRemoveFromEventList+0xc4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d905      	bls.n	8003af4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <xTaskRemoveFromEventList+0xc8>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e001      	b.n	8003af8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003af8:	697b      	ldr	r3, [r7, #20]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000da4 	.word	0x20000da4
 8003b08:	20000d84 	.word	0x20000d84
 8003b0c:	200008ac 	.word	0x200008ac
 8003b10:	20000d3c 	.word	0x20000d3c
 8003b14:	200008a8 	.word	0x200008a8
 8003b18:	20000d90 	.word	0x20000d90

08003b1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <vTaskInternalSetTimeOutState+0x24>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <vTaskInternalSetTimeOutState+0x28>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	605a      	str	r2, [r3, #4]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	20000d94 	.word	0x20000d94
 8003b44:	20000d80 	.word	0x20000d80

08003b48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	613b      	str	r3, [r7, #16]
}
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	60fb      	str	r3, [r7, #12]
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b8a:	f000 fed3 	bl	8004934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <xTaskCheckForTimeOut+0xbc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d102      	bne.n	8003bae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e023      	b.n	8003bf6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <xTaskCheckForTimeOut+0xc0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d007      	beq.n	8003bca <xTaskCheckForTimeOut+0x82>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d302      	bcc.n	8003bca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e015      	b.n	8003bf6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d20b      	bcs.n	8003bec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1ad2      	subs	r2, r2, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff9b 	bl	8003b1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	e004      	b.n	8003bf6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bf6:	f000 fecd 	bl	8004994 <vPortExitCritical>

	return xReturn;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000d80 	.word	0x20000d80
 8003c08:	20000d94 	.word	0x20000d94

08003c0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <vTaskMissedYield+0x14>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20000d90 	.word	0x20000d90

08003c24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c2c:	f000 f8a8 	bl	8003d80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c30:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <prvIdleTask+0x70>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d907      	bls.n	8003c48 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003c38:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <prvIdleTask+0x74>)
 8003c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8003c48:	f7ff fc86 	bl	8003558 <prvGetExpectedIdleTime>
 8003c4c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d9eb      	bls.n	8003c2c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8003c54:	f7ff fc72 	bl	800353c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <prvIdleTask+0x78>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <prvIdleTask+0x7c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d20a      	bcs.n	8003c7a <prvIdleTask+0x56>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	60bb      	str	r3, [r7, #8]
}
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8003c7a:	f7ff fc6d 	bl	8003558 <prvGetExpectedIdleTime>
 8003c7e:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d902      	bls.n	8003c8c <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 ff08 	bl	8004a9c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8003c8c:	f7ff fc9c 	bl	80035c8 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8003c90:	e7cc      	b.n	8003c2c <prvIdleTask+0x8>
 8003c92:	bf00      	nop
 8003c94:	200008ac 	.word	0x200008ac
 8003c98:	e000ed04 	.word	0xe000ed04
 8003c9c:	20000d9c 	.word	0x20000d9c
 8003ca0:	20000d80 	.word	0x20000d80

08003ca4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8003caa:	2301      	movs	r3, #1
 8003cac:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <eTaskConfirmSleepModeStatus+0x4c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	71fb      	strb	r3, [r7, #7]
 8003cbe:	e010      	b.n	8003ce2 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <eTaskConfirmSleepModeStatus+0x50>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	71fb      	strb	r3, [r7, #7]
 8003ccc:	e009      	b.n	8003ce2 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <eTaskConfirmSleepModeStatus+0x54>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <eTaskConfirmSleepModeStatus+0x58>)
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	1acb      	subs	r3, r1, r3
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d101      	bne.n	8003ce2 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
	}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	20000d3c 	.word	0x20000d3c
 8003cf4:	20000d90 	.word	0x20000d90
 8003cf8:	20000d68 	.word	0x20000d68
 8003cfc:	20000d7c 	.word	0x20000d7c

08003d00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d06:	2300      	movs	r3, #0
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	e00c      	b.n	8003d26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <prvInitialiseTaskLists+0x60>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe fc12 	bl	8002544 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3301      	adds	r3, #1
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b37      	cmp	r3, #55	; 0x37
 8003d2a:	d9ef      	bls.n	8003d0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d2c:	480d      	ldr	r0, [pc, #52]	; (8003d64 <prvInitialiseTaskLists+0x64>)
 8003d2e:	f7fe fc09 	bl	8002544 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d32:	480d      	ldr	r0, [pc, #52]	; (8003d68 <prvInitialiseTaskLists+0x68>)
 8003d34:	f7fe fc06 	bl	8002544 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d38:	480c      	ldr	r0, [pc, #48]	; (8003d6c <prvInitialiseTaskLists+0x6c>)
 8003d3a:	f7fe fc03 	bl	8002544 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d3e:	480c      	ldr	r0, [pc, #48]	; (8003d70 <prvInitialiseTaskLists+0x70>)
 8003d40:	f7fe fc00 	bl	8002544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d44:	480b      	ldr	r0, [pc, #44]	; (8003d74 <prvInitialiseTaskLists+0x74>)
 8003d46:	f7fe fbfd 	bl	8002544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <prvInitialiseTaskLists+0x78>)
 8003d4c:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <prvInitialiseTaskLists+0x64>)
 8003d4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <prvInitialiseTaskLists+0x7c>)
 8003d52:	4a05      	ldr	r2, [pc, #20]	; (8003d68 <prvInitialiseTaskLists+0x68>)
 8003d54:	601a      	str	r2, [r3, #0]
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200008ac 	.word	0x200008ac
 8003d64:	20000d0c 	.word	0x20000d0c
 8003d68:	20000d20 	.word	0x20000d20
 8003d6c:	20000d3c 	.word	0x20000d3c
 8003d70:	20000d50 	.word	0x20000d50
 8003d74:	20000d68 	.word	0x20000d68
 8003d78:	20000d34 	.word	0x20000d34
 8003d7c:	20000d38 	.word	0x20000d38

08003d80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d86:	e019      	b.n	8003dbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d88:	f000 fdd4 	bl	8004934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d8c:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <prvCheckTasksWaitingTermination+0x50>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3304      	adds	r3, #4
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe fc5d 	bl	8002658 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <prvCheckTasksWaitingTermination+0x54>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	4a0b      	ldr	r2, [pc, #44]	; (8003dd4 <prvCheckTasksWaitingTermination+0x54>)
 8003da6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <prvCheckTasksWaitingTermination+0x58>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <prvCheckTasksWaitingTermination+0x58>)
 8003db0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003db2:	f000 fdef 	bl	8004994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f810 	bl	8003ddc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <prvCheckTasksWaitingTermination+0x58>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e1      	bne.n	8003d88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000d50 	.word	0x20000d50
 8003dd4:	20000d7c 	.word	0x20000d7c
 8003dd8:	20000d64 	.word	0x20000d64

08003ddc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3354      	adds	r3, #84	; 0x54
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 f99b 	bl	8005124 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d108      	bne.n	8003e0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 f86b 	bl	8004ed8 <vPortFree>
				vPortFree( pxTCB );
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f001 f868 	bl	8004ed8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e08:	e018      	b.n	8003e3c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d103      	bne.n	8003e1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f001 f85f 	bl	8004ed8 <vPortFree>
	}
 8003e1a:	e00f      	b.n	8003e3c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d00a      	beq.n	8003e3c <prvDeleteTCB+0x60>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60fb      	str	r3, [r7, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <prvDeleteTCB+0x5e>
	}
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <prvResetNextTaskUnblockTime+0x38>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <prvResetNextTaskUnblockTime+0x3c>)
 8003e56:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e5c:	e008      	b.n	8003e70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <prvResetNextTaskUnblockTime+0x38>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <prvResetNextTaskUnblockTime+0x3c>)
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20000d34 	.word	0x20000d34
 8003e80:	20000d9c 	.word	0x20000d9c

08003e84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <xTaskGetSchedulerState+0x34>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d102      	bne.n	8003e98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e92:	2301      	movs	r3, #1
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	e008      	b.n	8003eaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <xTaskGetSchedulerState+0x38>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	e001      	b.n	8003eaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003eaa:	687b      	ldr	r3, [r7, #4]
	}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	20000d88 	.word	0x20000d88
 8003ebc:	20000da4 	.word	0x20000da4

08003ec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d056      	beq.n	8003f84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ed6:	4b2e      	ldr	r3, [pc, #184]	; (8003f90 <xTaskPriorityDisinherit+0xd0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d00a      	beq.n	8003ef6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	60fb      	str	r3, [r7, #12]
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	60bb      	str	r3, [r7, #8]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f18:	1e5a      	subs	r2, r3, #1
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d02c      	beq.n	8003f84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d128      	bne.n	8003f84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fb8e 	bl	8002658 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <xTaskPriorityDisinherit+0xd4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d903      	bls.n	8003f64 <xTaskPriorityDisinherit+0xa4>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <xTaskPriorityDisinherit+0xd4>)
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <xTaskPriorityDisinherit+0xd8>)
 8003f72:	441a      	add	r2, r3
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f7fe fb0f 	bl	800259e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f84:	697b      	ldr	r3, [r7, #20]
	}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200008a8 	.word	0x200008a8
 8003f94:	20000d84 	.word	0x20000d84
 8003f98:	200008ac 	.word	0x200008ac

08003f9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fa6:	4b21      	ldr	r3, [pc, #132]	; (800402c <prvAddCurrentTaskToDelayedList+0x90>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fb50 	bl	8002658 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d10a      	bne.n	8003fd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc6:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4819      	ldr	r0, [pc, #100]	; (8004034 <prvAddCurrentTaskToDelayedList+0x98>)
 8003fd0:	f7fe fae5 	bl	800259e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fd4:	e026      	b.n	8004024 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4413      	add	r3, r2
 8003fdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fde:	4b14      	ldr	r3, [pc, #80]	; (8004030 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d209      	bcs.n	8004002 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fee:	4b12      	ldr	r3, [pc, #72]	; (8004038 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	f7fe faf3 	bl	80025e6 <vListInsert>
}
 8004000:	e010      	b.n	8004024 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <prvAddCurrentTaskToDelayedList+0x94>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f7fe fae9 	bl	80025e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	d202      	bcs.n	8004024 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800401e:	4a08      	ldr	r2, [pc, #32]	; (8004040 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	6013      	str	r3, [r2, #0]
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000d80 	.word	0x20000d80
 8004030:	200008a8 	.word	0x200008a8
 8004034:	20000d68 	.word	0x20000d68
 8004038:	20000d38 	.word	0x20000d38
 800403c:	20000d34 	.word	0x20000d34
 8004040:	20000d9c 	.word	0x20000d9c

08004044 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800404e:	f000 fb07 	bl	8004660 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004052:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <xTimerCreateTimerTask+0x80>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d021      	beq.n	800409e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004062:	1d3a      	adds	r2, r7, #4
 8004064:	f107 0108 	add.w	r1, r7, #8
 8004068:	f107 030c 	add.w	r3, r7, #12
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fa4f 	bl	8002510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	9202      	str	r2, [sp, #8]
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	2302      	movs	r3, #2
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2300      	movs	r3, #0
 8004082:	460a      	mov	r2, r1
 8004084:	4910      	ldr	r1, [pc, #64]	; (80040c8 <xTimerCreateTimerTask+0x84>)
 8004086:	4811      	ldr	r0, [pc, #68]	; (80040cc <xTimerCreateTimerTask+0x88>)
 8004088:	f7fe fffc 	bl	8003084 <xTaskCreateStatic>
 800408c:	4603      	mov	r3, r0
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <xTimerCreateTimerTask+0x8c>)
 8004090:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004092:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <xTimerCreateTimerTask+0x8c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800409a:	2301      	movs	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	613b      	str	r3, [r7, #16]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040ba:	697b      	ldr	r3, [r7, #20]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000dd8 	.word	0x20000dd8
 80040c8:	08005310 	.word	0x08005310
 80040cc:	08004209 	.word	0x08004209
 80040d0:	20000ddc 	.word	0x20000ddc

080040d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <xTimerGenericCommand+0x2e>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	623b      	str	r3, [r7, #32]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <xTimerGenericCommand+0x98>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d02a      	beq.n	8004160 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b05      	cmp	r3, #5
 800411a:	dc18      	bgt.n	800414e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800411c:	f7ff feb2 	bl	8003e84 <xTaskGetSchedulerState>
 8004120:	4603      	mov	r3, r0
 8004122:	2b02      	cmp	r3, #2
 8004124:	d109      	bne.n	800413a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004126:	4b11      	ldr	r3, [pc, #68]	; (800416c <xTimerGenericCommand+0x98>)
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	f107 0110 	add.w	r1, r7, #16
 800412e:	2300      	movs	r3, #0
 8004130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004132:	f7fe fbbf 	bl	80028b4 <xQueueGenericSend>
 8004136:	6278      	str	r0, [r7, #36]	; 0x24
 8004138:	e012      	b.n	8004160 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <xTimerGenericCommand+0x98>)
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	f107 0110 	add.w	r1, r7, #16
 8004142:	2300      	movs	r3, #0
 8004144:	2200      	movs	r2, #0
 8004146:	f7fe fbb5 	bl	80028b4 <xQueueGenericSend>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24
 800414c:	e008      	b.n	8004160 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <xTimerGenericCommand+0x98>)
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	f107 0110 	add.w	r1, r7, #16
 8004156:	2300      	movs	r3, #0
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	f7fe fca9 	bl	8002ab0 <xQueueGenericSendFromISR>
 800415e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004162:	4618      	mov	r0, r3
 8004164:	3728      	adds	r7, #40	; 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000dd8 	.word	0x20000dd8

08004170 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <prvProcessExpiredTimer+0x94>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	3304      	adds	r3, #4
 8004188:	4618      	mov	r0, r3
 800418a:	f7fe fa65 	bl	8002658 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d022      	beq.n	80041e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	18d1      	adds	r1, r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	6978      	ldr	r0, [r7, #20]
 80041aa:	f000 f8d1 	bl	8004350 <prvInsertTimerInActiveList>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01f      	beq.n	80041f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041b4:	2300      	movs	r3, #0
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	2300      	movs	r3, #0
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	2100      	movs	r1, #0
 80041be:	6978      	ldr	r0, [r7, #20]
 80041c0:	f7ff ff88 	bl	80040d4 <xTimerGenericCommand>
 80041c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d113      	bne.n	80041f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	60fb      	str	r3, [r7, #12]
}
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	6978      	ldr	r0, [r7, #20]
 80041fa:	4798      	blx	r3
}
 80041fc:	bf00      	nop
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000dd0 	.word	0x20000dd0

08004208 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004210:	f107 0308 	add.w	r3, r7, #8
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f857 	bl	80042c8 <prvGetNextExpireTime>
 800421a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4619      	mov	r1, r3
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f803 	bl	800422c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004226:	f000 f8d5 	bl	80043d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800422a:	e7f1      	b.n	8004210 <prvTimerTask+0x8>

0800422c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004236:	f7ff f981 	bl	800353c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800423a:	f107 0308 	add.w	r3, r7, #8
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f866 	bl	8004310 <prvSampleTimeNow>
 8004244:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d130      	bne.n	80042ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10a      	bne.n	8004268 <prvProcessTimerOrBlockTask+0x3c>
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	429a      	cmp	r2, r3
 8004258:	d806      	bhi.n	8004268 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800425a:	f7ff f9b5 	bl	80035c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ff85 	bl	8004170 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004266:	e024      	b.n	80042b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800426e:	4b13      	ldr	r3, [pc, #76]	; (80042bc <prvProcessTimerOrBlockTask+0x90>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <prvProcessTimerOrBlockTask+0x50>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <prvProcessTimerOrBlockTask+0x52>
 800427c:	2300      	movs	r3, #0
 800427e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <prvProcessTimerOrBlockTask+0x94>)
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	4619      	mov	r1, r3
 800428e:	f7fe fec5 	bl	800301c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004292:	f7ff f999 	bl	80035c8 <xTaskResumeAll>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <prvProcessTimerOrBlockTask+0x98>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	f3bf 8f6f 	isb	sy
}
 80042ac:	e001      	b.n	80042b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042ae:	f7ff f98b 	bl	80035c8 <xTaskResumeAll>
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000dd4 	.word	0x20000dd4
 80042c0:	20000dd8 	.word	0x20000dd8
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <prvGetNextExpireTime+0x44>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <prvGetNextExpireTime+0x16>
 80042da:	2201      	movs	r2, #1
 80042dc:	e000      	b.n	80042e0 <prvGetNextExpireTime+0x18>
 80042de:	2200      	movs	r2, #0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <prvGetNextExpireTime+0x44>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	e001      	b.n	80042fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042fc:	68fb      	ldr	r3, [r7, #12]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000dd0 	.word	0x20000dd0

08004310 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004318:	f7ff f9f4 	bl	8003704 <xTaskGetTickCount>
 800431c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <prvSampleTimeNow+0x3c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	429a      	cmp	r2, r3
 8004326:	d205      	bcs.n	8004334 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004328:	f000 f936 	bl	8004598 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e002      	b.n	800433a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800433a:	4a04      	ldr	r2, [pc, #16]	; (800434c <prvSampleTimeNow+0x3c>)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004340:	68fb      	ldr	r3, [r7, #12]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000de0 	.word	0x20000de0

08004350 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d812      	bhi.n	800439c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	1ad2      	subs	r2, r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	429a      	cmp	r2, r3
 8004382:	d302      	bcc.n	800438a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004384:	2301      	movs	r3, #1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	e01b      	b.n	80043c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <prvInsertTimerInActiveList+0x7c>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3304      	adds	r3, #4
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f7fe f926 	bl	80025e6 <vListInsert>
 800439a:	e012      	b.n	80043c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d206      	bcs.n	80043b2 <prvInsertTimerInActiveList+0x62>
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d302      	bcc.n	80043b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e007      	b.n	80043c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <prvInsertTimerInActiveList+0x80>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f7fe f912 	bl	80025e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043c2:	697b      	ldr	r3, [r7, #20]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000dd4 	.word	0x20000dd4
 80043d0:	20000dd0 	.word	0x20000dd0

080043d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08e      	sub	sp, #56	; 0x38
 80043d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043da:	e0ca      	b.n	8004572 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	da18      	bge.n	8004414 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043e2:	1d3b      	adds	r3, r7, #4
 80043e4:	3304      	adds	r3, #4
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	61fb      	str	r3, [r7, #28]
}
 8004400:	bf00      	nop
 8004402:	e7fe      	b.n	8004402 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440a:	6850      	ldr	r0, [r2, #4]
 800440c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440e:	6892      	ldr	r2, [r2, #8]
 8004410:	4611      	mov	r1, r2
 8004412:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f2c0 80ab 	blt.w	8004572 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	3304      	adds	r3, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe f913 	bl	8002658 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004432:	463b      	mov	r3, r7
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff ff6b 	bl	8004310 <prvSampleTimeNow>
 800443a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b09      	cmp	r3, #9
 8004440:	f200 8096 	bhi.w	8004570 <prvProcessReceivedCommands+0x19c>
 8004444:	a201      	add	r2, pc, #4	; (adr r2, 800444c <prvProcessReceivedCommands+0x78>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	08004475 	.word	0x08004475
 8004450:	08004475 	.word	0x08004475
 8004454:	08004475 	.word	0x08004475
 8004458:	080044e9 	.word	0x080044e9
 800445c:	080044fd 	.word	0x080044fd
 8004460:	08004547 	.word	0x08004547
 8004464:	08004475 	.word	0x08004475
 8004468:	08004475 	.word	0x08004475
 800446c:	080044e9 	.word	0x080044e9
 8004470:	080044fd 	.word	0x080044fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	b2da      	uxtb	r2, r3
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	18d1      	adds	r1, r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004494:	f7ff ff5c 	bl	8004350 <prvInsertTimerInActiveList>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d069      	beq.n	8004572 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05e      	beq.n	8004572 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	441a      	add	r2, r3
 80044bc:	2300      	movs	r3, #0
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2300      	movs	r3, #0
 80044c2:	2100      	movs	r1, #0
 80044c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c6:	f7ff fe05 	bl	80040d4 <xTimerGenericCommand>
 80044ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d14f      	bne.n	8004572 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	61bb      	str	r3, [r7, #24]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80044fa:	e03a      	b.n	8004572 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	b2da      	uxtb	r2, r3
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	617b      	str	r3, [r7, #20]
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	18d1      	adds	r1, r2, r3
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004540:	f7ff ff06 	bl	8004350 <prvInsertTimerInActiveList>
					break;
 8004544:	e015      	b.n	8004572 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004556:	f000 fcbf 	bl	8004ed8 <vPortFree>
 800455a:	e00a      	b.n	8004572 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	b2da      	uxtb	r2, r3
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800456e:	e000      	b.n	8004572 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004570:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <prvProcessReceivedCommands+0x1c0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	1d39      	adds	r1, r7, #4
 8004578:	2200      	movs	r2, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe fb34 	bl	8002be8 <xQueueReceive>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	f47f af2a 	bne.w	80043dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	3730      	adds	r7, #48	; 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000dd8 	.word	0x20000dd8

08004598 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800459e:	e048      	b.n	8004632 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045a0:	4b2d      	ldr	r3, [pc, #180]	; (8004658 <prvSwitchTimerLists+0xc0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045aa:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <prvSwitchTimerLists+0xc0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe f84d 	bl	8002658 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d02e      	beq.n	8004632 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4413      	add	r3, r2
 80045dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d90e      	bls.n	8004604 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045f2:	4b19      	ldr	r3, [pc, #100]	; (8004658 <prvSwitchTimerLists+0xc0>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f7fd fff2 	bl	80025e6 <vListInsert>
 8004602:	e016      	b.n	8004632 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004604:	2300      	movs	r3, #0
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	2300      	movs	r3, #0
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	2100      	movs	r1, #0
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7ff fd60 	bl	80040d4 <xTimerGenericCommand>
 8004614:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	603b      	str	r3, [r7, #0]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <prvSwitchTimerLists+0xc0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1b1      	bne.n	80045a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <prvSwitchTimerLists+0xc0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <prvSwitchTimerLists+0xc4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <prvSwitchTimerLists+0xc0>)
 8004648:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800464a:	4a04      	ldr	r2, [pc, #16]	; (800465c <prvSwitchTimerLists+0xc4>)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	6013      	str	r3, [r2, #0]
}
 8004650:	bf00      	nop
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000dd0 	.word	0x20000dd0
 800465c:	20000dd4 	.word	0x20000dd4

08004660 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004666:	f000 f965 	bl	8004934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800466a:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <prvCheckForValidListAndQueue+0x60>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d120      	bne.n	80046b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004672:	4814      	ldr	r0, [pc, #80]	; (80046c4 <prvCheckForValidListAndQueue+0x64>)
 8004674:	f7fd ff66 	bl	8002544 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004678:	4813      	ldr	r0, [pc, #76]	; (80046c8 <prvCheckForValidListAndQueue+0x68>)
 800467a:	f7fd ff63 	bl	8002544 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <prvCheckForValidListAndQueue+0x6c>)
 8004680:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <prvCheckForValidListAndQueue+0x64>)
 8004682:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004684:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <prvCheckForValidListAndQueue+0x70>)
 8004686:	4a10      	ldr	r2, [pc, #64]	; (80046c8 <prvCheckForValidListAndQueue+0x68>)
 8004688:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800468a:	2300      	movs	r3, #0
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <prvCheckForValidListAndQueue+0x74>)
 8004690:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <prvCheckForValidListAndQueue+0x78>)
 8004692:	2110      	movs	r1, #16
 8004694:	200a      	movs	r0, #10
 8004696:	f7fe f871 	bl	800277c <xQueueGenericCreateStatic>
 800469a:	4603      	mov	r3, r0
 800469c:	4a08      	ldr	r2, [pc, #32]	; (80046c0 <prvCheckForValidListAndQueue+0x60>)
 800469e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <prvCheckForValidListAndQueue+0x60>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <prvCheckForValidListAndQueue+0x60>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	490b      	ldr	r1, [pc, #44]	; (80046dc <prvCheckForValidListAndQueue+0x7c>)
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe fc8a 	bl	8002fc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046b4:	f000 f96e 	bl	8004994 <vPortExitCritical>
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000dd8 	.word	0x20000dd8
 80046c4:	20000da8 	.word	0x20000da8
 80046c8:	20000dbc 	.word	0x20000dbc
 80046cc:	20000dd0 	.word	0x20000dd0
 80046d0:	20000dd4 	.word	0x20000dd4
 80046d4:	20000e84 	.word	0x20000e84
 80046d8:	20000de4 	.word	0x20000de4
 80046dc:	08005318 	.word	0x08005318

080046e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3b04      	subs	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3b04      	subs	r3, #4
 80046fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f023 0201 	bic.w	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3b04      	subs	r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004710:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <pxPortInitialiseStack+0x64>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b14      	subs	r3, #20
 800471a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3b04      	subs	r3, #4
 8004726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f06f 0202 	mvn.w	r2, #2
 800472e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3b20      	subs	r3, #32
 8004734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004736:	68fb      	ldr	r3, [r7, #12]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	08004749 	.word	0x08004749

08004748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <prvTaskExitError+0x54>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d00a      	beq.n	8004772 <prvTaskExitError+0x2a>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60fb      	str	r3, [r7, #12]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <prvTaskExitError+0x28>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60bb      	str	r3, [r7, #8]
}
 8004784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004786:	bf00      	nop
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0fc      	beq.n	8004788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	2000000c 	.word	0x2000000c

080047a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <pxCurrentTCBConst2>)
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	6808      	ldr	r0, [r1, #0]
 80047a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047aa:	f380 8809 	msr	PSP, r0
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f380 8811 	msr	BASEPRI, r0
 80047ba:	4770      	bx	lr
 80047bc:	f3af 8000 	nop.w

080047c0 <pxCurrentTCBConst2>:
 80047c0:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop

080047c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047c8:	4808      	ldr	r0, [pc, #32]	; (80047ec <prvPortStartFirstTask+0x24>)
 80047ca:	6800      	ldr	r0, [r0, #0]
 80047cc:	6800      	ldr	r0, [r0, #0]
 80047ce:	f380 8808 	msr	MSP, r0
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f380 8814 	msr	CONTROL, r0
 80047da:	b662      	cpsie	i
 80047dc:	b661      	cpsie	f
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	df00      	svc	0
 80047e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047ea:	bf00      	nop
 80047ec:	e000ed08 	.word	0xe000ed08

080047f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047f6:	4b46      	ldr	r3, [pc, #280]	; (8004910 <xPortStartScheduler+0x120>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a46      	ldr	r2, [pc, #280]	; (8004914 <xPortStartScheduler+0x124>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10a      	bne.n	8004816 <xPortStartScheduler+0x26>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	613b      	str	r3, [r7, #16]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004816:	4b3e      	ldr	r3, [pc, #248]	; (8004910 <xPortStartScheduler+0x120>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3f      	ldr	r2, [pc, #252]	; (8004918 <xPortStartScheduler+0x128>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10a      	bne.n	8004836 <xPortStartScheduler+0x46>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	60fb      	str	r3, [r7, #12]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004836:	4b39      	ldr	r3, [pc, #228]	; (800491c <xPortStartScheduler+0x12c>)
 8004838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	22ff      	movs	r2, #255	; 0xff
 8004846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004858:	b2da      	uxtb	r2, r3
 800485a:	4b31      	ldr	r3, [pc, #196]	; (8004920 <xPortStartScheduler+0x130>)
 800485c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800485e:	4b31      	ldr	r3, [pc, #196]	; (8004924 <xPortStartScheduler+0x134>)
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004864:	e009      	b.n	800487a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004866:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <xPortStartScheduler+0x134>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3b01      	subs	r3, #1
 800486c:	4a2d      	ldr	r2, [pc, #180]	; (8004924 <xPortStartScheduler+0x134>)
 800486e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b80      	cmp	r3, #128	; 0x80
 8004884:	d0ef      	beq.n	8004866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004886:	4b27      	ldr	r3, [pc, #156]	; (8004924 <xPortStartScheduler+0x134>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1c3 0307 	rsb	r3, r3, #7
 800488e:	2b04      	cmp	r3, #4
 8004890:	d00a      	beq.n	80048a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60bb      	str	r3, [r7, #8]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048a8:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <xPortStartScheduler+0x134>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <xPortStartScheduler+0x134>)
 80048b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <xPortStartScheduler+0x134>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048ba:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <xPortStartScheduler+0x134>)
 80048bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048c6:	4b18      	ldr	r3, [pc, #96]	; (8004928 <xPortStartScheduler+0x138>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <xPortStartScheduler+0x138>)
 80048cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <xPortStartScheduler+0x138>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a14      	ldr	r2, [pc, #80]	; (8004928 <xPortStartScheduler+0x138>)
 80048d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048de:	f000 f9a9 	bl	8004c34 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <xPortStartScheduler+0x13c>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048e8:	f000 f9e0 	bl	8004cac <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <xPortStartScheduler+0x140>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a0f      	ldr	r2, [pc, #60]	; (8004930 <xPortStartScheduler+0x140>)
 80048f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048f8:	f7ff ff66 	bl	80047c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048fc:	f7fe fff4 	bl	80038e8 <vTaskSwitchContext>
	prvTaskExitError();
 8004900:	f7ff ff22 	bl	8004748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	e000ed00 	.word	0xe000ed00
 8004914:	410fc271 	.word	0x410fc271
 8004918:	410fc270 	.word	0x410fc270
 800491c:	e000e400 	.word	0xe000e400
 8004920:	20000ee0 	.word	0x20000ee0
 8004924:	20000ee4 	.word	0x20000ee4
 8004928:	e000ed20 	.word	0xe000ed20
 800492c:	2000000c 	.word	0x2000000c
 8004930:	e000ef34 	.word	0xe000ef34

08004934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	607b      	str	r3, [r7, #4]
}
 800494c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800494e:	4b0f      	ldr	r3, [pc, #60]	; (800498c <vPortEnterCritical+0x58>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a0d      	ldr	r2, [pc, #52]	; (800498c <vPortEnterCritical+0x58>)
 8004956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <vPortEnterCritical+0x58>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10f      	bne.n	8004980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <vPortEnterCritical+0x5c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <vPortEnterCritical+0x4c>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	603b      	str	r3, [r7, #0]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <vPortEnterCritical+0x4a>
	}
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	2000000c 	.word	0x2000000c
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <vPortExitCritical+0x50>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <vPortExitCritical+0x24>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	607b      	str	r3, [r7, #4]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <vPortExitCritical+0x50>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3b01      	subs	r3, #1
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <vPortExitCritical+0x50>)
 80049c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049c2:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <vPortExitCritical+0x50>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <vPortExitCritical+0x42>
 80049ca:	2300      	movs	r3, #0
 80049cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f383 8811 	msr	BASEPRI, r3
}
 80049d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	2000000c 	.word	0x2000000c
	...

080049f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049f0:	f3ef 8009 	mrs	r0, PSP
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <pxCurrentTCBConst>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	f01e 0f10 	tst.w	lr, #16
 8004a00:	bf08      	it	eq
 8004a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0a:	6010      	str	r0, [r2, #0]
 8004a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a14:	f380 8811 	msr	BASEPRI, r0
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f7fe ff62 	bl	80038e8 <vTaskSwitchContext>
 8004a24:	f04f 0000 	mov.w	r0, #0
 8004a28:	f380 8811 	msr	BASEPRI, r0
 8004a2c:	bc09      	pop	{r0, r3}
 8004a2e:	6819      	ldr	r1, [r3, #0]
 8004a30:	6808      	ldr	r0, [r1, #0]
 8004a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a36:	f01e 0f10 	tst.w	lr, #16
 8004a3a:	bf08      	it	eq
 8004a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a40:	f380 8809 	msr	PSP, r0
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	f3af 8000 	nop.w

08004a50 <pxCurrentTCBConst>:
 8004a50:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop

08004a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	607b      	str	r3, [r7, #4]
}
 8004a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a72:	f7fe fe7f 	bl	8003774 <xTaskIncrementTick>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <xPortSysTickHandler+0x40>)
 8004a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f383 8811 	msr	BASEPRI, r3
}
 8004a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8004aa4:	4b5d      	ldr	r3, [pc, #372]	; (8004c1c <vPortSuppressTicksAndSleep+0x180>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d902      	bls.n	8004ab4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8004aae:	4b5b      	ldr	r3, [pc, #364]	; (8004c1c <vPortSuppressTicksAndSleep+0x180>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8004ab4:	4b5a      	ldr	r3, [pc, #360]	; (8004c20 <vPortSuppressTicksAndSleep+0x184>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a59      	ldr	r2, [pc, #356]	; (8004c20 <vPortSuppressTicksAndSleep+0x184>)
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8004ac0:	4b58      	ldr	r3, [pc, #352]	; (8004c24 <vPortSuppressTicksAndSleep+0x188>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	4957      	ldr	r1, [pc, #348]	; (8004c28 <vPortSuppressTicksAndSleep+0x18c>)
 8004aca:	6809      	ldr	r1, [r1, #0]
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8004ad4:	4b55      	ldr	r3, [pc, #340]	; (8004c2c <vPortSuppressTicksAndSleep+0x190>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d904      	bls.n	8004ae8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8004ade:	4b53      	ldr	r3, [pc, #332]	; (8004c2c <vPortSuppressTicksAndSleep+0x190>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8004ae8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8004aea:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8004aee:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8004af2:	f7ff f8d7 	bl	8003ca4 <eTaskConfirmSleepModeStatus>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d110      	bne.n	8004b1e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8004afc:	4b49      	ldr	r3, [pc, #292]	; (8004c24 <vPortSuppressTicksAndSleep+0x188>)
 8004afe:	4a4c      	ldr	r2, [pc, #304]	; (8004c30 <vPortSuppressTicksAndSleep+0x194>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8004b04:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <vPortSuppressTicksAndSleep+0x184>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a45      	ldr	r2, [pc, #276]	; (8004c20 <vPortSuppressTicksAndSleep+0x184>)
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8004b10:	4b45      	ldr	r3, [pc, #276]	; (8004c28 <vPortSuppressTicksAndSleep+0x18c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a46      	ldr	r2, [pc, #280]	; (8004c30 <vPortSuppressTicksAndSleep+0x194>)
 8004b16:	3b01      	subs	r3, #1
 8004b18:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8004b1a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8004b1c:	e079      	b.n	8004c12 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8004b1e:	4a44      	ldr	r2, [pc, #272]	; (8004c30 <vPortSuppressTicksAndSleep+0x194>)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b24:	4b3f      	ldr	r3, [pc, #252]	; (8004c24 <vPortSuppressTicksAndSleep+0x188>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8004b2a:	4b3d      	ldr	r3, [pc, #244]	; (8004c20 <vPortSuppressTicksAndSleep+0x184>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a3c      	ldr	r2, [pc, #240]	; (8004c20 <vPortSuppressTicksAndSleep+0x184>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	6938      	ldr	r0, [r7, #16]
 8004b40:	f7fb fccc 	bl	80004dc <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d004      	beq.n	8004b54 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8004b4a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8004b4e:	bf30      	wfi
				__asm volatile( "isb" );
 8004b50:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fb fccb 	bl	80004f0 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8004b5a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8004b5c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8004b60:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8004b64:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8004b66:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8004b6a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8004b6e:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <vPortSuppressTicksAndSleep+0x184>)
 8004b70:	2206      	movs	r2, #6
 8004b72:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8004b74:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <vPortSuppressTicksAndSleep+0x184>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01d      	beq.n	8004bbc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8004b80:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <vPortSuppressTicksAndSleep+0x18c>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b27      	ldr	r3, [pc, #156]	; (8004c24 <vPortSuppressTicksAndSleep+0x188>)
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	1acb      	subs	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8004b92:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <vPortSuppressTicksAndSleep+0x190>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d304      	bcc.n	8004ba6 <vPortSuppressTicksAndSleep+0x10a>
 8004b9c:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <vPortSuppressTicksAndSleep+0x18c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d903      	bls.n	8004bae <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <vPortSuppressTicksAndSleep+0x18c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8004bae:	4a20      	ldr	r2, [pc, #128]	; (8004c30 <vPortSuppressTicksAndSleep+0x194>)
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	e018      	b.n	8004bee <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <vPortSuppressTicksAndSleep+0x18c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	fb03 f202 	mul.w	r2, r3, r2
 8004bc6:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <vPortSuppressTicksAndSleep+0x188>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8004bce:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <vPortSuppressTicksAndSleep+0x18c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	4a12      	ldr	r2, [pc, #72]	; (8004c28 <vPortSuppressTicksAndSleep+0x18c>)
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	fb03 f202 	mul.w	r2, r3, r2
 8004be6:	4912      	ldr	r1, [pc, #72]	; (8004c30 <vPortSuppressTicksAndSleep+0x194>)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bee:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <vPortSuppressTicksAndSleep+0x188>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <vPortSuppressTicksAndSleep+0x184>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <vPortSuppressTicksAndSleep+0x184>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8004c00:	69b8      	ldr	r0, [r7, #24]
 8004c02:	f7fe fd8f 	bl	8003724 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <vPortSuppressTicksAndSleep+0x18c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <vPortSuppressTicksAndSleep+0x194>)
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8004c10:	b662      	cpsie	i
	}
 8004c12:	bf00      	nop
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000ed8 	.word	0x20000ed8
 8004c20:	e000e010 	.word	0xe000e010
 8004c24:	e000e018 	.word	0xe000e018
 8004c28:	20000ed4 	.word	0x20000ed4
 8004c2c:	20000edc 	.word	0x20000edc
 8004c30:	e000e014 	.word	0xe000e014

08004c34 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8004c38:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <vPortSetupTimerInterrupt+0x58>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <vPortSetupTimerInterrupt+0x5c>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	099b      	lsrs	r3, r3, #6
 8004c44:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <vPortSetupTimerInterrupt+0x60>)
 8004c46:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8004c48:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <vPortSetupTimerInterrupt+0x60>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <vPortSetupTimerInterrupt+0x64>)
 8004c56:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8004c58:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <vPortSetupTimerInterrupt+0x68>)
 8004c5a:	222d      	movs	r2, #45	; 0x2d
 8004c5c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <vPortSetupTimerInterrupt+0x6c>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <vPortSetupTimerInterrupt+0x70>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c6a:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <vPortSetupTimerInterrupt+0x58>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <vPortSetupTimerInterrupt+0x5c>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	099b      	lsrs	r3, r3, #6
 8004c76:	4a0c      	ldr	r2, [pc, #48]	; (8004ca8 <vPortSetupTimerInterrupt+0x74>)
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c7c:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <vPortSetupTimerInterrupt+0x6c>)
 8004c7e:	2207      	movs	r2, #7
 8004c80:	601a      	str	r2, [r3, #0]
}
 8004c82:	bf00      	nop
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	20000000 	.word	0x20000000
 8004c90:	10624dd3 	.word	0x10624dd3
 8004c94:	20000ed4 	.word	0x20000ed4
 8004c98:	20000ed8 	.word	0x20000ed8
 8004c9c:	20000edc 	.word	0x20000edc
 8004ca0:	e000e010 	.word	0xe000e010
 8004ca4:	e000e018 	.word	0xe000e018
 8004ca8:	e000e014 	.word	0xe000e014

08004cac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cbc <vPortEnableVFP+0x10>
 8004cb0:	6801      	ldr	r1, [r0, #0]
 8004cb2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cb6:	6001      	str	r1, [r0, #0]
 8004cb8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cba:	bf00      	nop
 8004cbc:	e000ed88 	.word	0xe000ed88

08004cc0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cc6:	f3ef 8305 	mrs	r3, IPSR
 8004cca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	d914      	bls.n	8004cfc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <vPortValidateInterruptPriority+0x70>)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cdc:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <vPortValidateInterruptPriority+0x74>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	7afa      	ldrb	r2, [r7, #11]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d20a      	bcs.n	8004cfc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	607b      	str	r3, [r7, #4]
}
 8004cf8:	bf00      	nop
 8004cfa:	e7fe      	b.n	8004cfa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <vPortValidateInterruptPriority+0x78>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d04:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <vPortValidateInterruptPriority+0x7c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d90a      	bls.n	8004d22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	603b      	str	r3, [r7, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <vPortValidateInterruptPriority+0x60>
	}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	e000e3f0 	.word	0xe000e3f0
 8004d34:	20000ee0 	.word	0x20000ee0
 8004d38:	e000ed0c 	.word	0xe000ed0c
 8004d3c:	20000ee4 	.word	0x20000ee4

08004d40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d4c:	f7fe fbf6 	bl	800353c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d50:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <pvPortMalloc+0x180>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d58:	f000 f920 	bl	8004f9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d5c:	4b59      	ldr	r3, [pc, #356]	; (8004ec4 <pvPortMalloc+0x184>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f040 8093 	bne.w	8004e90 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01d      	beq.n	8004dac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d70:	2208      	movs	r2, #8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4413      	add	r3, r2
 8004d76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d014      	beq.n	8004dac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f023 0307 	bic.w	r3, r3, #7
 8004d88:	3308      	adds	r3, #8
 8004d8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <pvPortMalloc+0x6c>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	617b      	str	r3, [r7, #20]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d06e      	beq.n	8004e90 <pvPortMalloc+0x150>
 8004db2:	4b45      	ldr	r3, [pc, #276]	; (8004ec8 <pvPortMalloc+0x188>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d869      	bhi.n	8004e90 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dbc:	4b43      	ldr	r3, [pc, #268]	; (8004ecc <pvPortMalloc+0x18c>)
 8004dbe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dc0:	4b42      	ldr	r3, [pc, #264]	; (8004ecc <pvPortMalloc+0x18c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dc6:	e004      	b.n	8004dd2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d903      	bls.n	8004de4 <pvPortMalloc+0xa4>
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f1      	bne.n	8004dc8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004de4:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <pvPortMalloc+0x180>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d050      	beq.n	8004e90 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2208      	movs	r2, #8
 8004df4:	4413      	add	r3, r2
 8004df6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	2308      	movs	r3, #8
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d91f      	bls.n	8004e50 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4413      	add	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <pvPortMalloc+0xf8>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	613b      	str	r3, [r7, #16]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1ad2      	subs	r2, r2, r3
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e4a:	69b8      	ldr	r0, [r7, #24]
 8004e4c:	f000 f908 	bl	8005060 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <pvPortMalloc+0x188>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <pvPortMalloc+0x188>)
 8004e5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <pvPortMalloc+0x188>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <pvPortMalloc+0x190>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d203      	bcs.n	8004e72 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e6a:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <pvPortMalloc+0x188>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <pvPortMalloc+0x190>)
 8004e70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <pvPortMalloc+0x184>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e86:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <pvPortMalloc+0x194>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <pvPortMalloc+0x194>)
 8004e8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e90:	f7fe fb9a 	bl	80035c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <pvPortMalloc+0x174>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60fb      	str	r3, [r7, #12]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <pvPortMalloc+0x172>
	return pvReturn;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3728      	adds	r7, #40	; 0x28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20004af0 	.word	0x20004af0
 8004ec4:	20004b04 	.word	0x20004b04
 8004ec8:	20004af4 	.word	0x20004af4
 8004ecc:	20004ae8 	.word	0x20004ae8
 8004ed0:	20004af8 	.word	0x20004af8
 8004ed4:	20004afc 	.word	0x20004afc

08004ed8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d04d      	beq.n	8004f86 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004eea:	2308      	movs	r3, #8
 8004eec:	425b      	negs	r3, r3
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <vPortFree+0xb8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <vPortFree+0x44>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	60fb      	str	r3, [r7, #12]
}
 8004f18:	bf00      	nop
 8004f1a:	e7fe      	b.n	8004f1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <vPortFree+0x62>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	60bb      	str	r3, [r7, #8]
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	4b14      	ldr	r3, [pc, #80]	; (8004f90 <vPortFree+0xb8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4013      	ands	r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01e      	beq.n	8004f86 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d11a      	bne.n	8004f86 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <vPortFree+0xb8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f60:	f7fe faec 	bl	800353c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <vPortFree+0xbc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	4a09      	ldr	r2, [pc, #36]	; (8004f94 <vPortFree+0xbc>)
 8004f70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f72:	6938      	ldr	r0, [r7, #16]
 8004f74:	f000 f874 	bl	8005060 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <vPortFree+0xc0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <vPortFree+0xc0>)
 8004f80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f82:	f7fe fb21 	bl	80035c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f86:	bf00      	nop
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20004b04 	.word	0x20004b04
 8004f94:	20004af4 	.word	0x20004af4
 8004f98:	20004b00 	.word	0x20004b00

08004f9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fa2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004fa6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fa8:	4b27      	ldr	r3, [pc, #156]	; (8005048 <prvHeapInit+0xac>)
 8004faa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3307      	adds	r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0307 	bic.w	r3, r3, #7
 8004fc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <prvHeapInit+0xac>)
 8004fcc:	4413      	add	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	; (800504c <prvHeapInit+0xb0>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fda:	4b1c      	ldr	r3, [pc, #112]	; (800504c <prvHeapInit+0xb0>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fe8:	2208      	movs	r2, #8
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0307 	bic.w	r3, r3, #7
 8004ff6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a15      	ldr	r2, [pc, #84]	; (8005050 <prvHeapInit+0xb4>)
 8004ffc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ffe:	4b14      	ldr	r3, [pc, #80]	; (8005050 <prvHeapInit+0xb4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2200      	movs	r2, #0
 8005004:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005006:	4b12      	ldr	r3, [pc, #72]	; (8005050 <prvHeapInit+0xb4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <prvHeapInit+0xb4>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <prvHeapInit+0xb8>)
 800502a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <prvHeapInit+0xbc>)
 8005032:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005034:	4b09      	ldr	r3, [pc, #36]	; (800505c <prvHeapInit+0xc0>)
 8005036:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800503a:	601a      	str	r2, [r3, #0]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	20000ee8 	.word	0x20000ee8
 800504c:	20004ae8 	.word	0x20004ae8
 8005050:	20004af0 	.word	0x20004af0
 8005054:	20004af8 	.word	0x20004af8
 8005058:	20004af4 	.word	0x20004af4
 800505c:	20004b04 	.word	0x20004b04

08005060 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005068:	4b28      	ldr	r3, [pc, #160]	; (800510c <prvInsertBlockIntoFreeList+0xac>)
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e002      	b.n	8005074 <prvInsertBlockIntoFreeList+0x14>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	429a      	cmp	r2, r3
 800507c:	d8f7      	bhi.n	800506e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4413      	add	r3, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d108      	bne.n	80050a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	441a      	add	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	441a      	add	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d118      	bne.n	80050e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <prvInsertBlockIntoFreeList+0xb0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d00d      	beq.n	80050de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	441a      	add	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e008      	b.n	80050f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050de:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <prvInsertBlockIntoFreeList+0xb0>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e003      	b.n	80050f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d002      	beq.n	80050fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	20004ae8 	.word	0x20004ae8
 8005110:	20004af0 	.word	0x20004af0

08005114 <memset>:
 8005114:	4402      	add	r2, r0
 8005116:	4603      	mov	r3, r0
 8005118:	4293      	cmp	r3, r2
 800511a:	d100      	bne.n	800511e <memset+0xa>
 800511c:	4770      	bx	lr
 800511e:	f803 1b01 	strb.w	r1, [r3], #1
 8005122:	e7f9      	b.n	8005118 <memset+0x4>

08005124 <_reclaim_reent>:
 8005124:	4b29      	ldr	r3, [pc, #164]	; (80051cc <_reclaim_reent+0xa8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4283      	cmp	r3, r0
 800512a:	b570      	push	{r4, r5, r6, lr}
 800512c:	4604      	mov	r4, r0
 800512e:	d04b      	beq.n	80051c8 <_reclaim_reent+0xa4>
 8005130:	69c3      	ldr	r3, [r0, #28]
 8005132:	b143      	cbz	r3, 8005146 <_reclaim_reent+0x22>
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d144      	bne.n	80051c4 <_reclaim_reent+0xa0>
 800513a:	69e3      	ldr	r3, [r4, #28]
 800513c:	6819      	ldr	r1, [r3, #0]
 800513e:	b111      	cbz	r1, 8005146 <_reclaim_reent+0x22>
 8005140:	4620      	mov	r0, r4
 8005142:	f000 f879 	bl	8005238 <_free_r>
 8005146:	6961      	ldr	r1, [r4, #20]
 8005148:	b111      	cbz	r1, 8005150 <_reclaim_reent+0x2c>
 800514a:	4620      	mov	r0, r4
 800514c:	f000 f874 	bl	8005238 <_free_r>
 8005150:	69e1      	ldr	r1, [r4, #28]
 8005152:	b111      	cbz	r1, 800515a <_reclaim_reent+0x36>
 8005154:	4620      	mov	r0, r4
 8005156:	f000 f86f 	bl	8005238 <_free_r>
 800515a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800515c:	b111      	cbz	r1, 8005164 <_reclaim_reent+0x40>
 800515e:	4620      	mov	r0, r4
 8005160:	f000 f86a 	bl	8005238 <_free_r>
 8005164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005166:	b111      	cbz	r1, 800516e <_reclaim_reent+0x4a>
 8005168:	4620      	mov	r0, r4
 800516a:	f000 f865 	bl	8005238 <_free_r>
 800516e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005170:	b111      	cbz	r1, 8005178 <_reclaim_reent+0x54>
 8005172:	4620      	mov	r0, r4
 8005174:	f000 f860 	bl	8005238 <_free_r>
 8005178:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800517a:	b111      	cbz	r1, 8005182 <_reclaim_reent+0x5e>
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f85b 	bl	8005238 <_free_r>
 8005182:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005184:	b111      	cbz	r1, 800518c <_reclaim_reent+0x68>
 8005186:	4620      	mov	r0, r4
 8005188:	f000 f856 	bl	8005238 <_free_r>
 800518c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800518e:	b111      	cbz	r1, 8005196 <_reclaim_reent+0x72>
 8005190:	4620      	mov	r0, r4
 8005192:	f000 f851 	bl	8005238 <_free_r>
 8005196:	6a23      	ldr	r3, [r4, #32]
 8005198:	b1b3      	cbz	r3, 80051c8 <_reclaim_reent+0xa4>
 800519a:	4620      	mov	r0, r4
 800519c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80051a0:	4718      	bx	r3
 80051a2:	5949      	ldr	r1, [r1, r5]
 80051a4:	b941      	cbnz	r1, 80051b8 <_reclaim_reent+0x94>
 80051a6:	3504      	adds	r5, #4
 80051a8:	69e3      	ldr	r3, [r4, #28]
 80051aa:	2d80      	cmp	r5, #128	; 0x80
 80051ac:	68d9      	ldr	r1, [r3, #12]
 80051ae:	d1f8      	bne.n	80051a2 <_reclaim_reent+0x7e>
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 f841 	bl	8005238 <_free_r>
 80051b6:	e7c0      	b.n	800513a <_reclaim_reent+0x16>
 80051b8:	680e      	ldr	r6, [r1, #0]
 80051ba:	4620      	mov	r0, r4
 80051bc:	f000 f83c 	bl	8005238 <_free_r>
 80051c0:	4631      	mov	r1, r6
 80051c2:	e7ef      	b.n	80051a4 <_reclaim_reent+0x80>
 80051c4:	2500      	movs	r5, #0
 80051c6:	e7ef      	b.n	80051a8 <_reclaim_reent+0x84>
 80051c8:	bd70      	pop	{r4, r5, r6, pc}
 80051ca:	bf00      	nop
 80051cc:	2000005c 	.word	0x2000005c

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4d0d      	ldr	r5, [pc, #52]	; (8005208 <__libc_init_array+0x38>)
 80051d4:	4c0d      	ldr	r4, [pc, #52]	; (800520c <__libc_init_array+0x3c>)
 80051d6:	1b64      	subs	r4, r4, r5
 80051d8:	10a4      	asrs	r4, r4, #2
 80051da:	2600      	movs	r6, #0
 80051dc:	42a6      	cmp	r6, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	4d0b      	ldr	r5, [pc, #44]	; (8005210 <__libc_init_array+0x40>)
 80051e2:	4c0c      	ldr	r4, [pc, #48]	; (8005214 <__libc_init_array+0x44>)
 80051e4:	f000 f880 	bl	80052e8 <_init>
 80051e8:	1b64      	subs	r4, r4, r5
 80051ea:	10a4      	asrs	r4, r4, #2
 80051ec:	2600      	movs	r6, #0
 80051ee:	42a6      	cmp	r6, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f8:	4798      	blx	r3
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005202:	4798      	blx	r3
 8005204:	3601      	adds	r6, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	08005364 	.word	0x08005364
 800520c:	08005364 	.word	0x08005364
 8005210:	08005364 	.word	0x08005364
 8005214:	08005368 	.word	0x08005368

08005218 <__retarget_lock_acquire_recursive>:
 8005218:	4770      	bx	lr

0800521a <__retarget_lock_release_recursive>:
 800521a:	4770      	bx	lr

0800521c <memcpy>:
 800521c:	440a      	add	r2, r1
 800521e:	4291      	cmp	r1, r2
 8005220:	f100 33ff 	add.w	r3, r0, #4294967295
 8005224:	d100      	bne.n	8005228 <memcpy+0xc>
 8005226:	4770      	bx	lr
 8005228:	b510      	push	{r4, lr}
 800522a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800522e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005232:	4291      	cmp	r1, r2
 8005234:	d1f9      	bne.n	800522a <memcpy+0xe>
 8005236:	bd10      	pop	{r4, pc}

08005238 <_free_r>:
 8005238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800523a:	2900      	cmp	r1, #0
 800523c:	d044      	beq.n	80052c8 <_free_r+0x90>
 800523e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005242:	9001      	str	r0, [sp, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f1a1 0404 	sub.w	r4, r1, #4
 800524a:	bfb8      	it	lt
 800524c:	18e4      	addlt	r4, r4, r3
 800524e:	f000 f83f 	bl	80052d0 <__malloc_lock>
 8005252:	4a1e      	ldr	r2, [pc, #120]	; (80052cc <_free_r+0x94>)
 8005254:	9801      	ldr	r0, [sp, #4]
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	b933      	cbnz	r3, 8005268 <_free_r+0x30>
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6014      	str	r4, [r2, #0]
 800525e:	b003      	add	sp, #12
 8005260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005264:	f000 b83a 	b.w	80052dc <__malloc_unlock>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d908      	bls.n	800527e <_free_r+0x46>
 800526c:	6825      	ldr	r5, [r4, #0]
 800526e:	1961      	adds	r1, r4, r5
 8005270:	428b      	cmp	r3, r1
 8005272:	bf01      	itttt	eq
 8005274:	6819      	ldreq	r1, [r3, #0]
 8005276:	685b      	ldreq	r3, [r3, #4]
 8005278:	1949      	addeq	r1, r1, r5
 800527a:	6021      	streq	r1, [r4, #0]
 800527c:	e7ed      	b.n	800525a <_free_r+0x22>
 800527e:	461a      	mov	r2, r3
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b10b      	cbz	r3, 8005288 <_free_r+0x50>
 8005284:	42a3      	cmp	r3, r4
 8005286:	d9fa      	bls.n	800527e <_free_r+0x46>
 8005288:	6811      	ldr	r1, [r2, #0]
 800528a:	1855      	adds	r5, r2, r1
 800528c:	42a5      	cmp	r5, r4
 800528e:	d10b      	bne.n	80052a8 <_free_r+0x70>
 8005290:	6824      	ldr	r4, [r4, #0]
 8005292:	4421      	add	r1, r4
 8005294:	1854      	adds	r4, r2, r1
 8005296:	42a3      	cmp	r3, r4
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	d1e0      	bne.n	800525e <_free_r+0x26>
 800529c:	681c      	ldr	r4, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	6053      	str	r3, [r2, #4]
 80052a2:	440c      	add	r4, r1
 80052a4:	6014      	str	r4, [r2, #0]
 80052a6:	e7da      	b.n	800525e <_free_r+0x26>
 80052a8:	d902      	bls.n	80052b0 <_free_r+0x78>
 80052aa:	230c      	movs	r3, #12
 80052ac:	6003      	str	r3, [r0, #0]
 80052ae:	e7d6      	b.n	800525e <_free_r+0x26>
 80052b0:	6825      	ldr	r5, [r4, #0]
 80052b2:	1961      	adds	r1, r4, r5
 80052b4:	428b      	cmp	r3, r1
 80052b6:	bf04      	itt	eq
 80052b8:	6819      	ldreq	r1, [r3, #0]
 80052ba:	685b      	ldreq	r3, [r3, #4]
 80052bc:	6063      	str	r3, [r4, #4]
 80052be:	bf04      	itt	eq
 80052c0:	1949      	addeq	r1, r1, r5
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	6054      	str	r4, [r2, #4]
 80052c6:	e7ca      	b.n	800525e <_free_r+0x26>
 80052c8:	b003      	add	sp, #12
 80052ca:	bd30      	pop	{r4, r5, pc}
 80052cc:	20004c44 	.word	0x20004c44

080052d0 <__malloc_lock>:
 80052d0:	4801      	ldr	r0, [pc, #4]	; (80052d8 <__malloc_lock+0x8>)
 80052d2:	f7ff bfa1 	b.w	8005218 <__retarget_lock_acquire_recursive>
 80052d6:	bf00      	nop
 80052d8:	20004c40 	.word	0x20004c40

080052dc <__malloc_unlock>:
 80052dc:	4801      	ldr	r0, [pc, #4]	; (80052e4 <__malloc_unlock+0x8>)
 80052de:	f7ff bf9c 	b.w	800521a <__retarget_lock_release_recursive>
 80052e2:	bf00      	nop
 80052e4:	20004c40 	.word	0x20004c40

080052e8 <_init>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr

080052f4 <_fini>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr
